/** Declaration file generated by dts-gen */

export = enquirer;

declare class enquirer {
    constructor(...args: any[]);

    ask(...args: any[]): void;

    prompt(...args: any[]): void;

    register(...args: any[]): void;

    use(...args: any[]): void;

    static BasicAuth(...args: any[]): any;

    static Confirm(...args: any[]): void;

    static MultiSelect(...args: any[]): void;

    static addListener(p0: any, p1: any): any;

    static autocomplete(options: any): void;

    static basicauth(options: any): void;

    static captureRejectionSymbol: any;

    static captureRejections: boolean;

    static confirm(options: any): void;

    static defaultMaxListeners: number;

    static editable(options: any): void;

    static emit(p0: any): any;

    static errorMonitor: any;

    static eventNames(): any;

    static form(options: any): void;

    static getEventListeners(emitterOrTarget: any, type: any): any;

    static getMaxListeners(): any;

    static init(opts: any): void;

    static input(options: any): void;

    static invisible(options: any): void;

    static kMaxEventTargetListeners: any;

    static kMaxEventTargetListenersWarned: any;

    static list(options: any): void;

    static listenerCount(p0: any): any;

    static listeners(p0: any): any;

    static multiselect(options: any): void;

    static numeral(options: any): void;

    static off(p0: any, p1: any): any;

    static on(p0: any, p1: any): any;

    static once(p0: any, p1: any): any;

    static password(options: any): void;

    static prependListener(p0: any, p1: any): any;

    static prependOnceListener(p0: any, p1: any): any;

    static prompt(questions: any, rest: any): any;

    static quiz(options: any): void;

    static rawListeners(p0: any): any;

    static removeAllListeners(p0: any): any;

    static removeListener(p0: any, p1: any): any;

    static scale(options: any): void;

    static select(options: any): void;

    static setMaxListeners(p0: any): any;

    static snippet(options: any): void;

    static sort(options: any): void;

    static survey(options: any): void;

    static text(options: any): void;

    static toggle(options: any): void;

    static usingDomains: boolean;

}

declare namespace enquirer {
    class ArrayPrompt {
        constructor(...args: any[]);

        a(...args: any[]): void;

        addChoice(...args: any[]): void;

        disable(...args: any[]): void;

        dispatch(...args: any[]): void;

        down(...args: any[]): void;

        enable(...args: any[]): void;

        end(...args: any[]): void;

        filter(...args: any[]): void;

        find(...args: any[]): void;

        findIndex(...args: any[]): void;

        first(...args: any[]): void;

        focus(...args: any[]): void;

        g(...args: any[]): void;

        home(...args: any[]): void;

        i(...args: any[]): void;

        indent(...args: any[]): void;

        initialize(...args: any[]): void;

        isChoice(...args: any[]): void;

        isDisabled(...args: any[]): void;

        isEnabled(...args: any[]): void;

        isSelected(...args: any[]): void;

        last(...args: any[]): void;

        left(...args: any[]): void;

        map(...args: any[]): void;

        newItem(...args: any[]): void;

        next(...args: any[]): void;

        number(...args: any[]): void;

        onChoice(...args: any[]): void;

        pageDown(...args: any[]): void;

        pageUp(...args: any[]): void;

        prev(...args: any[]): void;

        reset(...args: any[]): void;

        right(...args: any[]): void;

        scrollDown(...args: any[]): void;

        scrollUp(...args: any[]): void;

        shiftDown(...args: any[]): void;

        shiftUp(...args: any[]): void;

        space(...args: any[]): void;

        submit(...args: any[]): void;

        swap(...args: any[]): void;

        toChoice(...args: any[]): void;

        toChoices(...args: any[]): void;

        toggle(...args: any[]): void;

        up(...args: any[]): void;

        static captureRejectionSymbol: any;

        static captureRejections: boolean;

        static defaultMaxListeners: number;

        static errorMonitor: any;

        static getEventListeners(emitterOrTarget: any, type: any): any;

        static init(opts: any): void;

        static kMaxEventTargetListeners: any;

        static kMaxEventTargetListenersWarned: any;

        static listenerCount(emitter: any, type: any): any;

        static on(emitter: any, event: any, options: any): any;

        static once(emitter: any, name: any, options: any): any;

        static prompt(options: any): void;

        static setMaxListeners(n: any, eventTargets: any): void;

        static usingDomains: boolean;

    }

    class AuthPrompt {
        constructor(...args: any[]);

        submit(...args: any[]): void;

        static captureRejectionSymbol: any;

        static captureRejections: boolean;

        static create(...args: any[]): void;

        static defaultMaxListeners: number;

        static errorMonitor: any;

        static getEventListeners(emitterOrTarget: any, type: any): any;

        static init(opts: any): void;

        static kMaxEventTargetListeners: any;

        static kMaxEventTargetListenersWarned: any;

        static listenerCount(emitter: any, type: any): any;

        static on(emitter: any, event: any, options: any): any;

        static once(emitter: any, name: any, options: any): any;

        static prompt(options: any): void;

        static setMaxListeners(n: any, eventTargets: any): void;

        static usingDomains: boolean;

    }

    class AutoComplete {
        constructor(...args: any[]);

        append(...args: any[]): void;

        complete(...args: any[]): void;

        delete(...args: any[]): void;

        deleteForward(...args: any[]): void;

        dispatch(...args: any[]): void;

        format(...args: any[]): void;

        moveCursor(...args: any[]): void;

        number(...args: any[]): void;

        pointer(...args: any[]): void;

        render(...args: any[]): void;

        space(...args: any[]): void;

        submit(...args: any[]): void;

        suggest(...args: any[]): void;

        static captureRejectionSymbol: any;

        static captureRejections: boolean;

        static defaultMaxListeners: number;

        static errorMonitor: any;

        static getEventListeners(emitterOrTarget: any, type: any): any;

        static init(opts: any): void;

        static kMaxEventTargetListeners: any;

        static kMaxEventTargetListenersWarned: any;

        static listenerCount(emitter: any, type: any): any;

        static on(emitter: any, event: any, options: any): any;

        static once(emitter: any, name: any, options: any): any;

        static prompt(options: any): void;

        static setMaxListeners(n: any, eventTargets: any): void;

        static usingDomains: boolean;

    }

    class BooleanPrompt {
        constructor(...args: any[]);

        cast(...args: any[]): void;

        dispatch(...args: any[]): void;

        format(...args: any[]): void;

        hint(...args: any[]): void;

        initialize(...args: any[]): void;

        isFalse(...args: any[]): void;

        isTrue(...args: any[]): void;

        isValue(...args: any[]): void;

        render(...args: any[]): void;

        static captureRejectionSymbol: any;

        static captureRejections: boolean;

        static defaultMaxListeners: number;

        static errorMonitor: any;

        static getEventListeners(emitterOrTarget: any, type: any): any;

        static init(opts: any): void;

        static kMaxEventTargetListeners: any;

        static kMaxEventTargetListenersWarned: any;

        static listenerCount(emitter: any, type: any): any;

        static on(emitter: any, event: any, options: any): any;

        static once(emitter: any, name: any, options: any): any;

        static prompt(options: any): void;

        static setMaxListeners(n: any, eventTargets: any): void;

        static usingDomains: boolean;

    }

    class Editable {
        constructor(...args: any[]);

        append(...args: any[]): void;

        delete(...args: any[]): void;

        dispatch(...args: any[]): void;

        error(...args: any[]): void;

        footer(...args: any[]): void;

        indent(...args: any[]): void;

        indicator(...args: any[]): void;

        next(...args: any[]): void;

        number(...args: any[]): void;

        prev(...args: any[]): void;

        renderChoice(...args: any[]): void;

        space(...args: any[]): void;

        submit(...args: any[]): void;

        validate(...args: any[]): void;

        static captureRejectionSymbol: any;

        static captureRejections: boolean;

        static defaultMaxListeners: number;

        static errorMonitor: any;

        static getEventListeners(emitterOrTarget: any, type: any): any;

        static init(opts: any): void;

        static kMaxEventTargetListeners: any;

        static kMaxEventTargetListenersWarned: any;

        static listenerCount(emitter: any, type: any): any;

        static on(emitter: any, event: any, options: any): any;

        static once(emitter: any, name: any, options: any): any;

        static prompt(options: any): void;

        static setMaxListeners(n: any, eventTargets: any): void;

        static usingDomains: boolean;

    }

    class EventEmitter {
        constructor(opts: any);

        addListener(type: any, listener: any): any;

        emit(type: any, args: any): any;

        eventNames(): any;

        getMaxListeners(): any;

        listenerCount(type: any): any;

        listeners(type: any): any;

        off(type: any, listener: any): any;

        on(type: any, listener: any): any;

        once(type: any, listener: any): any;

        prependListener(type: any, listener: any): any;

        prependOnceListener(type: any, listener: any): any;

        rawListeners(type: any): any;

        removeAllListeners(type: any, ...args: any[]): any;

        removeListener(type: any, listener: any): any;

        setMaxListeners(n: any): any;

        static EventEmitter: any;

        static captureRejectionSymbol: any;

        static captureRejections: boolean;

        static defaultMaxListeners: number;

        static errorMonitor: any;

        static getEventListeners(emitterOrTarget: any, type: any): any;

        static init(opts: any): void;

        static kMaxEventTargetListeners: any;

        static kMaxEventTargetListenersWarned: any;

        static listenerCount(emitter: any, type: any): any;

        static on(emitter: any, event: any, options: any): any;

        static once(emitter: any, name: any, options: any): any;

        static setMaxListeners(n: any, eventTargets: any): void;

        static usingDomains: boolean;

    }

    class EventEmitterAsyncResource {
        constructor(...args: any[]);

        emit(...args: any[]): void;

        emitDestroy(...args: any[]): void;

        static EventEmitterAsyncResource: any;

        static captureRejectionSymbol: any;

        static captureRejections: boolean;

        static defaultMaxListeners: number;

        static errorMonitor: any;

        static getEventListeners(emitterOrTarget: any, type: any): any;

        static init(opts: any): void;

        static kMaxEventTargetListeners: any;

        static kMaxEventTargetListenersWarned: any;

        static listenerCount(emitter: any, type: any): any;

        static on(emitter: any, event: any, options: any): any;

        static once(emitter: any, name: any, options: any): any;

        static setMaxListeners(n: any, eventTargets: any): void;

        static usingDomains: boolean;

    }

    class Form {
        constructor(...args: any[]);

        append(...args: any[]): void;

        choiceSeparator(...args: any[]): void;

        delete(...args: any[]): void;

        deleteForward(...args: any[]): void;

        dispatch(...args: any[]): void;

        format(...args: any[]): void;

        indicator(...args: any[]): void;

        left(...args: any[]): void;

        next(...args: any[]): void;

        number(...args: any[]): void;

        pointer(...args: any[]): void;

        prev(...args: any[]): void;

        renderChoice(...args: any[]): void;

        reset(...args: any[]): void;

        right(...args: any[]): void;

        separator(...args: any[]): void;

        space(...args: any[]): void;

        submit(...args: any[]): void;

        static captureRejectionSymbol: any;

        static captureRejections: boolean;

        static defaultMaxListeners: number;

        static errorMonitor: any;

        static getEventListeners(emitterOrTarget: any, type: any): any;

        static init(opts: any): void;

        static kMaxEventTargetListeners: any;

        static kMaxEventTargetListenersWarned: any;

        static listenerCount(emitter: any, type: any): any;

        static on(emitter: any, event: any, options: any): any;

        static once(emitter: any, name: any, options: any): any;

        static prompt(options: any): void;

        static setMaxListeners(n: any, eventTargets: any): void;

        static usingDomains: boolean;

    }

    class Input {
        constructor(...args: any[]);

        altDown(...args: any[]): void;

        altUp(...args: any[]): void;

        completion(...args: any[]): void;

        prev(...args: any[]): void;

        save(...args: any[]): void;

        submit(...args: any[]): void;

        static captureRejectionSymbol: any;

        static captureRejections: boolean;

        static defaultMaxListeners: number;

        static errorMonitor: any;

        static getEventListeners(emitterOrTarget: any, type: any): any;

        static init(opts: any): void;

        static kMaxEventTargetListeners: any;

        static kMaxEventTargetListenersWarned: any;

        static listenerCount(emitter: any, type: any): any;

        static on(emitter: any, event: any, options: any): any;

        static once(emitter: any, name: any, options: any): any;

        static prompt(options: any): void;

        static setMaxListeners(n: any, eventTargets: any): void;

        static usingDomains: boolean;

    }

    class Invisible {
        constructor(...args: any[]);

        format(...args: any[]): void;

        static captureRejectionSymbol: any;

        static captureRejections: boolean;

        static defaultMaxListeners: number;

        static errorMonitor: any;

        static getEventListeners(emitterOrTarget: any, type: any): any;

        static init(opts: any): void;

        static kMaxEventTargetListeners: any;

        static kMaxEventTargetListenersWarned: any;

        static listenerCount(emitter: any, type: any): any;

        static on(emitter: any, event: any, options: any): any;

        static once(emitter: any, name: any, options: any): any;

        static prompt(options: any): void;

        static setMaxListeners(n: any, eventTargets: any): void;

        static usingDomains: boolean;

    }

    class List {
        constructor(...args: any[]);

        format(...args: any[]): void;

        split(...args: any[]): void;

        submit(...args: any[]): void;

        static captureRejectionSymbol: any;

        static captureRejections: boolean;

        static defaultMaxListeners: number;

        static errorMonitor: any;

        static getEventListeners(emitterOrTarget: any, type: any): any;

        static init(opts: any): void;

        static kMaxEventTargetListeners: any;

        static kMaxEventTargetListenersWarned: any;

        static listenerCount(emitter: any, type: any): any;

        static on(emitter: any, event: any, options: any): any;

        static once(emitter: any, name: any, options: any): any;

        static prompt(options: any): void;

        static setMaxListeners(n: any, eventTargets: any): void;

        static usingDomains: boolean;

    }

    class NumberPrompt {
        constructor(...args: any[]);

        append(...args: any[]): void;

        down(...args: any[]): void;

        format(...args: any[]): void;

        isValue(...args: any[]): void;

        next(...args: any[]): void;

        number(...args: any[]): void;

        shiftDown(...args: any[]): void;

        shiftUp(...args: any[]): void;

        submit(...args: any[]): void;

        toNumber(...args: any[]): void;

        up(...args: any[]): void;

        static captureRejectionSymbol: any;

        static captureRejections: boolean;

        static defaultMaxListeners: number;

        static errorMonitor: any;

        static getEventListeners(emitterOrTarget: any, type: any): any;

        static init(opts: any): void;

        static kMaxEventTargetListeners: any;

        static kMaxEventTargetListenersWarned: any;

        static listenerCount(emitter: any, type: any): any;

        static on(emitter: any, event: any, options: any): any;

        static once(emitter: any, name: any, options: any): any;

        static prompt(options: any): void;

        static setMaxListeners(n: any, eventTargets: any): void;

        static usingDomains: boolean;

    }

    class Numeral {
        constructor(...args: any[]);

        append(...args: any[]): void;

        down(...args: any[]): void;

        format(...args: any[]): void;

        isValue(...args: any[]): void;

        next(...args: any[]): void;

        number(...args: any[]): void;

        shiftDown(...args: any[]): void;

        shiftUp(...args: any[]): void;

        submit(...args: any[]): void;

        toNumber(...args: any[]): void;

        up(...args: any[]): void;

        static captureRejectionSymbol: any;

        static captureRejections: boolean;

        static defaultMaxListeners: number;

        static errorMonitor: any;

        static getEventListeners(emitterOrTarget: any, type: any): any;

        static init(opts: any): void;

        static kMaxEventTargetListeners: any;

        static kMaxEventTargetListenersWarned: any;

        static listenerCount(emitter: any, type: any): any;

        static on(emitter: any, event: any, options: any): any;

        static once(emitter: any, name: any, options: any): any;

        static prompt(options: any): void;

        static setMaxListeners(n: any, eventTargets: any): void;

        static usingDomains: boolean;

    }

    class Password {
        constructor(...args: any[]);

        format(...args: any[]): void;

        static captureRejectionSymbol: any;

        static captureRejections: boolean;

        static defaultMaxListeners: number;

        static errorMonitor: any;

        static getEventListeners(emitterOrTarget: any, type: any): any;

        static init(opts: any): void;

        static kMaxEventTargetListeners: any;

        static kMaxEventTargetListenersWarned: any;

        static listenerCount(emitter: any, type: any): any;

        static on(emitter: any, event: any, options: any): any;

        static once(emitter: any, name: any, options: any): any;

        static prompt(options: any): void;

        static setMaxListeners(n: any, eventTargets: any): void;

        static usingDomains: boolean;

    }

    class Prompt {
        constructor(...args: any[]);

        alert(...args: any[]): void;

        body(...args: any[]): void;

        cancel(...args: any[]): void;

        clear(...args: any[]): void;

        close(...args: any[]): void;

        cursorHide(...args: any[]): void;

        cursorShow(...args: any[]): void;

        element(...args: any[]): void;

        error(...args: any[]): void;

        footer(...args: any[]): void;

        format(...args: any[]): void;

        header(...args: any[]): void;

        hint(...args: any[]): void;

        indicator(...args: any[]): void;

        initialize(...args: any[]): void;

        isValue(...args: any[]): void;

        keypress(...args: any[]): void;

        message(...args: any[]): void;

        pointer(...args: any[]): void;

        prefix(...args: any[]): void;

        render(...args: any[]): void;

        resolve(...args: any[]): void;

        restore(...args: any[]): void;

        result(...args: any[]): void;

        run(...args: any[]): void;

        sections(...args: any[]): void;

        separator(...args: any[]): void;

        skip(...args: any[]): void;

        start(...args: any[]): void;

        submit(...args: any[]): void;

        validate(...args: any[]): void;

        write(...args: any[]): void;

        static captureRejectionSymbol: any;

        static captureRejections: boolean;

        static defaultMaxListeners: number;

        static errorMonitor: any;

        static getEventListeners(emitterOrTarget: any, type: any): any;

        static init(opts: any): void;

        static kMaxEventTargetListeners: any;

        static kMaxEventTargetListenersWarned: any;

        static listenerCount(emitter: any, type: any): any;

        static on(emitter: any, event: any, options: any): any;

        static once(emitter: any, name: any, options: any): any;

        static prompt(options: any): void;

        static setMaxListeners(n: any, eventTargets: any): void;

        static usingDomains: boolean;

    }

    class Quiz {
        constructor(...args: any[]);

        check(...args: any[]): void;

        result(...args: any[]): void;

        toChoices(...args: any[]): void;

        static captureRejectionSymbol: any;

        static captureRejections: boolean;

        static defaultMaxListeners: number;

        static errorMonitor: any;

        static getEventListeners(emitterOrTarget: any, type: any): any;

        static init(opts: any): void;

        static kMaxEventTargetListeners: any;

        static kMaxEventTargetListenersWarned: any;

        static listenerCount(emitter: any, type: any): any;

        static on(emitter: any, event: any, options: any): any;

        static once(emitter: any, name: any, options: any): any;

        static prompt(options: any): void;

        static setMaxListeners(n: any, eventTargets: any): void;

        static usingDomains: boolean;

    }

    class Scale {
        constructor(...args: any[]);

        dispatch(...args: any[]): void;

        format(...args: any[]): void;

        heading(...args: any[]): void;

        indent(...args: any[]): void;

        left(...args: any[]): void;

        pointer(...args: any[]): void;

        render(...args: any[]): void;

        renderChoice(...args: any[]): void;

        renderChoices(...args: any[]): void;

        renderScale(...args: any[]): void;

        renderScaleHeading(...args: any[]): void;

        renderScaleKey(...args: any[]): void;

        reset(...args: any[]): void;

        right(...args: any[]): void;

        scaleIndicator(...args: any[]): void;

        separator(...args: any[]): void;

        submit(...args: any[]): void;

        tableize(...args: any[]): void;

        static captureRejectionSymbol: any;

        static captureRejections: boolean;

        static defaultMaxListeners: number;

        static errorMonitor: any;

        static getEventListeners(emitterOrTarget: any, type: any): any;

        static init(opts: any): void;

        static kMaxEventTargetListeners: any;

        static kMaxEventTargetListenersWarned: any;

        static listenerCount(emitter: any, type: any): any;

        static on(emitter: any, event: any, options: any): any;

        static once(emitter: any, name: any, options: any): any;

        static prompt(options: any): void;

        static setMaxListeners(n: any, eventTargets: any): void;

        static usingDomains: boolean;

    }

    class Select {
        constructor(...args: any[]);

        choiceMessage(...args: any[]): void;

        choiceSeparator(...args: any[]): void;

        dispatch(...args: any[]): void;

        format(...args: any[]): void;

        indicator(...args: any[]): void;

        pointer(...args: any[]): void;

        render(...args: any[]): void;

        renderChoice(...args: any[]): void;

        renderChoices(...args: any[]): void;

        separator(...args: any[]): void;

        static captureRejectionSymbol: any;

        static captureRejections: boolean;

        static defaultMaxListeners: number;

        static errorMonitor: any;

        static getEventListeners(emitterOrTarget: any, type: any): any;

        static init(opts: any): void;

        static kMaxEventTargetListeners: any;

        static kMaxEventTargetListenersWarned: any;

        static listenerCount(emitter: any, type: any): any;

        static on(emitter: any, event: any, options: any): any;

        static once(emitter: any, name: any, options: any): any;

        static prompt(options: any): void;

        static setMaxListeners(n: any, eventTargets: any): void;

        static usingDomains: boolean;

    }

    class Snippet {
        constructor(...args: any[]);

        append(...args: any[]): void;

        decrement(...args: any[]): void;

        delete(...args: any[]): void;

        dispatch(...args: any[]): void;

        down(...args: any[]): void;

        first(...args: any[]): void;

        format(...args: any[]): void;

        getItem(...args: any[]): void;

        increment(...args: any[]): void;

        initialize(...args: any[]): void;

        last(...args: any[]): void;

        left(...args: any[]): void;

        moveCursor(...args: any[]): void;

        next(...args: any[]): void;

        prev(...args: any[]): void;

        render(...args: any[]): void;

        reset(...args: any[]): void;

        right(...args: any[]): void;

        submit(...args: any[]): void;

        up(...args: any[]): void;

        static captureRejectionSymbol: any;

        static captureRejections: boolean;

        static defaultMaxListeners: number;

        static errorMonitor: any;

        static getEventListeners(emitterOrTarget: any, type: any): any;

        static init(opts: any): void;

        static kMaxEventTargetListeners: any;

        static kMaxEventTargetListenersWarned: any;

        static listenerCount(emitter: any, type: any): any;

        static on(emitter: any, event: any, options: any): any;

        static once(emitter: any, name: any, options: any): any;

        static prompt(options: any): void;

        static setMaxListeners(n: any, eventTargets: any): void;

        static usingDomains: boolean;

    }

    class Sort {
        constructor(...args: any[]);

        indicator(...args: any[]): void;

        renderChoice(...args: any[]): void;

        submit(...args: any[]): void;

        static captureRejectionSymbol: any;

        static captureRejections: boolean;

        static defaultMaxListeners: number;

        static errorMonitor: any;

        static getEventListeners(emitterOrTarget: any, type: any): any;

        static init(opts: any): void;

        static kMaxEventTargetListeners: any;

        static kMaxEventTargetListenersWarned: any;

        static listenerCount(emitter: any, type: any): any;

        static on(emitter: any, event: any, options: any): any;

        static once(emitter: any, name: any, options: any): any;

        static prompt(options: any): void;

        static setMaxListeners(n: any, eventTargets: any): void;

        static usingDomains: boolean;

    }

    class StringPrompt {
        constructor(...args: any[]);

        append(...args: any[]): void;

        backward(...args: any[]): void;

        cutForward(...args: any[]): void;

        cutLeft(...args: any[]): void;

        delete(...args: any[]): void;

        deleteForward(...args: any[]): void;

        dispatch(...args: any[]): void;

        first(...args: any[]): void;

        format(...args: any[]): void;

        forward(...args: any[]): void;

        insert(...args: any[]): void;

        isValue(...args: any[]): void;

        keypress(...args: any[]): void;

        last(...args: any[]): void;

        left(...args: any[]): void;

        moveCursor(...args: any[]): void;

        next(...args: any[]): void;

        paste(...args: any[]): void;

        prev(...args: any[]): void;

        render(...args: any[]): void;

        reset(...args: any[]): void;

        right(...args: any[]): void;

        toggleCursor(...args: any[]): void;

        static captureRejectionSymbol: any;

        static captureRejections: boolean;

        static defaultMaxListeners: number;

        static errorMonitor: any;

        static getEventListeners(emitterOrTarget: any, type: any): any;

        static init(opts: any): void;

        static kMaxEventTargetListeners: any;

        static kMaxEventTargetListenersWarned: any;

        static listenerCount(emitter: any, type: any): any;

        static on(emitter: any, event: any, options: any): any;

        static once(emitter: any, name: any, options: any): any;

        static prompt(options: any): void;

        static setMaxListeners(n: any, eventTargets: any): void;

        static usingDomains: boolean;

    }

    class Survey {
        constructor(...args: any[]);

        dispatch(...args: any[]): void;

        format(...args: any[]): void;

        indent(...args: any[]): void;

        indicator(...args: any[]): void;

        left(...args: any[]): void;

        pointer(...args: any[]): void;

        render(...args: any[]): void;

        renderChoice(...args: any[]): void;

        renderChoices(...args: any[]): void;

        right(...args: any[]): void;

        separator(...args: any[]): void;

        space(...args: any[]): void;

        submit(...args: any[]): void;

        toChoices(...args: any[]): void;

        static captureRejectionSymbol: any;

        static captureRejections: boolean;

        static defaultMaxListeners: number;

        static errorMonitor: any;

        static getEventListeners(emitterOrTarget: any, type: any): any;

        static init(opts: any): void;

        static kMaxEventTargetListeners: any;

        static kMaxEventTargetListenersWarned: any;

        static listenerCount(emitter: any, type: any): any;

        static on(emitter: any, event: any, options: any): any;

        static once(emitter: any, name: any, options: any): any;

        static prompt(options: any): void;

        static setMaxListeners(n: any, eventTargets: any): void;

        static usingDomains: boolean;

    }

    class Text {
        constructor(...args: any[]);

        altDown(...args: any[]): void;

        altUp(...args: any[]): void;

        completion(...args: any[]): void;

        prev(...args: any[]): void;

        save(...args: any[]): void;

        submit(...args: any[]): void;

        static captureRejectionSymbol: any;

        static captureRejections: boolean;

        static defaultMaxListeners: number;

        static errorMonitor: any;

        static getEventListeners(emitterOrTarget: any, type: any): any;

        static init(opts: any): void;

        static kMaxEventTargetListeners: any;

        static kMaxEventTargetListenersWarned: any;

        static listenerCount(emitter: any, type: any): any;

        static on(emitter: any, event: any, options: any): any;

        static once(emitter: any, name: any, options: any): any;

        static prompt(options: any): void;

        static setMaxListeners(n: any, eventTargets: any): void;

        static usingDomains: boolean;

    }

    class Toggle {
        constructor(...args: any[]);

        delete(...args: any[]): void;

        disable(...args: any[]): void;

        dispatch(...args: any[]): void;

        down(...args: any[]): void;

        enable(...args: any[]): void;

        format(...args: any[]): void;

        initialize(...args: any[]): void;

        left(...args: any[]): void;

        next(...args: any[]): void;

        prev(...args: any[]): void;

        render(...args: any[]): void;

        reset(...args: any[]): void;

        right(...args: any[]): void;

        toggle(...args: any[]): void;

        up(...args: any[]): void;

        static captureRejectionSymbol: any;

        static captureRejections: boolean;

        static defaultMaxListeners: number;

        static errorMonitor: any;

        static getEventListeners(emitterOrTarget: any, type: any): any;

        static init(opts: any): void;

        static kMaxEventTargetListeners: any;

        static kMaxEventTargetListenersWarned: any;

        static listenerCount(emitter: any, type: any): any;

        static on(emitter: any, event: any, options: any): any;

        static once(emitter: any, name: any, options: any): any;

        static prompt(options: any): void;

        static setMaxListeners(n: any, eventTargets: any): void;

        static usingDomains: boolean;

    }

    namespace ArrayPrompt {
        class EventEmitter {
            constructor(opts: any);

            addListener(type: any, listener: any): any;

            emit(type: any, args: any): any;

            eventNames(): any;

            getMaxListeners(): any;

            listenerCount(type: any): any;

            listeners(type: any): any;

            off(type: any, listener: any): any;

            on(type: any, listener: any): any;

            once(type: any, listener: any): any;

            prependListener(type: any, listener: any): any;

            prependOnceListener(type: any, listener: any): any;

            rawListeners(type: any): any;

            removeAllListeners(type: any, ...args: any[]): any;

            removeListener(type: any, listener: any): any;

            setMaxListeners(n: any): any;

            static EventEmitter: any;

            static captureRejectionSymbol: any;

            static captureRejections: boolean;

            static defaultMaxListeners: number;

            static errorMonitor: any;

            static getEventListeners(emitterOrTarget: any, type: any): any;

            static init(opts: any): void;

            static kMaxEventTargetListeners: any;

            static kMaxEventTargetListenersWarned: any;

            static listenerCount(emitter: any, type: any): any;

            static on(emitter: any, event: any, options: any): any;

            static once(emitter: any, name: any, options: any): any;

            static setMaxListeners(n: any, eventTargets: any): void;

            static usingDomains: boolean;

        }

        class EventEmitterAsyncResource {
            constructor(...args: any[]);

            emit(...args: any[]): void;

            emitDestroy(...args: any[]): void;

            static EventEmitterAsyncResource: any;

            static captureRejectionSymbol: any;

            static captureRejections: boolean;

            static defaultMaxListeners: number;

            static errorMonitor: any;

            static getEventListeners(emitterOrTarget: any, type: any): any;

            static init(opts: any): void;

            static kMaxEventTargetListeners: any;

            static kMaxEventTargetListenersWarned: any;

            static listenerCount(emitter: any, type: any): any;

            static on(emitter: any, event: any, options: any): any;

            static once(emitter: any, name: any, options: any): any;

            static setMaxListeners(n: any, eventTargets: any): void;

            static usingDomains: boolean;

        }

        namespace EventEmitter {
            class EventEmitterAsyncResource {
                constructor(...args: any[]);

                emit(...args: any[]): void;

                emitDestroy(...args: any[]): void;

                static EventEmitter: any;

                static EventEmitterAsyncResource: any;

                static captureRejectionSymbol: any;

                static captureRejections: boolean;

                static defaultMaxListeners: number;

                static errorMonitor: any;

                static getEventListeners(emitterOrTarget: any, type: any): any;

                static init(opts: any): void;

                static kMaxEventTargetListeners: any;

                static kMaxEventTargetListenersWarned: any;

                static listenerCount(emitter: any, type: any): any;

                static on(emitter: any, event: any, options: any): any;

                static once(emitter: any, name: any, options: any): any;

                static setMaxListeners(n: any, eventTargets: any): void;

                static usingDomains: boolean;

            }

        }

        namespace EventEmitterAsyncResource {
            class EventEmitter {
                constructor(opts: any);

                addListener(type: any, listener: any): any;

                emit(type: any, args: any): any;

                eventNames(): any;

                getMaxListeners(): any;

                listenerCount(type: any): any;

                listeners(type: any): any;

                off(type: any, listener: any): any;

                on(type: any, listener: any): any;

                once(type: any, listener: any): any;

                prependListener(type: any, listener: any): any;

                prependOnceListener(type: any, listener: any): any;

                rawListeners(type: any): any;

                removeAllListeners(type: any, ...args: any[]): any;

                removeListener(type: any, listener: any): any;

                setMaxListeners(n: any): any;

                static EventEmitter: any;

                static EventEmitterAsyncResource: any;

                static captureRejectionSymbol: any;

                static captureRejections: boolean;

                static defaultMaxListeners: number;

                static errorMonitor: any;

                static getEventListeners(emitterOrTarget: any, type: any): any;

                static init(opts: any): void;

                static kMaxEventTargetListeners: any;

                static kMaxEventTargetListenersWarned: any;

                static listenerCount(emitter: any, type: any): any;

                static on(emitter: any, event: any, options: any): any;

                static once(emitter: any, name: any, options: any): any;

                static setMaxListeners(n: any, eventTargets: any): void;

                static usingDomains: boolean;

            }

        }

    }

    namespace AuthPrompt {
        class EventEmitter {
            constructor(opts: any);

            addListener(type: any, listener: any): any;

            emit(type: any, args: any): any;

            eventNames(): any;

            getMaxListeners(): any;

            listenerCount(type: any): any;

            listeners(type: any): any;

            off(type: any, listener: any): any;

            on(type: any, listener: any): any;

            once(type: any, listener: any): any;

            prependListener(type: any, listener: any): any;

            prependOnceListener(type: any, listener: any): any;

            rawListeners(type: any): any;

            removeAllListeners(type: any, ...args: any[]): any;

            removeListener(type: any, listener: any): any;

            setMaxListeners(n: any): any;

            static EventEmitter: any;

            static captureRejectionSymbol: any;

            static captureRejections: boolean;

            static defaultMaxListeners: number;

            static errorMonitor: any;

            static getEventListeners(emitterOrTarget: any, type: any): any;

            static init(opts: any): void;

            static kMaxEventTargetListeners: any;

            static kMaxEventTargetListenersWarned: any;

            static listenerCount(emitter: any, type: any): any;

            static on(emitter: any, event: any, options: any): any;

            static once(emitter: any, name: any, options: any): any;

            static setMaxListeners(n: any, eventTargets: any): void;

            static usingDomains: boolean;

        }

        class EventEmitterAsyncResource {
            constructor(...args: any[]);

            emit(...args: any[]): void;

            emitDestroy(...args: any[]): void;

            static EventEmitterAsyncResource: any;

            static captureRejectionSymbol: any;

            static captureRejections: boolean;

            static defaultMaxListeners: number;

            static errorMonitor: any;

            static getEventListeners(emitterOrTarget: any, type: any): any;

            static init(opts: any): void;

            static kMaxEventTargetListeners: any;

            static kMaxEventTargetListenersWarned: any;

            static listenerCount(emitter: any, type: any): any;

            static on(emitter: any, event: any, options: any): any;

            static once(emitter: any, name: any, options: any): any;

            static setMaxListeners(n: any, eventTargets: any): void;

            static usingDomains: boolean;

        }

        namespace EventEmitter {
            class EventEmitterAsyncResource {
                constructor(...args: any[]);

                emit(...args: any[]): void;

                emitDestroy(...args: any[]): void;

                static EventEmitter: any;

                static EventEmitterAsyncResource: any;

                static captureRejectionSymbol: any;

                static captureRejections: boolean;

                static defaultMaxListeners: number;

                static errorMonitor: any;

                static getEventListeners(emitterOrTarget: any, type: any): any;

                static init(opts: any): void;

                static kMaxEventTargetListeners: any;

                static kMaxEventTargetListenersWarned: any;

                static listenerCount(emitter: any, type: any): any;

                static on(emitter: any, event: any, options: any): any;

                static once(emitter: any, name: any, options: any): any;

                static setMaxListeners(n: any, eventTargets: any): void;

                static usingDomains: boolean;

            }

        }

        namespace EventEmitterAsyncResource {
            class EventEmitter {
                constructor(opts: any);

                addListener(type: any, listener: any): any;

                emit(type: any, args: any): any;

                eventNames(): any;

                getMaxListeners(): any;

                listenerCount(type: any): any;

                listeners(type: any): any;

                off(type: any, listener: any): any;

                on(type: any, listener: any): any;

                once(type: any, listener: any): any;

                prependListener(type: any, listener: any): any;

                prependOnceListener(type: any, listener: any): any;

                rawListeners(type: any): any;

                removeAllListeners(type: any, ...args: any[]): any;

                removeListener(type: any, listener: any): any;

                setMaxListeners(n: any): any;

                static EventEmitter: any;

                static EventEmitterAsyncResource: any;

                static captureRejectionSymbol: any;

                static captureRejections: boolean;

                static defaultMaxListeners: number;

                static errorMonitor: any;

                static getEventListeners(emitterOrTarget: any, type: any): any;

                static init(opts: any): void;

                static kMaxEventTargetListeners: any;

                static kMaxEventTargetListenersWarned: any;

                static listenerCount(emitter: any, type: any): any;

                static on(emitter: any, event: any, options: any): any;

                static once(emitter: any, name: any, options: any): any;

                static setMaxListeners(n: any, eventTargets: any): void;

                static usingDomains: boolean;

            }

        }

    }

    namespace AutoComplete {
        class EventEmitter {
            constructor(opts: any);

            addListener(type: any, listener: any): any;

            emit(type: any, args: any): any;

            eventNames(): any;

            getMaxListeners(): any;

            listenerCount(type: any): any;

            listeners(type: any): any;

            off(type: any, listener: any): any;

            on(type: any, listener: any): any;

            once(type: any, listener: any): any;

            prependListener(type: any, listener: any): any;

            prependOnceListener(type: any, listener: any): any;

            rawListeners(type: any): any;

            removeAllListeners(type: any, ...args: any[]): any;

            removeListener(type: any, listener: any): any;

            setMaxListeners(n: any): any;

            static EventEmitter: any;

            static captureRejectionSymbol: any;

            static captureRejections: boolean;

            static defaultMaxListeners: number;

            static errorMonitor: any;

            static getEventListeners(emitterOrTarget: any, type: any): any;

            static init(opts: any): void;

            static kMaxEventTargetListeners: any;

            static kMaxEventTargetListenersWarned: any;

            static listenerCount(emitter: any, type: any): any;

            static on(emitter: any, event: any, options: any): any;

            static once(emitter: any, name: any, options: any): any;

            static setMaxListeners(n: any, eventTargets: any): void;

            static usingDomains: boolean;

        }

        class EventEmitterAsyncResource {
            constructor(...args: any[]);

            emit(...args: any[]): void;

            emitDestroy(...args: any[]): void;

            static EventEmitterAsyncResource: any;

            static captureRejectionSymbol: any;

            static captureRejections: boolean;

            static defaultMaxListeners: number;

            static errorMonitor: any;

            static getEventListeners(emitterOrTarget: any, type: any): any;

            static init(opts: any): void;

            static kMaxEventTargetListeners: any;

            static kMaxEventTargetListenersWarned: any;

            static listenerCount(emitter: any, type: any): any;

            static on(emitter: any, event: any, options: any): any;

            static once(emitter: any, name: any, options: any): any;

            static setMaxListeners(n: any, eventTargets: any): void;

            static usingDomains: boolean;

        }

        namespace EventEmitter {
            class EventEmitterAsyncResource {
                constructor(...args: any[]);

                emit(...args: any[]): void;

                emitDestroy(...args: any[]): void;

                static EventEmitter: any;

                static EventEmitterAsyncResource: any;

                static captureRejectionSymbol: any;

                static captureRejections: boolean;

                static defaultMaxListeners: number;

                static errorMonitor: any;

                static getEventListeners(emitterOrTarget: any, type: any): any;

                static init(opts: any): void;

                static kMaxEventTargetListeners: any;

                static kMaxEventTargetListenersWarned: any;

                static listenerCount(emitter: any, type: any): any;

                static on(emitter: any, event: any, options: any): any;

                static once(emitter: any, name: any, options: any): any;

                static setMaxListeners(n: any, eventTargets: any): void;

                static usingDomains: boolean;

            }

        }

        namespace EventEmitterAsyncResource {
            class EventEmitter {
                constructor(opts: any);

                addListener(type: any, listener: any): any;

                emit(type: any, args: any): any;

                eventNames(): any;

                getMaxListeners(): any;

                listenerCount(type: any): any;

                listeners(type: any): any;

                off(type: any, listener: any): any;

                on(type: any, listener: any): any;

                once(type: any, listener: any): any;

                prependListener(type: any, listener: any): any;

                prependOnceListener(type: any, listener: any): any;

                rawListeners(type: any): any;

                removeAllListeners(type: any, ...args: any[]): any;

                removeListener(type: any, listener: any): any;

                setMaxListeners(n: any): any;

                static EventEmitter: any;

                static EventEmitterAsyncResource: any;

                static captureRejectionSymbol: any;

                static captureRejections: boolean;

                static defaultMaxListeners: number;

                static errorMonitor: any;

                static getEventListeners(emitterOrTarget: any, type: any): any;

                static init(opts: any): void;

                static kMaxEventTargetListeners: any;

                static kMaxEventTargetListenersWarned: any;

                static listenerCount(emitter: any, type: any): any;

                static on(emitter: any, event: any, options: any): any;

                static once(emitter: any, name: any, options: any): any;

                static setMaxListeners(n: any, eventTargets: any): void;

                static usingDomains: boolean;

            }

        }

    }

    namespace BasicAuth {
        class EventEmitter {
            constructor(opts: any);

            addListener(type: any, listener: any): any;

            emit(type: any, args: any): any;

            eventNames(): any;

            getMaxListeners(): any;

            listenerCount(type: any): any;

            listeners(type: any): any;

            off(type: any, listener: any): any;

            on(type: any, listener: any): any;

            once(type: any, listener: any): any;

            prependListener(type: any, listener: any): any;

            prependOnceListener(type: any, listener: any): any;

            rawListeners(type: any): any;

            removeAllListeners(type: any, ...args: any[]): any;

            removeListener(type: any, listener: any): any;

            setMaxListeners(n: any): any;

            static EventEmitter: any;

            static captureRejectionSymbol: any;

            static captureRejections: boolean;

            static defaultMaxListeners: number;

            static errorMonitor: any;

            static getEventListeners(emitterOrTarget: any, type: any): any;

            static init(opts: any): void;

            static kMaxEventTargetListeners: any;

            static kMaxEventTargetListenersWarned: any;

            static listenerCount(emitter: any, type: any): any;

            static on(emitter: any, event: any, options: any): any;

            static once(emitter: any, name: any, options: any): any;

            static setMaxListeners(n: any, eventTargets: any): void;

            static usingDomains: boolean;

        }

        class EventEmitterAsyncResource {
            constructor(...args: any[]);

            emit(...args: any[]): void;

            emitDestroy(...args: any[]): void;

            static EventEmitterAsyncResource: any;

            static captureRejectionSymbol: any;

            static captureRejections: boolean;

            static defaultMaxListeners: number;

            static errorMonitor: any;

            static getEventListeners(emitterOrTarget: any, type: any): any;

            static init(opts: any): void;

            static kMaxEventTargetListeners: any;

            static kMaxEventTargetListenersWarned: any;

            static listenerCount(emitter: any, type: any): any;

            static on(emitter: any, event: any, options: any): any;

            static once(emitter: any, name: any, options: any): any;

            static setMaxListeners(n: any, eventTargets: any): void;

            static usingDomains: boolean;

        }

        const captureRejectionSymbol: any;

        const captureRejections: boolean;

        const defaultMaxListeners: number;

        const errorMonitor: any;

        const kMaxEventTargetListeners: any;

        const kMaxEventTargetListenersWarned: any;

        const usingDomains: boolean;

        function create(...args: any[]): void;

        function getEventListeners(emitterOrTarget: any, type: any): any;

        function init(opts: any): void;

        function listenerCount(emitter: any, type: any): any;

        function on(emitter: any, event: any, options: any): any;

        function once(emitter: any, name: any, options: any): any;

        function prompt(options: any): void;

        function setMaxListeners(n: any, eventTargets: any): void;

        namespace EventEmitter {
            class EventEmitterAsyncResource {
                constructor(...args: any[]);

                emit(...args: any[]): void;

                emitDestroy(...args: any[]): void;

                static EventEmitter: any;

                static EventEmitterAsyncResource: any;

                static captureRejectionSymbol: any;

                static captureRejections: boolean;

                static defaultMaxListeners: number;

                static errorMonitor: any;

                static getEventListeners(emitterOrTarget: any, type: any): any;

                static init(opts: any): void;

                static kMaxEventTargetListeners: any;

                static kMaxEventTargetListenersWarned: any;

                static listenerCount(emitter: any, type: any): any;

                static on(emitter: any, event: any, options: any): any;

                static once(emitter: any, name: any, options: any): any;

                static setMaxListeners(n: any, eventTargets: any): void;

                static usingDomains: boolean;

            }

        }

        namespace EventEmitterAsyncResource {
            class EventEmitter {
                constructor(opts: any);

                addListener(type: any, listener: any): any;

                emit(type: any, args: any): any;

                eventNames(): any;

                getMaxListeners(): any;

                listenerCount(type: any): any;

                listeners(type: any): any;

                off(type: any, listener: any): any;

                on(type: any, listener: any): any;

                once(type: any, listener: any): any;

                prependListener(type: any, listener: any): any;

                prependOnceListener(type: any, listener: any): any;

                rawListeners(type: any): any;

                removeAllListeners(type: any, ...args: any[]): any;

                removeListener(type: any, listener: any): any;

                setMaxListeners(n: any): any;

                static EventEmitter: any;

                static EventEmitterAsyncResource: any;

                static captureRejectionSymbol: any;

                static captureRejections: boolean;

                static defaultMaxListeners: number;

                static errorMonitor: any;

                static getEventListeners(emitterOrTarget: any, type: any): any;

                static init(opts: any): void;

                static kMaxEventTargetListeners: any;

                static kMaxEventTargetListenersWarned: any;

                static listenerCount(emitter: any, type: any): any;

                static on(emitter: any, event: any, options: any): any;

                static once(emitter: any, name: any, options: any): any;

                static setMaxListeners(n: any, eventTargets: any): void;

                static usingDomains: boolean;

            }

        }

    }

    namespace BooleanPrompt {
        class EventEmitter {
            constructor(opts: any);

            addListener(type: any, listener: any): any;

            emit(type: any, args: any): any;

            eventNames(): any;

            getMaxListeners(): any;

            listenerCount(type: any): any;

            listeners(type: any): any;

            off(type: any, listener: any): any;

            on(type: any, listener: any): any;

            once(type: any, listener: any): any;

            prependListener(type: any, listener: any): any;

            prependOnceListener(type: any, listener: any): any;

            rawListeners(type: any): any;

            removeAllListeners(type: any, ...args: any[]): any;

            removeListener(type: any, listener: any): any;

            setMaxListeners(n: any): any;

            static EventEmitter: any;

            static captureRejectionSymbol: any;

            static captureRejections: boolean;

            static defaultMaxListeners: number;

            static errorMonitor: any;

            static getEventListeners(emitterOrTarget: any, type: any): any;

            static init(opts: any): void;

            static kMaxEventTargetListeners: any;

            static kMaxEventTargetListenersWarned: any;

            static listenerCount(emitter: any, type: any): any;

            static on(emitter: any, event: any, options: any): any;

            static once(emitter: any, name: any, options: any): any;

            static setMaxListeners(n: any, eventTargets: any): void;

            static usingDomains: boolean;

        }

        class EventEmitterAsyncResource {
            constructor(...args: any[]);

            emit(...args: any[]): void;

            emitDestroy(...args: any[]): void;

            static EventEmitterAsyncResource: any;

            static captureRejectionSymbol: any;

            static captureRejections: boolean;

            static defaultMaxListeners: number;

            static errorMonitor: any;

            static getEventListeners(emitterOrTarget: any, type: any): any;

            static init(opts: any): void;

            static kMaxEventTargetListeners: any;

            static kMaxEventTargetListenersWarned: any;

            static listenerCount(emitter: any, type: any): any;

            static on(emitter: any, event: any, options: any): any;

            static once(emitter: any, name: any, options: any): any;

            static setMaxListeners(n: any, eventTargets: any): void;

            static usingDomains: boolean;

        }

        namespace EventEmitter {
            class EventEmitterAsyncResource {
                constructor(...args: any[]);

                emit(...args: any[]): void;

                emitDestroy(...args: any[]): void;

                static EventEmitter: any;

                static EventEmitterAsyncResource: any;

                static captureRejectionSymbol: any;

                static captureRejections: boolean;

                static defaultMaxListeners: number;

                static errorMonitor: any;

                static getEventListeners(emitterOrTarget: any, type: any): any;

                static init(opts: any): void;

                static kMaxEventTargetListeners: any;

                static kMaxEventTargetListenersWarned: any;

                static listenerCount(emitter: any, type: any): any;

                static on(emitter: any, event: any, options: any): any;

                static once(emitter: any, name: any, options: any): any;

                static setMaxListeners(n: any, eventTargets: any): void;

                static usingDomains: boolean;

            }

        }

        namespace EventEmitterAsyncResource {
            class EventEmitter {
                constructor(opts: any);

                addListener(type: any, listener: any): any;

                emit(type: any, args: any): any;

                eventNames(): any;

                getMaxListeners(): any;

                listenerCount(type: any): any;

                listeners(type: any): any;

                off(type: any, listener: any): any;

                on(type: any, listener: any): any;

                once(type: any, listener: any): any;

                prependListener(type: any, listener: any): any;

                prependOnceListener(type: any, listener: any): any;

                rawListeners(type: any): any;

                removeAllListeners(type: any, ...args: any[]): any;

                removeListener(type: any, listener: any): any;

                setMaxListeners(n: any): any;

                static EventEmitter: any;

                static EventEmitterAsyncResource: any;

                static captureRejectionSymbol: any;

                static captureRejections: boolean;

                static defaultMaxListeners: number;

                static errorMonitor: any;

                static getEventListeners(emitterOrTarget: any, type: any): any;

                static init(opts: any): void;

                static kMaxEventTargetListeners: any;

                static kMaxEventTargetListenersWarned: any;

                static listenerCount(emitter: any, type: any): any;

                static on(emitter: any, event: any, options: any): any;

                static once(emitter: any, name: any, options: any): any;

                static setMaxListeners(n: any, eventTargets: any): void;

                static usingDomains: boolean;

            }

        }

    }

    namespace Confirm {
        class EventEmitter {
            constructor(opts: any);

            addListener(type: any, listener: any): any;

            emit(type: any, args: any): any;

            eventNames(): any;

            getMaxListeners(): any;

            listenerCount(type: any): any;

            listeners(type: any): any;

            off(type: any, listener: any): any;

            on(type: any, listener: any): any;

            once(type: any, listener: any): any;

            prependListener(type: any, listener: any): any;

            prependOnceListener(type: any, listener: any): any;

            rawListeners(type: any): any;

            removeAllListeners(type: any, ...args: any[]): any;

            removeListener(type: any, listener: any): any;

            setMaxListeners(n: any): any;

            static EventEmitter: any;

            static captureRejectionSymbol: any;

            static captureRejections: boolean;

            static defaultMaxListeners: number;

            static errorMonitor: any;

            static getEventListeners(emitterOrTarget: any, type: any): any;

            static init(opts: any): void;

            static kMaxEventTargetListeners: any;

            static kMaxEventTargetListenersWarned: any;

            static listenerCount(emitter: any, type: any): any;

            static on(emitter: any, event: any, options: any): any;

            static once(emitter: any, name: any, options: any): any;

            static setMaxListeners(n: any, eventTargets: any): void;

            static usingDomains: boolean;

        }

        class EventEmitterAsyncResource {
            constructor(...args: any[]);

            emit(...args: any[]): void;

            emitDestroy(...args: any[]): void;

            static EventEmitterAsyncResource: any;

            static captureRejectionSymbol: any;

            static captureRejections: boolean;

            static defaultMaxListeners: number;

            static errorMonitor: any;

            static getEventListeners(emitterOrTarget: any, type: any): any;

            static init(opts: any): void;

            static kMaxEventTargetListeners: any;

            static kMaxEventTargetListenersWarned: any;

            static listenerCount(emitter: any, type: any): any;

            static on(emitter: any, event: any, options: any): any;

            static once(emitter: any, name: any, options: any): any;

            static setMaxListeners(n: any, eventTargets: any): void;

            static usingDomains: boolean;

        }

        const captureRejectionSymbol: any;

        const captureRejections: boolean;

        const defaultMaxListeners: number;

        const errorMonitor: any;

        const kMaxEventTargetListeners: any;

        const kMaxEventTargetListenersWarned: any;

        const usingDomains: boolean;

        function getEventListeners(emitterOrTarget: any, type: any): any;

        function init(opts: any): void;

        function listenerCount(emitter: any, type: any): any;

        function on(emitter: any, event: any, options: any): any;

        function once(emitter: any, name: any, options: any): any;

        function prompt(options: any): void;

        function setMaxListeners(n: any, eventTargets: any): void;

        namespace EventEmitter {
            class EventEmitterAsyncResource {
                constructor(...args: any[]);

                emit(...args: any[]): void;

                emitDestroy(...args: any[]): void;

                static EventEmitter: any;

                static EventEmitterAsyncResource: any;

                static captureRejectionSymbol: any;

                static captureRejections: boolean;

                static defaultMaxListeners: number;

                static errorMonitor: any;

                static getEventListeners(emitterOrTarget: any, type: any): any;

                static init(opts: any): void;

                static kMaxEventTargetListeners: any;

                static kMaxEventTargetListenersWarned: any;

                static listenerCount(emitter: any, type: any): any;

                static on(emitter: any, event: any, options: any): any;

                static once(emitter: any, name: any, options: any): any;

                static setMaxListeners(n: any, eventTargets: any): void;

                static usingDomains: boolean;

            }

        }

        namespace EventEmitterAsyncResource {
            class EventEmitter {
                constructor(opts: any);

                addListener(type: any, listener: any): any;

                emit(type: any, args: any): any;

                eventNames(): any;

                getMaxListeners(): any;

                listenerCount(type: any): any;

                listeners(type: any): any;

                off(type: any, listener: any): any;

                on(type: any, listener: any): any;

                once(type: any, listener: any): any;

                prependListener(type: any, listener: any): any;

                prependOnceListener(type: any, listener: any): any;

                rawListeners(type: any): any;

                removeAllListeners(type: any, ...args: any[]): any;

                removeListener(type: any, listener: any): any;

                setMaxListeners(n: any): any;

                static EventEmitter: any;

                static EventEmitterAsyncResource: any;

                static captureRejectionSymbol: any;

                static captureRejections: boolean;

                static defaultMaxListeners: number;

                static errorMonitor: any;

                static getEventListeners(emitterOrTarget: any, type: any): any;

                static init(opts: any): void;

                static kMaxEventTargetListeners: any;

                static kMaxEventTargetListenersWarned: any;

                static listenerCount(emitter: any, type: any): any;

                static on(emitter: any, event: any, options: any): any;

                static once(emitter: any, name: any, options: any): any;

                static setMaxListeners(n: any, eventTargets: any): void;

                static usingDomains: boolean;

            }

        }

    }

    namespace Editable {
        class EventEmitter {
            constructor(opts: any);

            addListener(type: any, listener: any): any;

            emit(type: any, args: any): any;

            eventNames(): any;

            getMaxListeners(): any;

            listenerCount(type: any): any;

            listeners(type: any): any;

            off(type: any, listener: any): any;

            on(type: any, listener: any): any;

            once(type: any, listener: any): any;

            prependListener(type: any, listener: any): any;

            prependOnceListener(type: any, listener: any): any;

            rawListeners(type: any): any;

            removeAllListeners(type: any, ...args: any[]): any;

            removeListener(type: any, listener: any): any;

            setMaxListeners(n: any): any;

            static EventEmitter: any;

            static captureRejectionSymbol: any;

            static captureRejections: boolean;

            static defaultMaxListeners: number;

            static errorMonitor: any;

            static getEventListeners(emitterOrTarget: any, type: any): any;

            static init(opts: any): void;

            static kMaxEventTargetListeners: any;

            static kMaxEventTargetListenersWarned: any;

            static listenerCount(emitter: any, type: any): any;

            static on(emitter: any, event: any, options: any): any;

            static once(emitter: any, name: any, options: any): any;

            static setMaxListeners(n: any, eventTargets: any): void;

            static usingDomains: boolean;

        }

        class EventEmitterAsyncResource {
            constructor(...args: any[]);

            emit(...args: any[]): void;

            emitDestroy(...args: any[]): void;

            static EventEmitterAsyncResource: any;

            static captureRejectionSymbol: any;

            static captureRejections: boolean;

            static defaultMaxListeners: number;

            static errorMonitor: any;

            static getEventListeners(emitterOrTarget: any, type: any): any;

            static init(opts: any): void;

            static kMaxEventTargetListeners: any;

            static kMaxEventTargetListenersWarned: any;

            static listenerCount(emitter: any, type: any): any;

            static on(emitter: any, event: any, options: any): any;

            static once(emitter: any, name: any, options: any): any;

            static setMaxListeners(n: any, eventTargets: any): void;

            static usingDomains: boolean;

        }

        namespace EventEmitter {
            class EventEmitterAsyncResource {
                constructor(...args: any[]);

                emit(...args: any[]): void;

                emitDestroy(...args: any[]): void;

                static EventEmitter: any;

                static EventEmitterAsyncResource: any;

                static captureRejectionSymbol: any;

                static captureRejections: boolean;

                static defaultMaxListeners: number;

                static errorMonitor: any;

                static getEventListeners(emitterOrTarget: any, type: any): any;

                static init(opts: any): void;

                static kMaxEventTargetListeners: any;

                static kMaxEventTargetListenersWarned: any;

                static listenerCount(emitter: any, type: any): any;

                static on(emitter: any, event: any, options: any): any;

                static once(emitter: any, name: any, options: any): any;

                static setMaxListeners(n: any, eventTargets: any): void;

                static usingDomains: boolean;

            }

        }

        namespace EventEmitterAsyncResource {
            class EventEmitter {
                constructor(opts: any);

                addListener(type: any, listener: any): any;

                emit(type: any, args: any): any;

                eventNames(): any;

                getMaxListeners(): any;

                listenerCount(type: any): any;

                listeners(type: any): any;

                off(type: any, listener: any): any;

                on(type: any, listener: any): any;

                once(type: any, listener: any): any;

                prependListener(type: any, listener: any): any;

                prependOnceListener(type: any, listener: any): any;

                rawListeners(type: any): any;

                removeAllListeners(type: any, ...args: any[]): any;

                removeListener(type: any, listener: any): any;

                setMaxListeners(n: any): any;

                static EventEmitter: any;

                static EventEmitterAsyncResource: any;

                static captureRejectionSymbol: any;

                static captureRejections: boolean;

                static defaultMaxListeners: number;

                static errorMonitor: any;

                static getEventListeners(emitterOrTarget: any, type: any): any;

                static init(opts: any): void;

                static kMaxEventTargetListeners: any;

                static kMaxEventTargetListenersWarned: any;

                static listenerCount(emitter: any, type: any): any;

                static on(emitter: any, event: any, options: any): any;

                static once(emitter: any, name: any, options: any): any;

                static setMaxListeners(n: any, eventTargets: any): void;

                static usingDomains: boolean;

            }

        }

    }

    namespace EventEmitter {
        class EventEmitterAsyncResource {
            constructor(...args: any[]);

            emit(...args: any[]): void;

            emitDestroy(...args: any[]): void;

            static EventEmitter: any;

            static EventEmitterAsyncResource: any;

            static captureRejectionSymbol: any;

            static captureRejections: boolean;

            static defaultMaxListeners: number;

            static errorMonitor: any;

            static getEventListeners(emitterOrTarget: any, type: any): any;

            static init(opts: any): void;

            static kMaxEventTargetListeners: any;

            static kMaxEventTargetListenersWarned: any;

            static listenerCount(emitter: any, type: any): any;

            static on(emitter: any, event: any, options: any): any;

            static once(emitter: any, name: any, options: any): any;

            static setMaxListeners(n: any, eventTargets: any): void;

            static usingDomains: boolean;

        }

    }

    namespace EventEmitterAsyncResource {
        class EventEmitter {
            constructor(opts: any);

            addListener(type: any, listener: any): any;

            emit(type: any, args: any): any;

            eventNames(): any;

            getMaxListeners(): any;

            listenerCount(type: any): any;

            listeners(type: any): any;

            off(type: any, listener: any): any;

            on(type: any, listener: any): any;

            once(type: any, listener: any): any;

            prependListener(type: any, listener: any): any;

            prependOnceListener(type: any, listener: any): any;

            rawListeners(type: any): any;

            removeAllListeners(type: any, ...args: any[]): any;

            removeListener(type: any, listener: any): any;

            setMaxListeners(n: any): any;

            static EventEmitter: any;

            static EventEmitterAsyncResource: any;

            static captureRejectionSymbol: any;

            static captureRejections: boolean;

            static defaultMaxListeners: number;

            static errorMonitor: any;

            static getEventListeners(emitterOrTarget: any, type: any): any;

            static init(opts: any): void;

            static kMaxEventTargetListeners: any;

            static kMaxEventTargetListenersWarned: any;

            static listenerCount(emitter: any, type: any): any;

            static on(emitter: any, event: any, options: any): any;

            static once(emitter: any, name: any, options: any): any;

            static setMaxListeners(n: any, eventTargets: any): void;

            static usingDomains: boolean;

        }

    }

    namespace Form {
        class EventEmitter {
            constructor(opts: any);

            addListener(type: any, listener: any): any;

            emit(type: any, args: any): any;

            eventNames(): any;

            getMaxListeners(): any;

            listenerCount(type: any): any;

            listeners(type: any): any;

            off(type: any, listener: any): any;

            on(type: any, listener: any): any;

            once(type: any, listener: any): any;

            prependListener(type: any, listener: any): any;

            prependOnceListener(type: any, listener: any): any;

            rawListeners(type: any): any;

            removeAllListeners(type: any, ...args: any[]): any;

            removeListener(type: any, listener: any): any;

            setMaxListeners(n: any): any;

            static EventEmitter: any;

            static captureRejectionSymbol: any;

            static captureRejections: boolean;

            static defaultMaxListeners: number;

            static errorMonitor: any;

            static getEventListeners(emitterOrTarget: any, type: any): any;

            static init(opts: any): void;

            static kMaxEventTargetListeners: any;

            static kMaxEventTargetListenersWarned: any;

            static listenerCount(emitter: any, type: any): any;

            static on(emitter: any, event: any, options: any): any;

            static once(emitter: any, name: any, options: any): any;

            static setMaxListeners(n: any, eventTargets: any): void;

            static usingDomains: boolean;

        }

        class EventEmitterAsyncResource {
            constructor(...args: any[]);

            emit(...args: any[]): void;

            emitDestroy(...args: any[]): void;

            static EventEmitterAsyncResource: any;

            static captureRejectionSymbol: any;

            static captureRejections: boolean;

            static defaultMaxListeners: number;

            static errorMonitor: any;

            static getEventListeners(emitterOrTarget: any, type: any): any;

            static init(opts: any): void;

            static kMaxEventTargetListeners: any;

            static kMaxEventTargetListenersWarned: any;

            static listenerCount(emitter: any, type: any): any;

            static on(emitter: any, event: any, options: any): any;

            static once(emitter: any, name: any, options: any): any;

            static setMaxListeners(n: any, eventTargets: any): void;

            static usingDomains: boolean;

        }

        namespace EventEmitter {
            class EventEmitterAsyncResource {
                constructor(...args: any[]);

                emit(...args: any[]): void;

                emitDestroy(...args: any[]): void;

                static EventEmitter: any;

                static EventEmitterAsyncResource: any;

                static captureRejectionSymbol: any;

                static captureRejections: boolean;

                static defaultMaxListeners: number;

                static errorMonitor: any;

                static getEventListeners(emitterOrTarget: any, type: any): any;

                static init(opts: any): void;

                static kMaxEventTargetListeners: any;

                static kMaxEventTargetListenersWarned: any;

                static listenerCount(emitter: any, type: any): any;

                static on(emitter: any, event: any, options: any): any;

                static once(emitter: any, name: any, options: any): any;

                static setMaxListeners(n: any, eventTargets: any): void;

                static usingDomains: boolean;

            }

        }

        namespace EventEmitterAsyncResource {
            class EventEmitter {
                constructor(opts: any);

                addListener(type: any, listener: any): any;

                emit(type: any, args: any): any;

                eventNames(): any;

                getMaxListeners(): any;

                listenerCount(type: any): any;

                listeners(type: any): any;

                off(type: any, listener: any): any;

                on(type: any, listener: any): any;

                once(type: any, listener: any): any;

                prependListener(type: any, listener: any): any;

                prependOnceListener(type: any, listener: any): any;

                rawListeners(type: any): any;

                removeAllListeners(type: any, ...args: any[]): any;

                removeListener(type: any, listener: any): any;

                setMaxListeners(n: any): any;

                static EventEmitter: any;

                static EventEmitterAsyncResource: any;

                static captureRejectionSymbol: any;

                static captureRejections: boolean;

                static defaultMaxListeners: number;

                static errorMonitor: any;

                static getEventListeners(emitterOrTarget: any, type: any): any;

                static init(opts: any): void;

                static kMaxEventTargetListeners: any;

                static kMaxEventTargetListenersWarned: any;

                static listenerCount(emitter: any, type: any): any;

                static on(emitter: any, event: any, options: any): any;

                static once(emitter: any, name: any, options: any): any;

                static setMaxListeners(n: any, eventTargets: any): void;

                static usingDomains: boolean;

            }

        }

    }

    namespace Input {
        class EventEmitter {
            constructor(opts: any);

            addListener(type: any, listener: any): any;

            emit(type: any, args: any): any;

            eventNames(): any;

            getMaxListeners(): any;

            listenerCount(type: any): any;

            listeners(type: any): any;

            off(type: any, listener: any): any;

            on(type: any, listener: any): any;

            once(type: any, listener: any): any;

            prependListener(type: any, listener: any): any;

            prependOnceListener(type: any, listener: any): any;

            rawListeners(type: any): any;

            removeAllListeners(type: any, ...args: any[]): any;

            removeListener(type: any, listener: any): any;

            setMaxListeners(n: any): any;

            static EventEmitter: any;

            static captureRejectionSymbol: any;

            static captureRejections: boolean;

            static defaultMaxListeners: number;

            static errorMonitor: any;

            static getEventListeners(emitterOrTarget: any, type: any): any;

            static init(opts: any): void;

            static kMaxEventTargetListeners: any;

            static kMaxEventTargetListenersWarned: any;

            static listenerCount(emitter: any, type: any): any;

            static on(emitter: any, event: any, options: any): any;

            static once(emitter: any, name: any, options: any): any;

            static setMaxListeners(n: any, eventTargets: any): void;

            static usingDomains: boolean;

        }

        class EventEmitterAsyncResource {
            constructor(...args: any[]);

            emit(...args: any[]): void;

            emitDestroy(...args: any[]): void;

            static EventEmitterAsyncResource: any;

            static captureRejectionSymbol: any;

            static captureRejections: boolean;

            static defaultMaxListeners: number;

            static errorMonitor: any;

            static getEventListeners(emitterOrTarget: any, type: any): any;

            static init(opts: any): void;

            static kMaxEventTargetListeners: any;

            static kMaxEventTargetListenersWarned: any;

            static listenerCount(emitter: any, type: any): any;

            static on(emitter: any, event: any, options: any): any;

            static once(emitter: any, name: any, options: any): any;

            static setMaxListeners(n: any, eventTargets: any): void;

            static usingDomains: boolean;

        }

        namespace EventEmitter {
            class EventEmitterAsyncResource {
                constructor(...args: any[]);

                emit(...args: any[]): void;

                emitDestroy(...args: any[]): void;

                static EventEmitter: any;

                static EventEmitterAsyncResource: any;

                static captureRejectionSymbol: any;

                static captureRejections: boolean;

                static defaultMaxListeners: number;

                static errorMonitor: any;

                static getEventListeners(emitterOrTarget: any, type: any): any;

                static init(opts: any): void;

                static kMaxEventTargetListeners: any;

                static kMaxEventTargetListenersWarned: any;

                static listenerCount(emitter: any, type: any): any;

                static on(emitter: any, event: any, options: any): any;

                static once(emitter: any, name: any, options: any): any;

                static setMaxListeners(n: any, eventTargets: any): void;

                static usingDomains: boolean;

            }

        }

        namespace EventEmitterAsyncResource {
            class EventEmitter {
                constructor(opts: any);

                addListener(type: any, listener: any): any;

                emit(type: any, args: any): any;

                eventNames(): any;

                getMaxListeners(): any;

                listenerCount(type: any): any;

                listeners(type: any): any;

                off(type: any, listener: any): any;

                on(type: any, listener: any): any;

                once(type: any, listener: any): any;

                prependListener(type: any, listener: any): any;

                prependOnceListener(type: any, listener: any): any;

                rawListeners(type: any): any;

                removeAllListeners(type: any, ...args: any[]): any;

                removeListener(type: any, listener: any): any;

                setMaxListeners(n: any): any;

                static EventEmitter: any;

                static EventEmitterAsyncResource: any;

                static captureRejectionSymbol: any;

                static captureRejections: boolean;

                static defaultMaxListeners: number;

                static errorMonitor: any;

                static getEventListeners(emitterOrTarget: any, type: any): any;

                static init(opts: any): void;

                static kMaxEventTargetListeners: any;

                static kMaxEventTargetListenersWarned: any;

                static listenerCount(emitter: any, type: any): any;

                static on(emitter: any, event: any, options: any): any;

                static once(emitter: any, name: any, options: any): any;

                static setMaxListeners(n: any, eventTargets: any): void;

                static usingDomains: boolean;

            }

        }

    }

    namespace Invisible {
        class EventEmitter {
            constructor(opts: any);

            addListener(type: any, listener: any): any;

            emit(type: any, args: any): any;

            eventNames(): any;

            getMaxListeners(): any;

            listenerCount(type: any): any;

            listeners(type: any): any;

            off(type: any, listener: any): any;

            on(type: any, listener: any): any;

            once(type: any, listener: any): any;

            prependListener(type: any, listener: any): any;

            prependOnceListener(type: any, listener: any): any;

            rawListeners(type: any): any;

            removeAllListeners(type: any, ...args: any[]): any;

            removeListener(type: any, listener: any): any;

            setMaxListeners(n: any): any;

            static EventEmitter: any;

            static captureRejectionSymbol: any;

            static captureRejections: boolean;

            static defaultMaxListeners: number;

            static errorMonitor: any;

            static getEventListeners(emitterOrTarget: any, type: any): any;

            static init(opts: any): void;

            static kMaxEventTargetListeners: any;

            static kMaxEventTargetListenersWarned: any;

            static listenerCount(emitter: any, type: any): any;

            static on(emitter: any, event: any, options: any): any;

            static once(emitter: any, name: any, options: any): any;

            static setMaxListeners(n: any, eventTargets: any): void;

            static usingDomains: boolean;

        }

        class EventEmitterAsyncResource {
            constructor(...args: any[]);

            emit(...args: any[]): void;

            emitDestroy(...args: any[]): void;

            static EventEmitterAsyncResource: any;

            static captureRejectionSymbol: any;

            static captureRejections: boolean;

            static defaultMaxListeners: number;

            static errorMonitor: any;

            static getEventListeners(emitterOrTarget: any, type: any): any;

            static init(opts: any): void;

            static kMaxEventTargetListeners: any;

            static kMaxEventTargetListenersWarned: any;

            static listenerCount(emitter: any, type: any): any;

            static on(emitter: any, event: any, options: any): any;

            static once(emitter: any, name: any, options: any): any;

            static setMaxListeners(n: any, eventTargets: any): void;

            static usingDomains: boolean;

        }

        namespace EventEmitter {
            class EventEmitterAsyncResource {
                constructor(...args: any[]);

                emit(...args: any[]): void;

                emitDestroy(...args: any[]): void;

                static EventEmitter: any;

                static EventEmitterAsyncResource: any;

                static captureRejectionSymbol: any;

                static captureRejections: boolean;

                static defaultMaxListeners: number;

                static errorMonitor: any;

                static getEventListeners(emitterOrTarget: any, type: any): any;

                static init(opts: any): void;

                static kMaxEventTargetListeners: any;

                static kMaxEventTargetListenersWarned: any;

                static listenerCount(emitter: any, type: any): any;

                static on(emitter: any, event: any, options: any): any;

                static once(emitter: any, name: any, options: any): any;

                static setMaxListeners(n: any, eventTargets: any): void;

                static usingDomains: boolean;

            }

        }

        namespace EventEmitterAsyncResource {
            class EventEmitter {
                constructor(opts: any);

                addListener(type: any, listener: any): any;

                emit(type: any, args: any): any;

                eventNames(): any;

                getMaxListeners(): any;

                listenerCount(type: any): any;

                listeners(type: any): any;

                off(type: any, listener: any): any;

                on(type: any, listener: any): any;

                once(type: any, listener: any): any;

                prependListener(type: any, listener: any): any;

                prependOnceListener(type: any, listener: any): any;

                rawListeners(type: any): any;

                removeAllListeners(type: any, ...args: any[]): any;

                removeListener(type: any, listener: any): any;

                setMaxListeners(n: any): any;

                static EventEmitter: any;

                static EventEmitterAsyncResource: any;

                static captureRejectionSymbol: any;

                static captureRejections: boolean;

                static defaultMaxListeners: number;

                static errorMonitor: any;

                static getEventListeners(emitterOrTarget: any, type: any): any;

                static init(opts: any): void;

                static kMaxEventTargetListeners: any;

                static kMaxEventTargetListenersWarned: any;

                static listenerCount(emitter: any, type: any): any;

                static on(emitter: any, event: any, options: any): any;

                static once(emitter: any, name: any, options: any): any;

                static setMaxListeners(n: any, eventTargets: any): void;

                static usingDomains: boolean;

            }

        }

    }

    namespace List {
        class EventEmitter {
            constructor(opts: any);

            addListener(type: any, listener: any): any;

            emit(type: any, args: any): any;

            eventNames(): any;

            getMaxListeners(): any;

            listenerCount(type: any): any;

            listeners(type: any): any;

            off(type: any, listener: any): any;

            on(type: any, listener: any): any;

            once(type: any, listener: any): any;

            prependListener(type: any, listener: any): any;

            prependOnceListener(type: any, listener: any): any;

            rawListeners(type: any): any;

            removeAllListeners(type: any, ...args: any[]): any;

            removeListener(type: any, listener: any): any;

            setMaxListeners(n: any): any;

            static EventEmitter: any;

            static captureRejectionSymbol: any;

            static captureRejections: boolean;

            static defaultMaxListeners: number;

            static errorMonitor: any;

            static getEventListeners(emitterOrTarget: any, type: any): any;

            static init(opts: any): void;

            static kMaxEventTargetListeners: any;

            static kMaxEventTargetListenersWarned: any;

            static listenerCount(emitter: any, type: any): any;

            static on(emitter: any, event: any, options: any): any;

            static once(emitter: any, name: any, options: any): any;

            static setMaxListeners(n: any, eventTargets: any): void;

            static usingDomains: boolean;

        }

        class EventEmitterAsyncResource {
            constructor(...args: any[]);

            emit(...args: any[]): void;

            emitDestroy(...args: any[]): void;

            static EventEmitterAsyncResource: any;

            static captureRejectionSymbol: any;

            static captureRejections: boolean;

            static defaultMaxListeners: number;

            static errorMonitor: any;

            static getEventListeners(emitterOrTarget: any, type: any): any;

            static init(opts: any): void;

            static kMaxEventTargetListeners: any;

            static kMaxEventTargetListenersWarned: any;

            static listenerCount(emitter: any, type: any): any;

            static on(emitter: any, event: any, options: any): any;

            static once(emitter: any, name: any, options: any): any;

            static setMaxListeners(n: any, eventTargets: any): void;

            static usingDomains: boolean;

        }

        namespace EventEmitter {
            class EventEmitterAsyncResource {
                constructor(...args: any[]);

                emit(...args: any[]): void;

                emitDestroy(...args: any[]): void;

                static EventEmitter: any;

                static EventEmitterAsyncResource: any;

                static captureRejectionSymbol: any;

                static captureRejections: boolean;

                static defaultMaxListeners: number;

                static errorMonitor: any;

                static getEventListeners(emitterOrTarget: any, type: any): any;

                static init(opts: any): void;

                static kMaxEventTargetListeners: any;

                static kMaxEventTargetListenersWarned: any;

                static listenerCount(emitter: any, type: any): any;

                static on(emitter: any, event: any, options: any): any;

                static once(emitter: any, name: any, options: any): any;

                static setMaxListeners(n: any, eventTargets: any): void;

                static usingDomains: boolean;

            }

        }

        namespace EventEmitterAsyncResource {
            class EventEmitter {
                constructor(opts: any);

                addListener(type: any, listener: any): any;

                emit(type: any, args: any): any;

                eventNames(): any;

                getMaxListeners(): any;

                listenerCount(type: any): any;

                listeners(type: any): any;

                off(type: any, listener: any): any;

                on(type: any, listener: any): any;

                once(type: any, listener: any): any;

                prependListener(type: any, listener: any): any;

                prependOnceListener(type: any, listener: any): any;

                rawListeners(type: any): any;

                removeAllListeners(type: any, ...args: any[]): any;

                removeListener(type: any, listener: any): any;

                setMaxListeners(n: any): any;

                static EventEmitter: any;

                static EventEmitterAsyncResource: any;

                static captureRejectionSymbol: any;

                static captureRejections: boolean;

                static defaultMaxListeners: number;

                static errorMonitor: any;

                static getEventListeners(emitterOrTarget: any, type: any): any;

                static init(opts: any): void;

                static kMaxEventTargetListeners: any;

                static kMaxEventTargetListenersWarned: any;

                static listenerCount(emitter: any, type: any): any;

                static on(emitter: any, event: any, options: any): any;

                static once(emitter: any, name: any, options: any): any;

                static setMaxListeners(n: any, eventTargets: any): void;

                static usingDomains: boolean;

            }

        }

    }

    namespace MultiSelect {
        class EventEmitter {
            constructor(opts: any);

            addListener(type: any, listener: any): any;

            emit(type: any, args: any): any;

            eventNames(): any;

            getMaxListeners(): any;

            listenerCount(type: any): any;

            listeners(type: any): any;

            off(type: any, listener: any): any;

            on(type: any, listener: any): any;

            once(type: any, listener: any): any;

            prependListener(type: any, listener: any): any;

            prependOnceListener(type: any, listener: any): any;

            rawListeners(type: any): any;

            removeAllListeners(type: any, ...args: any[]): any;

            removeListener(type: any, listener: any): any;

            setMaxListeners(n: any): any;

            static EventEmitter: any;

            static captureRejectionSymbol: any;

            static captureRejections: boolean;

            static defaultMaxListeners: number;

            static errorMonitor: any;

            static getEventListeners(emitterOrTarget: any, type: any): any;

            static init(opts: any): void;

            static kMaxEventTargetListeners: any;

            static kMaxEventTargetListenersWarned: any;

            static listenerCount(emitter: any, type: any): any;

            static on(emitter: any, event: any, options: any): any;

            static once(emitter: any, name: any, options: any): any;

            static setMaxListeners(n: any, eventTargets: any): void;

            static usingDomains: boolean;

        }

        class EventEmitterAsyncResource {
            constructor(...args: any[]);

            emit(...args: any[]): void;

            emitDestroy(...args: any[]): void;

            static EventEmitterAsyncResource: any;

            static captureRejectionSymbol: any;

            static captureRejections: boolean;

            static defaultMaxListeners: number;

            static errorMonitor: any;

            static getEventListeners(emitterOrTarget: any, type: any): any;

            static init(opts: any): void;

            static kMaxEventTargetListeners: any;

            static kMaxEventTargetListenersWarned: any;

            static listenerCount(emitter: any, type: any): any;

            static on(emitter: any, event: any, options: any): any;

            static once(emitter: any, name: any, options: any): any;

            static setMaxListeners(n: any, eventTargets: any): void;

            static usingDomains: boolean;

        }

        const captureRejectionSymbol: any;

        const captureRejections: boolean;

        const defaultMaxListeners: number;

        const errorMonitor: any;

        const kMaxEventTargetListeners: any;

        const kMaxEventTargetListenersWarned: any;

        const usingDomains: boolean;

        function getEventListeners(emitterOrTarget: any, type: any): any;

        function init(opts: any): void;

        function listenerCount(emitter: any, type: any): any;

        function on(emitter: any, event: any, options: any): any;

        function once(emitter: any, name: any, options: any): any;

        function prompt(options: any): void;

        function setMaxListeners(n: any, eventTargets: any): void;

        namespace EventEmitter {
            class EventEmitterAsyncResource {
                constructor(...args: any[]);

                emit(...args: any[]): void;

                emitDestroy(...args: any[]): void;

                static EventEmitter: any;

                static EventEmitterAsyncResource: any;

                static captureRejectionSymbol: any;

                static captureRejections: boolean;

                static defaultMaxListeners: number;

                static errorMonitor: any;

                static getEventListeners(emitterOrTarget: any, type: any): any;

                static init(opts: any): void;

                static kMaxEventTargetListeners: any;

                static kMaxEventTargetListenersWarned: any;

                static listenerCount(emitter: any, type: any): any;

                static on(emitter: any, event: any, options: any): any;

                static once(emitter: any, name: any, options: any): any;

                static setMaxListeners(n: any, eventTargets: any): void;

                static usingDomains: boolean;

            }

        }

        namespace EventEmitterAsyncResource {
            class EventEmitter {
                constructor(opts: any);

                addListener(type: any, listener: any): any;

                emit(type: any, args: any): any;

                eventNames(): any;

                getMaxListeners(): any;

                listenerCount(type: any): any;

                listeners(type: any): any;

                off(type: any, listener: any): any;

                on(type: any, listener: any): any;

                once(type: any, listener: any): any;

                prependListener(type: any, listener: any): any;

                prependOnceListener(type: any, listener: any): any;

                rawListeners(type: any): any;

                removeAllListeners(type: any, ...args: any[]): any;

                removeListener(type: any, listener: any): any;

                setMaxListeners(n: any): any;

                static EventEmitter: any;

                static EventEmitterAsyncResource: any;

                static captureRejectionSymbol: any;

                static captureRejections: boolean;

                static defaultMaxListeners: number;

                static errorMonitor: any;

                static getEventListeners(emitterOrTarget: any, type: any): any;

                static init(opts: any): void;

                static kMaxEventTargetListeners: any;

                static kMaxEventTargetListenersWarned: any;

                static listenerCount(emitter: any, type: any): any;

                static on(emitter: any, event: any, options: any): any;

                static once(emitter: any, name: any, options: any): any;

                static setMaxListeners(n: any, eventTargets: any): void;

                static usingDomains: boolean;

            }

        }

    }

    namespace NumberPrompt {
        class EventEmitter {
            constructor(opts: any);

            addListener(type: any, listener: any): any;

            emit(type: any, args: any): any;

            eventNames(): any;

            getMaxListeners(): any;

            listenerCount(type: any): any;

            listeners(type: any): any;

            off(type: any, listener: any): any;

            on(type: any, listener: any): any;

            once(type: any, listener: any): any;

            prependListener(type: any, listener: any): any;

            prependOnceListener(type: any, listener: any): any;

            rawListeners(type: any): any;

            removeAllListeners(type: any, ...args: any[]): any;

            removeListener(type: any, listener: any): any;

            setMaxListeners(n: any): any;

            static EventEmitter: any;

            static captureRejectionSymbol: any;

            static captureRejections: boolean;

            static defaultMaxListeners: number;

            static errorMonitor: any;

            static getEventListeners(emitterOrTarget: any, type: any): any;

            static init(opts: any): void;

            static kMaxEventTargetListeners: any;

            static kMaxEventTargetListenersWarned: any;

            static listenerCount(emitter: any, type: any): any;

            static on(emitter: any, event: any, options: any): any;

            static once(emitter: any, name: any, options: any): any;

            static setMaxListeners(n: any, eventTargets: any): void;

            static usingDomains: boolean;

        }

        class EventEmitterAsyncResource {
            constructor(...args: any[]);

            emit(...args: any[]): void;

            emitDestroy(...args: any[]): void;

            static EventEmitterAsyncResource: any;

            static captureRejectionSymbol: any;

            static captureRejections: boolean;

            static defaultMaxListeners: number;

            static errorMonitor: any;

            static getEventListeners(emitterOrTarget: any, type: any): any;

            static init(opts: any): void;

            static kMaxEventTargetListeners: any;

            static kMaxEventTargetListenersWarned: any;

            static listenerCount(emitter: any, type: any): any;

            static on(emitter: any, event: any, options: any): any;

            static once(emitter: any, name: any, options: any): any;

            static setMaxListeners(n: any, eventTargets: any): void;

            static usingDomains: boolean;

        }

        namespace EventEmitter {
            class EventEmitterAsyncResource {
                constructor(...args: any[]);

                emit(...args: any[]): void;

                emitDestroy(...args: any[]): void;

                static EventEmitter: any;

                static EventEmitterAsyncResource: any;

                static captureRejectionSymbol: any;

                static captureRejections: boolean;

                static defaultMaxListeners: number;

                static errorMonitor: any;

                static getEventListeners(emitterOrTarget: any, type: any): any;

                static init(opts: any): void;

                static kMaxEventTargetListeners: any;

                static kMaxEventTargetListenersWarned: any;

                static listenerCount(emitter: any, type: any): any;

                static on(emitter: any, event: any, options: any): any;

                static once(emitter: any, name: any, options: any): any;

                static setMaxListeners(n: any, eventTargets: any): void;

                static usingDomains: boolean;

            }

        }

        namespace EventEmitterAsyncResource {
            class EventEmitter {
                constructor(opts: any);

                addListener(type: any, listener: any): any;

                emit(type: any, args: any): any;

                eventNames(): any;

                getMaxListeners(): any;

                listenerCount(type: any): any;

                listeners(type: any): any;

                off(type: any, listener: any): any;

                on(type: any, listener: any): any;

                once(type: any, listener: any): any;

                prependListener(type: any, listener: any): any;

                prependOnceListener(type: any, listener: any): any;

                rawListeners(type: any): any;

                removeAllListeners(type: any, ...args: any[]): any;

                removeListener(type: any, listener: any): any;

                setMaxListeners(n: any): any;

                static EventEmitter: any;

                static EventEmitterAsyncResource: any;

                static captureRejectionSymbol: any;

                static captureRejections: boolean;

                static defaultMaxListeners: number;

                static errorMonitor: any;

                static getEventListeners(emitterOrTarget: any, type: any): any;

                static init(opts: any): void;

                static kMaxEventTargetListeners: any;

                static kMaxEventTargetListenersWarned: any;

                static listenerCount(emitter: any, type: any): any;

                static on(emitter: any, event: any, options: any): any;

                static once(emitter: any, name: any, options: any): any;

                static setMaxListeners(n: any, eventTargets: any): void;

                static usingDomains: boolean;

            }

        }

    }

    namespace Numeral {
        class EventEmitter {
            constructor(opts: any);

            addListener(type: any, listener: any): any;

            emit(type: any, args: any): any;

            eventNames(): any;

            getMaxListeners(): any;

            listenerCount(type: any): any;

            listeners(type: any): any;

            off(type: any, listener: any): any;

            on(type: any, listener: any): any;

            once(type: any, listener: any): any;

            prependListener(type: any, listener: any): any;

            prependOnceListener(type: any, listener: any): any;

            rawListeners(type: any): any;

            removeAllListeners(type: any, ...args: any[]): any;

            removeListener(type: any, listener: any): any;

            setMaxListeners(n: any): any;

            static EventEmitter: any;

            static captureRejectionSymbol: any;

            static captureRejections: boolean;

            static defaultMaxListeners: number;

            static errorMonitor: any;

            static getEventListeners(emitterOrTarget: any, type: any): any;

            static init(opts: any): void;

            static kMaxEventTargetListeners: any;

            static kMaxEventTargetListenersWarned: any;

            static listenerCount(emitter: any, type: any): any;

            static on(emitter: any, event: any, options: any): any;

            static once(emitter: any, name: any, options: any): any;

            static setMaxListeners(n: any, eventTargets: any): void;

            static usingDomains: boolean;

        }

        class EventEmitterAsyncResource {
            constructor(...args: any[]);

            emit(...args: any[]): void;

            emitDestroy(...args: any[]): void;

            static EventEmitterAsyncResource: any;

            static captureRejectionSymbol: any;

            static captureRejections: boolean;

            static defaultMaxListeners: number;

            static errorMonitor: any;

            static getEventListeners(emitterOrTarget: any, type: any): any;

            static init(opts: any): void;

            static kMaxEventTargetListeners: any;

            static kMaxEventTargetListenersWarned: any;

            static listenerCount(emitter: any, type: any): any;

            static on(emitter: any, event: any, options: any): any;

            static once(emitter: any, name: any, options: any): any;

            static setMaxListeners(n: any, eventTargets: any): void;

            static usingDomains: boolean;

        }

        namespace EventEmitter {
            class EventEmitterAsyncResource {
                constructor(...args: any[]);

                emit(...args: any[]): void;

                emitDestroy(...args: any[]): void;

                static EventEmitter: any;

                static EventEmitterAsyncResource: any;

                static captureRejectionSymbol: any;

                static captureRejections: boolean;

                static defaultMaxListeners: number;

                static errorMonitor: any;

                static getEventListeners(emitterOrTarget: any, type: any): any;

                static init(opts: any): void;

                static kMaxEventTargetListeners: any;

                static kMaxEventTargetListenersWarned: any;

                static listenerCount(emitter: any, type: any): any;

                static on(emitter: any, event: any, options: any): any;

                static once(emitter: any, name: any, options: any): any;

                static setMaxListeners(n: any, eventTargets: any): void;

                static usingDomains: boolean;

            }

        }

        namespace EventEmitterAsyncResource {
            class EventEmitter {
                constructor(opts: any);

                addListener(type: any, listener: any): any;

                emit(type: any, args: any): any;

                eventNames(): any;

                getMaxListeners(): any;

                listenerCount(type: any): any;

                listeners(type: any): any;

                off(type: any, listener: any): any;

                on(type: any, listener: any): any;

                once(type: any, listener: any): any;

                prependListener(type: any, listener: any): any;

                prependOnceListener(type: any, listener: any): any;

                rawListeners(type: any): any;

                removeAllListeners(type: any, ...args: any[]): any;

                removeListener(type: any, listener: any): any;

                setMaxListeners(n: any): any;

                static EventEmitter: any;

                static EventEmitterAsyncResource: any;

                static captureRejectionSymbol: any;

                static captureRejections: boolean;

                static defaultMaxListeners: number;

                static errorMonitor: any;

                static getEventListeners(emitterOrTarget: any, type: any): any;

                static init(opts: any): void;

                static kMaxEventTargetListeners: any;

                static kMaxEventTargetListenersWarned: any;

                static listenerCount(emitter: any, type: any): any;

                static on(emitter: any, event: any, options: any): any;

                static once(emitter: any, name: any, options: any): any;

                static setMaxListeners(n: any, eventTargets: any): void;

                static usingDomains: boolean;

            }

        }

    }

    namespace Password {
        class EventEmitter {
            constructor(opts: any);

            addListener(type: any, listener: any): any;

            emit(type: any, args: any): any;

            eventNames(): any;

            getMaxListeners(): any;

            listenerCount(type: any): any;

            listeners(type: any): any;

            off(type: any, listener: any): any;

            on(type: any, listener: any): any;

            once(type: any, listener: any): any;

            prependListener(type: any, listener: any): any;

            prependOnceListener(type: any, listener: any): any;

            rawListeners(type: any): any;

            removeAllListeners(type: any, ...args: any[]): any;

            removeListener(type: any, listener: any): any;

            setMaxListeners(n: any): any;

            static EventEmitter: any;

            static captureRejectionSymbol: any;

            static captureRejections: boolean;

            static defaultMaxListeners: number;

            static errorMonitor: any;

            static getEventListeners(emitterOrTarget: any, type: any): any;

            static init(opts: any): void;

            static kMaxEventTargetListeners: any;

            static kMaxEventTargetListenersWarned: any;

            static listenerCount(emitter: any, type: any): any;

            static on(emitter: any, event: any, options: any): any;

            static once(emitter: any, name: any, options: any): any;

            static setMaxListeners(n: any, eventTargets: any): void;

            static usingDomains: boolean;

        }

        class EventEmitterAsyncResource {
            constructor(...args: any[]);

            emit(...args: any[]): void;

            emitDestroy(...args: any[]): void;

            static EventEmitterAsyncResource: any;

            static captureRejectionSymbol: any;

            static captureRejections: boolean;

            static defaultMaxListeners: number;

            static errorMonitor: any;

            static getEventListeners(emitterOrTarget: any, type: any): any;

            static init(opts: any): void;

            static kMaxEventTargetListeners: any;

            static kMaxEventTargetListenersWarned: any;

            static listenerCount(emitter: any, type: any): any;

            static on(emitter: any, event: any, options: any): any;

            static once(emitter: any, name: any, options: any): any;

            static setMaxListeners(n: any, eventTargets: any): void;

            static usingDomains: boolean;

        }

        namespace EventEmitter {
            class EventEmitterAsyncResource {
                constructor(...args: any[]);

                emit(...args: any[]): void;

                emitDestroy(...args: any[]): void;

                static EventEmitter: any;

                static EventEmitterAsyncResource: any;

                static captureRejectionSymbol: any;

                static captureRejections: boolean;

                static defaultMaxListeners: number;

                static errorMonitor: any;

                static getEventListeners(emitterOrTarget: any, type: any): any;

                static init(opts: any): void;

                static kMaxEventTargetListeners: any;

                static kMaxEventTargetListenersWarned: any;

                static listenerCount(emitter: any, type: any): any;

                static on(emitter: any, event: any, options: any): any;

                static once(emitter: any, name: any, options: any): any;

                static setMaxListeners(n: any, eventTargets: any): void;

                static usingDomains: boolean;

            }

        }

        namespace EventEmitterAsyncResource {
            class EventEmitter {
                constructor(opts: any);

                addListener(type: any, listener: any): any;

                emit(type: any, args: any): any;

                eventNames(): any;

                getMaxListeners(): any;

                listenerCount(type: any): any;

                listeners(type: any): any;

                off(type: any, listener: any): any;

                on(type: any, listener: any): any;

                once(type: any, listener: any): any;

                prependListener(type: any, listener: any): any;

                prependOnceListener(type: any, listener: any): any;

                rawListeners(type: any): any;

                removeAllListeners(type: any, ...args: any[]): any;

                removeListener(type: any, listener: any): any;

                setMaxListeners(n: any): any;

                static EventEmitter: any;

                static EventEmitterAsyncResource: any;

                static captureRejectionSymbol: any;

                static captureRejections: boolean;

                static defaultMaxListeners: number;

                static errorMonitor: any;

                static getEventListeners(emitterOrTarget: any, type: any): any;

                static init(opts: any): void;

                static kMaxEventTargetListeners: any;

                static kMaxEventTargetListenersWarned: any;

                static listenerCount(emitter: any, type: any): any;

                static on(emitter: any, event: any, options: any): any;

                static once(emitter: any, name: any, options: any): any;

                static setMaxListeners(n: any, eventTargets: any): void;

                static usingDomains: boolean;

            }

        }

    }

    namespace Prompt {
        class EventEmitter {
            constructor(opts: any);

            addListener(type: any, listener: any): any;

            emit(type: any, args: any): any;

            eventNames(): any;

            getMaxListeners(): any;

            listenerCount(type: any): any;

            listeners(type: any): any;

            off(type: any, listener: any): any;

            on(type: any, listener: any): any;

            once(type: any, listener: any): any;

            prependListener(type: any, listener: any): any;

            prependOnceListener(type: any, listener: any): any;

            rawListeners(type: any): any;

            removeAllListeners(type: any, ...args: any[]): any;

            removeListener(type: any, listener: any): any;

            setMaxListeners(n: any): any;

            static EventEmitter: any;

            static captureRejectionSymbol: any;

            static captureRejections: boolean;

            static defaultMaxListeners: number;

            static errorMonitor: any;

            static getEventListeners(emitterOrTarget: any, type: any): any;

            static init(opts: any): void;

            static kMaxEventTargetListeners: any;

            static kMaxEventTargetListenersWarned: any;

            static listenerCount(emitter: any, type: any): any;

            static on(emitter: any, event: any, options: any): any;

            static once(emitter: any, name: any, options: any): any;

            static setMaxListeners(n: any, eventTargets: any): void;

            static usingDomains: boolean;

        }

        class EventEmitterAsyncResource {
            constructor(...args: any[]);

            emit(...args: any[]): void;

            emitDestroy(...args: any[]): void;

            static EventEmitterAsyncResource: any;

            static captureRejectionSymbol: any;

            static captureRejections: boolean;

            static defaultMaxListeners: number;

            static errorMonitor: any;

            static getEventListeners(emitterOrTarget: any, type: any): any;

            static init(opts: any): void;

            static kMaxEventTargetListeners: any;

            static kMaxEventTargetListenersWarned: any;

            static listenerCount(emitter: any, type: any): any;

            static on(emitter: any, event: any, options: any): any;

            static once(emitter: any, name: any, options: any): any;

            static setMaxListeners(n: any, eventTargets: any): void;

            static usingDomains: boolean;

        }

        namespace EventEmitter {
            class EventEmitterAsyncResource {
                constructor(...args: any[]);

                emit(...args: any[]): void;

                emitDestroy(...args: any[]): void;

                static EventEmitter: any;

                static EventEmitterAsyncResource: any;

                static captureRejectionSymbol: any;

                static captureRejections: boolean;

                static defaultMaxListeners: number;

                static errorMonitor: any;

                static getEventListeners(emitterOrTarget: any, type: any): any;

                static init(opts: any): void;

                static kMaxEventTargetListeners: any;

                static kMaxEventTargetListenersWarned: any;

                static listenerCount(emitter: any, type: any): any;

                static on(emitter: any, event: any, options: any): any;

                static once(emitter: any, name: any, options: any): any;

                static setMaxListeners(n: any, eventTargets: any): void;

                static usingDomains: boolean;

            }

        }

        namespace EventEmitterAsyncResource {
            class EventEmitter {
                constructor(opts: any);

                addListener(type: any, listener: any): any;

                emit(type: any, args: any): any;

                eventNames(): any;

                getMaxListeners(): any;

                listenerCount(type: any): any;

                listeners(type: any): any;

                off(type: any, listener: any): any;

                on(type: any, listener: any): any;

                once(type: any, listener: any): any;

                prependListener(type: any, listener: any): any;

                prependOnceListener(type: any, listener: any): any;

                rawListeners(type: any): any;

                removeAllListeners(type: any, ...args: any[]): any;

                removeListener(type: any, listener: any): any;

                setMaxListeners(n: any): any;

                static EventEmitter: any;

                static EventEmitterAsyncResource: any;

                static captureRejectionSymbol: any;

                static captureRejections: boolean;

                static defaultMaxListeners: number;

                static errorMonitor: any;

                static getEventListeners(emitterOrTarget: any, type: any): any;

                static init(opts: any): void;

                static kMaxEventTargetListeners: any;

                static kMaxEventTargetListenersWarned: any;

                static listenerCount(emitter: any, type: any): any;

                static on(emitter: any, event: any, options: any): any;

                static once(emitter: any, name: any, options: any): any;

                static setMaxListeners(n: any, eventTargets: any): void;

                static usingDomains: boolean;

            }

        }

    }

    namespace Quiz {
        class EventEmitter {
            constructor(opts: any);

            addListener(type: any, listener: any): any;

            emit(type: any, args: any): any;

            eventNames(): any;

            getMaxListeners(): any;

            listenerCount(type: any): any;

            listeners(type: any): any;

            off(type: any, listener: any): any;

            on(type: any, listener: any): any;

            once(type: any, listener: any): any;

            prependListener(type: any, listener: any): any;

            prependOnceListener(type: any, listener: any): any;

            rawListeners(type: any): any;

            removeAllListeners(type: any, ...args: any[]): any;

            removeListener(type: any, listener: any): any;

            setMaxListeners(n: any): any;

            static EventEmitter: any;

            static captureRejectionSymbol: any;

            static captureRejections: boolean;

            static defaultMaxListeners: number;

            static errorMonitor: any;

            static getEventListeners(emitterOrTarget: any, type: any): any;

            static init(opts: any): void;

            static kMaxEventTargetListeners: any;

            static kMaxEventTargetListenersWarned: any;

            static listenerCount(emitter: any, type: any): any;

            static on(emitter: any, event: any, options: any): any;

            static once(emitter: any, name: any, options: any): any;

            static setMaxListeners(n: any, eventTargets: any): void;

            static usingDomains: boolean;

        }

        class EventEmitterAsyncResource {
            constructor(...args: any[]);

            emit(...args: any[]): void;

            emitDestroy(...args: any[]): void;

            static EventEmitterAsyncResource: any;

            static captureRejectionSymbol: any;

            static captureRejections: boolean;

            static defaultMaxListeners: number;

            static errorMonitor: any;

            static getEventListeners(emitterOrTarget: any, type: any): any;

            static init(opts: any): void;

            static kMaxEventTargetListeners: any;

            static kMaxEventTargetListenersWarned: any;

            static listenerCount(emitter: any, type: any): any;

            static on(emitter: any, event: any, options: any): any;

            static once(emitter: any, name: any, options: any): any;

            static setMaxListeners(n: any, eventTargets: any): void;

            static usingDomains: boolean;

        }

        namespace EventEmitter {
            class EventEmitterAsyncResource {
                constructor(...args: any[]);

                emit(...args: any[]): void;

                emitDestroy(...args: any[]): void;

                static EventEmitter: any;

                static EventEmitterAsyncResource: any;

                static captureRejectionSymbol: any;

                static captureRejections: boolean;

                static defaultMaxListeners: number;

                static errorMonitor: any;

                static getEventListeners(emitterOrTarget: any, type: any): any;

                static init(opts: any): void;

                static kMaxEventTargetListeners: any;

                static kMaxEventTargetListenersWarned: any;

                static listenerCount(emitter: any, type: any): any;

                static on(emitter: any, event: any, options: any): any;

                static once(emitter: any, name: any, options: any): any;

                static setMaxListeners(n: any, eventTargets: any): void;

                static usingDomains: boolean;

            }

        }

        namespace EventEmitterAsyncResource {
            class EventEmitter {
                constructor(opts: any);

                addListener(type: any, listener: any): any;

                emit(type: any, args: any): any;

                eventNames(): any;

                getMaxListeners(): any;

                listenerCount(type: any): any;

                listeners(type: any): any;

                off(type: any, listener: any): any;

                on(type: any, listener: any): any;

                once(type: any, listener: any): any;

                prependListener(type: any, listener: any): any;

                prependOnceListener(type: any, listener: any): any;

                rawListeners(type: any): any;

                removeAllListeners(type: any, ...args: any[]): any;

                removeListener(type: any, listener: any): any;

                setMaxListeners(n: any): any;

                static EventEmitter: any;

                static EventEmitterAsyncResource: any;

                static captureRejectionSymbol: any;

                static captureRejections: boolean;

                static defaultMaxListeners: number;

                static errorMonitor: any;

                static getEventListeners(emitterOrTarget: any, type: any): any;

                static init(opts: any): void;

                static kMaxEventTargetListeners: any;

                static kMaxEventTargetListenersWarned: any;

                static listenerCount(emitter: any, type: any): any;

                static on(emitter: any, event: any, options: any): any;

                static once(emitter: any, name: any, options: any): any;

                static setMaxListeners(n: any, eventTargets: any): void;

                static usingDomains: boolean;

            }

        }

    }

    namespace Scale {
        class EventEmitter {
            constructor(opts: any);

            addListener(type: any, listener: any): any;

            emit(type: any, args: any): any;

            eventNames(): any;

            getMaxListeners(): any;

            listenerCount(type: any): any;

            listeners(type: any): any;

            off(type: any, listener: any): any;

            on(type: any, listener: any): any;

            once(type: any, listener: any): any;

            prependListener(type: any, listener: any): any;

            prependOnceListener(type: any, listener: any): any;

            rawListeners(type: any): any;

            removeAllListeners(type: any, ...args: any[]): any;

            removeListener(type: any, listener: any): any;

            setMaxListeners(n: any): any;

            static EventEmitter: any;

            static captureRejectionSymbol: any;

            static captureRejections: boolean;

            static defaultMaxListeners: number;

            static errorMonitor: any;

            static getEventListeners(emitterOrTarget: any, type: any): any;

            static init(opts: any): void;

            static kMaxEventTargetListeners: any;

            static kMaxEventTargetListenersWarned: any;

            static listenerCount(emitter: any, type: any): any;

            static on(emitter: any, event: any, options: any): any;

            static once(emitter: any, name: any, options: any): any;

            static setMaxListeners(n: any, eventTargets: any): void;

            static usingDomains: boolean;

        }

        class EventEmitterAsyncResource {
            constructor(...args: any[]);

            emit(...args: any[]): void;

            emitDestroy(...args: any[]): void;

            static EventEmitterAsyncResource: any;

            static captureRejectionSymbol: any;

            static captureRejections: boolean;

            static defaultMaxListeners: number;

            static errorMonitor: any;

            static getEventListeners(emitterOrTarget: any, type: any): any;

            static init(opts: any): void;

            static kMaxEventTargetListeners: any;

            static kMaxEventTargetListenersWarned: any;

            static listenerCount(emitter: any, type: any): any;

            static on(emitter: any, event: any, options: any): any;

            static once(emitter: any, name: any, options: any): any;

            static setMaxListeners(n: any, eventTargets: any): void;

            static usingDomains: boolean;

        }

        namespace EventEmitter {
            class EventEmitterAsyncResource {
                constructor(...args: any[]);

                emit(...args: any[]): void;

                emitDestroy(...args: any[]): void;

                static EventEmitter: any;

                static EventEmitterAsyncResource: any;

                static captureRejectionSymbol: any;

                static captureRejections: boolean;

                static defaultMaxListeners: number;

                static errorMonitor: any;

                static getEventListeners(emitterOrTarget: any, type: any): any;

                static init(opts: any): void;

                static kMaxEventTargetListeners: any;

                static kMaxEventTargetListenersWarned: any;

                static listenerCount(emitter: any, type: any): any;

                static on(emitter: any, event: any, options: any): any;

                static once(emitter: any, name: any, options: any): any;

                static setMaxListeners(n: any, eventTargets: any): void;

                static usingDomains: boolean;

            }

        }

        namespace EventEmitterAsyncResource {
            class EventEmitter {
                constructor(opts: any);

                addListener(type: any, listener: any): any;

                emit(type: any, args: any): any;

                eventNames(): any;

                getMaxListeners(): any;

                listenerCount(type: any): any;

                listeners(type: any): any;

                off(type: any, listener: any): any;

                on(type: any, listener: any): any;

                once(type: any, listener: any): any;

                prependListener(type: any, listener: any): any;

                prependOnceListener(type: any, listener: any): any;

                rawListeners(type: any): any;

                removeAllListeners(type: any, ...args: any[]): any;

                removeListener(type: any, listener: any): any;

                setMaxListeners(n: any): any;

                static EventEmitter: any;

                static EventEmitterAsyncResource: any;

                static captureRejectionSymbol: any;

                static captureRejections: boolean;

                static defaultMaxListeners: number;

                static errorMonitor: any;

                static getEventListeners(emitterOrTarget: any, type: any): any;

                static init(opts: any): void;

                static kMaxEventTargetListeners: any;

                static kMaxEventTargetListenersWarned: any;

                static listenerCount(emitter: any, type: any): any;

                static on(emitter: any, event: any, options: any): any;

                static once(emitter: any, name: any, options: any): any;

                static setMaxListeners(n: any, eventTargets: any): void;

                static usingDomains: boolean;

            }

        }

    }

    namespace Select {
        class EventEmitter {
            constructor(opts: any);

            addListener(type: any, listener: any): any;

            emit(type: any, args: any): any;

            eventNames(): any;

            getMaxListeners(): any;

            listenerCount(type: any): any;

            listeners(type: any): any;

            off(type: any, listener: any): any;

            on(type: any, listener: any): any;

            once(type: any, listener: any): any;

            prependListener(type: any, listener: any): any;

            prependOnceListener(type: any, listener: any): any;

            rawListeners(type: any): any;

            removeAllListeners(type: any, ...args: any[]): any;

            removeListener(type: any, listener: any): any;

            setMaxListeners(n: any): any;

            static EventEmitter: any;

            static captureRejectionSymbol: any;

            static captureRejections: boolean;

            static defaultMaxListeners: number;

            static errorMonitor: any;

            static getEventListeners(emitterOrTarget: any, type: any): any;

            static init(opts: any): void;

            static kMaxEventTargetListeners: any;

            static kMaxEventTargetListenersWarned: any;

            static listenerCount(emitter: any, type: any): any;

            static on(emitter: any, event: any, options: any): any;

            static once(emitter: any, name: any, options: any): any;

            static setMaxListeners(n: any, eventTargets: any): void;

            static usingDomains: boolean;

        }

        class EventEmitterAsyncResource {
            constructor(...args: any[]);

            emit(...args: any[]): void;

            emitDestroy(...args: any[]): void;

            static EventEmitterAsyncResource: any;

            static captureRejectionSymbol: any;

            static captureRejections: boolean;

            static defaultMaxListeners: number;

            static errorMonitor: any;

            static getEventListeners(emitterOrTarget: any, type: any): any;

            static init(opts: any): void;

            static kMaxEventTargetListeners: any;

            static kMaxEventTargetListenersWarned: any;

            static listenerCount(emitter: any, type: any): any;

            static on(emitter: any, event: any, options: any): any;

            static once(emitter: any, name: any, options: any): any;

            static setMaxListeners(n: any, eventTargets: any): void;

            static usingDomains: boolean;

        }

        namespace EventEmitter {
            class EventEmitterAsyncResource {
                constructor(...args: any[]);

                emit(...args: any[]): void;

                emitDestroy(...args: any[]): void;

                static EventEmitter: any;

                static EventEmitterAsyncResource: any;

                static captureRejectionSymbol: any;

                static captureRejections: boolean;

                static defaultMaxListeners: number;

                static errorMonitor: any;

                static getEventListeners(emitterOrTarget: any, type: any): any;

                static init(opts: any): void;

                static kMaxEventTargetListeners: any;

                static kMaxEventTargetListenersWarned: any;

                static listenerCount(emitter: any, type: any): any;

                static on(emitter: any, event: any, options: any): any;

                static once(emitter: any, name: any, options: any): any;

                static setMaxListeners(n: any, eventTargets: any): void;

                static usingDomains: boolean;

            }

        }

        namespace EventEmitterAsyncResource {
            class EventEmitter {
                constructor(opts: any);

                addListener(type: any, listener: any): any;

                emit(type: any, args: any): any;

                eventNames(): any;

                getMaxListeners(): any;

                listenerCount(type: any): any;

                listeners(type: any): any;

                off(type: any, listener: any): any;

                on(type: any, listener: any): any;

                once(type: any, listener: any): any;

                prependListener(type: any, listener: any): any;

                prependOnceListener(type: any, listener: any): any;

                rawListeners(type: any): any;

                removeAllListeners(type: any, ...args: any[]): any;

                removeListener(type: any, listener: any): any;

                setMaxListeners(n: any): any;

                static EventEmitter: any;

                static EventEmitterAsyncResource: any;

                static captureRejectionSymbol: any;

                static captureRejections: boolean;

                static defaultMaxListeners: number;

                static errorMonitor: any;

                static getEventListeners(emitterOrTarget: any, type: any): any;

                static init(opts: any): void;

                static kMaxEventTargetListeners: any;

                static kMaxEventTargetListenersWarned: any;

                static listenerCount(emitter: any, type: any): any;

                static on(emitter: any, event: any, options: any): any;

                static once(emitter: any, name: any, options: any): any;

                static setMaxListeners(n: any, eventTargets: any): void;

                static usingDomains: boolean;

            }

        }

    }

    namespace Snippet {
        class EventEmitter {
            constructor(opts: any);

            addListener(type: any, listener: any): any;

            emit(type: any, args: any): any;

            eventNames(): any;

            getMaxListeners(): any;

            listenerCount(type: any): any;

            listeners(type: any): any;

            off(type: any, listener: any): any;

            on(type: any, listener: any): any;

            once(type: any, listener: any): any;

            prependListener(type: any, listener: any): any;

            prependOnceListener(type: any, listener: any): any;

            rawListeners(type: any): any;

            removeAllListeners(type: any, ...args: any[]): any;

            removeListener(type: any, listener: any): any;

            setMaxListeners(n: any): any;

            static EventEmitter: any;

            static captureRejectionSymbol: any;

            static captureRejections: boolean;

            static defaultMaxListeners: number;

            static errorMonitor: any;

            static getEventListeners(emitterOrTarget: any, type: any): any;

            static init(opts: any): void;

            static kMaxEventTargetListeners: any;

            static kMaxEventTargetListenersWarned: any;

            static listenerCount(emitter: any, type: any): any;

            static on(emitter: any, event: any, options: any): any;

            static once(emitter: any, name: any, options: any): any;

            static setMaxListeners(n: any, eventTargets: any): void;

            static usingDomains: boolean;

        }

        class EventEmitterAsyncResource {
            constructor(...args: any[]);

            emit(...args: any[]): void;

            emitDestroy(...args: any[]): void;

            static EventEmitterAsyncResource: any;

            static captureRejectionSymbol: any;

            static captureRejections: boolean;

            static defaultMaxListeners: number;

            static errorMonitor: any;

            static getEventListeners(emitterOrTarget: any, type: any): any;

            static init(opts: any): void;

            static kMaxEventTargetListeners: any;

            static kMaxEventTargetListenersWarned: any;

            static listenerCount(emitter: any, type: any): any;

            static on(emitter: any, event: any, options: any): any;

            static once(emitter: any, name: any, options: any): any;

            static setMaxListeners(n: any, eventTargets: any): void;

            static usingDomains: boolean;

        }

        namespace EventEmitter {
            class EventEmitterAsyncResource {
                constructor(...args: any[]);

                emit(...args: any[]): void;

                emitDestroy(...args: any[]): void;

                static EventEmitter: any;

                static EventEmitterAsyncResource: any;

                static captureRejectionSymbol: any;

                static captureRejections: boolean;

                static defaultMaxListeners: number;

                static errorMonitor: any;

                static getEventListeners(emitterOrTarget: any, type: any): any;

                static init(opts: any): void;

                static kMaxEventTargetListeners: any;

                static kMaxEventTargetListenersWarned: any;

                static listenerCount(emitter: any, type: any): any;

                static on(emitter: any, event: any, options: any): any;

                static once(emitter: any, name: any, options: any): any;

                static setMaxListeners(n: any, eventTargets: any): void;

                static usingDomains: boolean;

            }

        }

        namespace EventEmitterAsyncResource {
            class EventEmitter {
                constructor(opts: any);

                addListener(type: any, listener: any): any;

                emit(type: any, args: any): any;

                eventNames(): any;

                getMaxListeners(): any;

                listenerCount(type: any): any;

                listeners(type: any): any;

                off(type: any, listener: any): any;

                on(type: any, listener: any): any;

                once(type: any, listener: any): any;

                prependListener(type: any, listener: any): any;

                prependOnceListener(type: any, listener: any): any;

                rawListeners(type: any): any;

                removeAllListeners(type: any, ...args: any[]): any;

                removeListener(type: any, listener: any): any;

                setMaxListeners(n: any): any;

                static EventEmitter: any;

                static EventEmitterAsyncResource: any;

                static captureRejectionSymbol: any;

                static captureRejections: boolean;

                static defaultMaxListeners: number;

                static errorMonitor: any;

                static getEventListeners(emitterOrTarget: any, type: any): any;

                static init(opts: any): void;

                static kMaxEventTargetListeners: any;

                static kMaxEventTargetListenersWarned: any;

                static listenerCount(emitter: any, type: any): any;

                static on(emitter: any, event: any, options: any): any;

                static once(emitter: any, name: any, options: any): any;

                static setMaxListeners(n: any, eventTargets: any): void;

                static usingDomains: boolean;

            }

        }

    }

    namespace Sort {
        class EventEmitter {
            constructor(opts: any);

            addListener(type: any, listener: any): any;

            emit(type: any, args: any): any;

            eventNames(): any;

            getMaxListeners(): any;

            listenerCount(type: any): any;

            listeners(type: any): any;

            off(type: any, listener: any): any;

            on(type: any, listener: any): any;

            once(type: any, listener: any): any;

            prependListener(type: any, listener: any): any;

            prependOnceListener(type: any, listener: any): any;

            rawListeners(type: any): any;

            removeAllListeners(type: any, ...args: any[]): any;

            removeListener(type: any, listener: any): any;

            setMaxListeners(n: any): any;

            static EventEmitter: any;

            static captureRejectionSymbol: any;

            static captureRejections: boolean;

            static defaultMaxListeners: number;

            static errorMonitor: any;

            static getEventListeners(emitterOrTarget: any, type: any): any;

            static init(opts: any): void;

            static kMaxEventTargetListeners: any;

            static kMaxEventTargetListenersWarned: any;

            static listenerCount(emitter: any, type: any): any;

            static on(emitter: any, event: any, options: any): any;

            static once(emitter: any, name: any, options: any): any;

            static setMaxListeners(n: any, eventTargets: any): void;

            static usingDomains: boolean;

        }

        class EventEmitterAsyncResource {
            constructor(...args: any[]);

            emit(...args: any[]): void;

            emitDestroy(...args: any[]): void;

            static EventEmitterAsyncResource: any;

            static captureRejectionSymbol: any;

            static captureRejections: boolean;

            static defaultMaxListeners: number;

            static errorMonitor: any;

            static getEventListeners(emitterOrTarget: any, type: any): any;

            static init(opts: any): void;

            static kMaxEventTargetListeners: any;

            static kMaxEventTargetListenersWarned: any;

            static listenerCount(emitter: any, type: any): any;

            static on(emitter: any, event: any, options: any): any;

            static once(emitter: any, name: any, options: any): any;

            static setMaxListeners(n: any, eventTargets: any): void;

            static usingDomains: boolean;

        }

        namespace EventEmitter {
            class EventEmitterAsyncResource {
                constructor(...args: any[]);

                emit(...args: any[]): void;

                emitDestroy(...args: any[]): void;

                static EventEmitter: any;

                static EventEmitterAsyncResource: any;

                static captureRejectionSymbol: any;

                static captureRejections: boolean;

                static defaultMaxListeners: number;

                static errorMonitor: any;

                static getEventListeners(emitterOrTarget: any, type: any): any;

                static init(opts: any): void;

                static kMaxEventTargetListeners: any;

                static kMaxEventTargetListenersWarned: any;

                static listenerCount(emitter: any, type: any): any;

                static on(emitter: any, event: any, options: any): any;

                static once(emitter: any, name: any, options: any): any;

                static setMaxListeners(n: any, eventTargets: any): void;

                static usingDomains: boolean;

            }

        }

        namespace EventEmitterAsyncResource {
            class EventEmitter {
                constructor(opts: any);

                addListener(type: any, listener: any): any;

                emit(type: any, args: any): any;

                eventNames(): any;

                getMaxListeners(): any;

                listenerCount(type: any): any;

                listeners(type: any): any;

                off(type: any, listener: any): any;

                on(type: any, listener: any): any;

                once(type: any, listener: any): any;

                prependListener(type: any, listener: any): any;

                prependOnceListener(type: any, listener: any): any;

                rawListeners(type: any): any;

                removeAllListeners(type: any, ...args: any[]): any;

                removeListener(type: any, listener: any): any;

                setMaxListeners(n: any): any;

                static EventEmitter: any;

                static EventEmitterAsyncResource: any;

                static captureRejectionSymbol: any;

                static captureRejections: boolean;

                static defaultMaxListeners: number;

                static errorMonitor: any;

                static getEventListeners(emitterOrTarget: any, type: any): any;

                static init(opts: any): void;

                static kMaxEventTargetListeners: any;

                static kMaxEventTargetListenersWarned: any;

                static listenerCount(emitter: any, type: any): any;

                static on(emitter: any, event: any, options: any): any;

                static once(emitter: any, name: any, options: any): any;

                static setMaxListeners(n: any, eventTargets: any): void;

                static usingDomains: boolean;

            }

        }

    }

    namespace StringPrompt {
        class EventEmitter {
            constructor(opts: any);

            addListener(type: any, listener: any): any;

            emit(type: any, args: any): any;

            eventNames(): any;

            getMaxListeners(): any;

            listenerCount(type: any): any;

            listeners(type: any): any;

            off(type: any, listener: any): any;

            on(type: any, listener: any): any;

            once(type: any, listener: any): any;

            prependListener(type: any, listener: any): any;

            prependOnceListener(type: any, listener: any): any;

            rawListeners(type: any): any;

            removeAllListeners(type: any, ...args: any[]): any;

            removeListener(type: any, listener: any): any;

            setMaxListeners(n: any): any;

            static EventEmitter: any;

            static captureRejectionSymbol: any;

            static captureRejections: boolean;

            static defaultMaxListeners: number;

            static errorMonitor: any;

            static getEventListeners(emitterOrTarget: any, type: any): any;

            static init(opts: any): void;

            static kMaxEventTargetListeners: any;

            static kMaxEventTargetListenersWarned: any;

            static listenerCount(emitter: any, type: any): any;

            static on(emitter: any, event: any, options: any): any;

            static once(emitter: any, name: any, options: any): any;

            static setMaxListeners(n: any, eventTargets: any): void;

            static usingDomains: boolean;

        }

        class EventEmitterAsyncResource {
            constructor(...args: any[]);

            emit(...args: any[]): void;

            emitDestroy(...args: any[]): void;

            static EventEmitterAsyncResource: any;

            static captureRejectionSymbol: any;

            static captureRejections: boolean;

            static defaultMaxListeners: number;

            static errorMonitor: any;

            static getEventListeners(emitterOrTarget: any, type: any): any;

            static init(opts: any): void;

            static kMaxEventTargetListeners: any;

            static kMaxEventTargetListenersWarned: any;

            static listenerCount(emitter: any, type: any): any;

            static on(emitter: any, event: any, options: any): any;

            static once(emitter: any, name: any, options: any): any;

            static setMaxListeners(n: any, eventTargets: any): void;

            static usingDomains: boolean;

        }

        namespace EventEmitter {
            class EventEmitterAsyncResource {
                constructor(...args: any[]);

                emit(...args: any[]): void;

                emitDestroy(...args: any[]): void;

                static EventEmitter: any;

                static EventEmitterAsyncResource: any;

                static captureRejectionSymbol: any;

                static captureRejections: boolean;

                static defaultMaxListeners: number;

                static errorMonitor: any;

                static getEventListeners(emitterOrTarget: any, type: any): any;

                static init(opts: any): void;

                static kMaxEventTargetListeners: any;

                static kMaxEventTargetListenersWarned: any;

                static listenerCount(emitter: any, type: any): any;

                static on(emitter: any, event: any, options: any): any;

                static once(emitter: any, name: any, options: any): any;

                static setMaxListeners(n: any, eventTargets: any): void;

                static usingDomains: boolean;

            }

        }

        namespace EventEmitterAsyncResource {
            class EventEmitter {
                constructor(opts: any);

                addListener(type: any, listener: any): any;

                emit(type: any, args: any): any;

                eventNames(): any;

                getMaxListeners(): any;

                listenerCount(type: any): any;

                listeners(type: any): any;

                off(type: any, listener: any): any;

                on(type: any, listener: any): any;

                once(type: any, listener: any): any;

                prependListener(type: any, listener: any): any;

                prependOnceListener(type: any, listener: any): any;

                rawListeners(type: any): any;

                removeAllListeners(type: any, ...args: any[]): any;

                removeListener(type: any, listener: any): any;

                setMaxListeners(n: any): any;

                static EventEmitter: any;

                static EventEmitterAsyncResource: any;

                static captureRejectionSymbol: any;

                static captureRejections: boolean;

                static defaultMaxListeners: number;

                static errorMonitor: any;

                static getEventListeners(emitterOrTarget: any, type: any): any;

                static init(opts: any): void;

                static kMaxEventTargetListeners: any;

                static kMaxEventTargetListenersWarned: any;

                static listenerCount(emitter: any, type: any): any;

                static on(emitter: any, event: any, options: any): any;

                static once(emitter: any, name: any, options: any): any;

                static setMaxListeners(n: any, eventTargets: any): void;

                static usingDomains: boolean;

            }

        }

    }

    namespace Survey {
        class EventEmitter {
            constructor(opts: any);

            addListener(type: any, listener: any): any;

            emit(type: any, args: any): any;

            eventNames(): any;

            getMaxListeners(): any;

            listenerCount(type: any): any;

            listeners(type: any): any;

            off(type: any, listener: any): any;

            on(type: any, listener: any): any;

            once(type: any, listener: any): any;

            prependListener(type: any, listener: any): any;

            prependOnceListener(type: any, listener: any): any;

            rawListeners(type: any): any;

            removeAllListeners(type: any, ...args: any[]): any;

            removeListener(type: any, listener: any): any;

            setMaxListeners(n: any): any;

            static EventEmitter: any;

            static captureRejectionSymbol: any;

            static captureRejections: boolean;

            static defaultMaxListeners: number;

            static errorMonitor: any;

            static getEventListeners(emitterOrTarget: any, type: any): any;

            static init(opts: any): void;

            static kMaxEventTargetListeners: any;

            static kMaxEventTargetListenersWarned: any;

            static listenerCount(emitter: any, type: any): any;

            static on(emitter: any, event: any, options: any): any;

            static once(emitter: any, name: any, options: any): any;

            static setMaxListeners(n: any, eventTargets: any): void;

            static usingDomains: boolean;

        }

        class EventEmitterAsyncResource {
            constructor(...args: any[]);

            emit(...args: any[]): void;

            emitDestroy(...args: any[]): void;

            static EventEmitterAsyncResource: any;

            static captureRejectionSymbol: any;

            static captureRejections: boolean;

            static defaultMaxListeners: number;

            static errorMonitor: any;

            static getEventListeners(emitterOrTarget: any, type: any): any;

            static init(opts: any): void;

            static kMaxEventTargetListeners: any;

            static kMaxEventTargetListenersWarned: any;

            static listenerCount(emitter: any, type: any): any;

            static on(emitter: any, event: any, options: any): any;

            static once(emitter: any, name: any, options: any): any;

            static setMaxListeners(n: any, eventTargets: any): void;

            static usingDomains: boolean;

        }

        namespace EventEmitter {
            class EventEmitterAsyncResource {
                constructor(...args: any[]);

                emit(...args: any[]): void;

                emitDestroy(...args: any[]): void;

                static EventEmitter: any;

                static EventEmitterAsyncResource: any;

                static captureRejectionSymbol: any;

                static captureRejections: boolean;

                static defaultMaxListeners: number;

                static errorMonitor: any;

                static getEventListeners(emitterOrTarget: any, type: any): any;

                static init(opts: any): void;

                static kMaxEventTargetListeners: any;

                static kMaxEventTargetListenersWarned: any;

                static listenerCount(emitter: any, type: any): any;

                static on(emitter: any, event: any, options: any): any;

                static once(emitter: any, name: any, options: any): any;

                static setMaxListeners(n: any, eventTargets: any): void;

                static usingDomains: boolean;

            }

        }

        namespace EventEmitterAsyncResource {
            class EventEmitter {
                constructor(opts: any);

                addListener(type: any, listener: any): any;

                emit(type: any, args: any): any;

                eventNames(): any;

                getMaxListeners(): any;

                listenerCount(type: any): any;

                listeners(type: any): any;

                off(type: any, listener: any): any;

                on(type: any, listener: any): any;

                once(type: any, listener: any): any;

                prependListener(type: any, listener: any): any;

                prependOnceListener(type: any, listener: any): any;

                rawListeners(type: any): any;

                removeAllListeners(type: any, ...args: any[]): any;

                removeListener(type: any, listener: any): any;

                setMaxListeners(n: any): any;

                static EventEmitter: any;

                static EventEmitterAsyncResource: any;

                static captureRejectionSymbol: any;

                static captureRejections: boolean;

                static defaultMaxListeners: number;

                static errorMonitor: any;

                static getEventListeners(emitterOrTarget: any, type: any): any;

                static init(opts: any): void;

                static kMaxEventTargetListeners: any;

                static kMaxEventTargetListenersWarned: any;

                static listenerCount(emitter: any, type: any): any;

                static on(emitter: any, event: any, options: any): any;

                static once(emitter: any, name: any, options: any): any;

                static setMaxListeners(n: any, eventTargets: any): void;

                static usingDomains: boolean;

            }

        }

    }

    namespace Text {
        class EventEmitter {
            constructor(opts: any);

            addListener(type: any, listener: any): any;

            emit(type: any, args: any): any;

            eventNames(): any;

            getMaxListeners(): any;

            listenerCount(type: any): any;

            listeners(type: any): any;

            off(type: any, listener: any): any;

            on(type: any, listener: any): any;

            once(type: any, listener: any): any;

            prependListener(type: any, listener: any): any;

            prependOnceListener(type: any, listener: any): any;

            rawListeners(type: any): any;

            removeAllListeners(type: any, ...args: any[]): any;

            removeListener(type: any, listener: any): any;

            setMaxListeners(n: any): any;

            static EventEmitter: any;

            static captureRejectionSymbol: any;

            static captureRejections: boolean;

            static defaultMaxListeners: number;

            static errorMonitor: any;

            static getEventListeners(emitterOrTarget: any, type: any): any;

            static init(opts: any): void;

            static kMaxEventTargetListeners: any;

            static kMaxEventTargetListenersWarned: any;

            static listenerCount(emitter: any, type: any): any;

            static on(emitter: any, event: any, options: any): any;

            static once(emitter: any, name: any, options: any): any;

            static setMaxListeners(n: any, eventTargets: any): void;

            static usingDomains: boolean;

        }

        class EventEmitterAsyncResource {
            constructor(...args: any[]);

            emit(...args: any[]): void;

            emitDestroy(...args: any[]): void;

            static EventEmitterAsyncResource: any;

            static captureRejectionSymbol: any;

            static captureRejections: boolean;

            static defaultMaxListeners: number;

            static errorMonitor: any;

            static getEventListeners(emitterOrTarget: any, type: any): any;

            static init(opts: any): void;

            static kMaxEventTargetListeners: any;

            static kMaxEventTargetListenersWarned: any;

            static listenerCount(emitter: any, type: any): any;

            static on(emitter: any, event: any, options: any): any;

            static once(emitter: any, name: any, options: any): any;

            static setMaxListeners(n: any, eventTargets: any): void;

            static usingDomains: boolean;

        }

        namespace EventEmitter {
            class EventEmitterAsyncResource {
                constructor(...args: any[]);

                emit(...args: any[]): void;

                emitDestroy(...args: any[]): void;

                static EventEmitter: any;

                static EventEmitterAsyncResource: any;

                static captureRejectionSymbol: any;

                static captureRejections: boolean;

                static defaultMaxListeners: number;

                static errorMonitor: any;

                static getEventListeners(emitterOrTarget: any, type: any): any;

                static init(opts: any): void;

                static kMaxEventTargetListeners: any;

                static kMaxEventTargetListenersWarned: any;

                static listenerCount(emitter: any, type: any): any;

                static on(emitter: any, event: any, options: any): any;

                static once(emitter: any, name: any, options: any): any;

                static setMaxListeners(n: any, eventTargets: any): void;

                static usingDomains: boolean;

            }

        }

        namespace EventEmitterAsyncResource {
            class EventEmitter {
                constructor(opts: any);

                addListener(type: any, listener: any): any;

                emit(type: any, args: any): any;

                eventNames(): any;

                getMaxListeners(): any;

                listenerCount(type: any): any;

                listeners(type: any): any;

                off(type: any, listener: any): any;

                on(type: any, listener: any): any;

                once(type: any, listener: any): any;

                prependListener(type: any, listener: any): any;

                prependOnceListener(type: any, listener: any): any;

                rawListeners(type: any): any;

                removeAllListeners(type: any, ...args: any[]): any;

                removeListener(type: any, listener: any): any;

                setMaxListeners(n: any): any;

                static EventEmitter: any;

                static EventEmitterAsyncResource: any;

                static captureRejectionSymbol: any;

                static captureRejections: boolean;

                static defaultMaxListeners: number;

                static errorMonitor: any;

                static getEventListeners(emitterOrTarget: any, type: any): any;

                static init(opts: any): void;

                static kMaxEventTargetListeners: any;

                static kMaxEventTargetListenersWarned: any;

                static listenerCount(emitter: any, type: any): any;

                static on(emitter: any, event: any, options: any): any;

                static once(emitter: any, name: any, options: any): any;

                static setMaxListeners(n: any, eventTargets: any): void;

                static usingDomains: boolean;

            }

        }

    }

    namespace Toggle {
        class EventEmitter {
            constructor(opts: any);

            addListener(type: any, listener: any): any;

            emit(type: any, args: any): any;

            eventNames(): any;

            getMaxListeners(): any;

            listenerCount(type: any): any;

            listeners(type: any): any;

            off(type: any, listener: any): any;

            on(type: any, listener: any): any;

            once(type: any, listener: any): any;

            prependListener(type: any, listener: any): any;

            prependOnceListener(type: any, listener: any): any;

            rawListeners(type: any): any;

            removeAllListeners(type: any, ...args: any[]): any;

            removeListener(type: any, listener: any): any;

            setMaxListeners(n: any): any;

            static EventEmitter: any;

            static captureRejectionSymbol: any;

            static captureRejections: boolean;

            static defaultMaxListeners: number;

            static errorMonitor: any;

            static getEventListeners(emitterOrTarget: any, type: any): any;

            static init(opts: any): void;

            static kMaxEventTargetListeners: any;

            static kMaxEventTargetListenersWarned: any;

            static listenerCount(emitter: any, type: any): any;

            static on(emitter: any, event: any, options: any): any;

            static once(emitter: any, name: any, options: any): any;

            static setMaxListeners(n: any, eventTargets: any): void;

            static usingDomains: boolean;

        }

        class EventEmitterAsyncResource {
            constructor(...args: any[]);

            emit(...args: any[]): void;

            emitDestroy(...args: any[]): void;

            static EventEmitterAsyncResource: any;

            static captureRejectionSymbol: any;

            static captureRejections: boolean;

            static defaultMaxListeners: number;

            static errorMonitor: any;

            static getEventListeners(emitterOrTarget: any, type: any): any;

            static init(opts: any): void;

            static kMaxEventTargetListeners: any;

            static kMaxEventTargetListenersWarned: any;

            static listenerCount(emitter: any, type: any): any;

            static on(emitter: any, event: any, options: any): any;

            static once(emitter: any, name: any, options: any): any;

            static setMaxListeners(n: any, eventTargets: any): void;

            static usingDomains: boolean;

        }

        namespace EventEmitter {
            class EventEmitterAsyncResource {
                constructor(...args: any[]);

                emit(...args: any[]): void;

                emitDestroy(...args: any[]): void;

                static EventEmitter: any;

                static EventEmitterAsyncResource: any;

                static captureRejectionSymbol: any;

                static captureRejections: boolean;

                static defaultMaxListeners: number;

                static errorMonitor: any;

                static getEventListeners(emitterOrTarget: any, type: any): any;

                static init(opts: any): void;

                static kMaxEventTargetListeners: any;

                static kMaxEventTargetListenersWarned: any;

                static listenerCount(emitter: any, type: any): any;

                static on(emitter: any, event: any, options: any): any;

                static once(emitter: any, name: any, options: any): any;

                static setMaxListeners(n: any, eventTargets: any): void;

                static usingDomains: boolean;

            }

        }

        namespace EventEmitterAsyncResource {
            class EventEmitter {
                constructor(opts: any);

                addListener(type: any, listener: any): any;

                emit(type: any, args: any): any;

                eventNames(): any;

                getMaxListeners(): any;

                listenerCount(type: any): any;

                listeners(type: any): any;

                off(type: any, listener: any): any;

                on(type: any, listener: any): any;

                once(type: any, listener: any): any;

                prependListener(type: any, listener: any): any;

                prependOnceListener(type: any, listener: any): any;

                rawListeners(type: any): any;

                removeAllListeners(type: any, ...args: any[]): any;

                removeListener(type: any, listener: any): any;

                setMaxListeners(n: any): any;

                static EventEmitter: any;

                static EventEmitterAsyncResource: any;

                static captureRejectionSymbol: any;

                static captureRejections: boolean;

                static defaultMaxListeners: number;

                static errorMonitor: any;

                static getEventListeners(emitterOrTarget: any, type: any): any;

                static init(opts: any): void;

                static kMaxEventTargetListeners: any;

                static kMaxEventTargetListenersWarned: any;

                static listenerCount(emitter: any, type: any): any;

                static on(emitter: any, event: any, options: any): any;

                static once(emitter: any, name: any, options: any): any;

                static setMaxListeners(n: any, eventTargets: any): void;

                static usingDomains: boolean;

            }

        }

    }

    namespace prompt {
        function addListener(p0: any, p1: any): any;

        function emit(p0: any): any;

        function eventNames(): any;

        function getMaxListeners(): any;

        function listenerCount(p0: any): any;

        function listeners(p0: any): any;

        function off(p0: any, p1: any): any;

        function on(p0: any, p1: any): any;

        function once(p0: any, p1: any): any;

        function prependListener(p0: any, p1: any): any;

        function prependOnceListener(p0: any, p1: any): any;

        function rawListeners(p0: any): any;

        function removeAllListeners(p0: any): any;

        function removeListener(p0: any, p1: any): any;

        function setMaxListeners(p0: any): any;

    }

    namespace prompts {
        class AutoComplete {
            constructor(...args: any[]);

            append(...args: any[]): void;

            complete(...args: any[]): void;

            delete(...args: any[]): void;

            deleteForward(...args: any[]): void;

            dispatch(...args: any[]): void;

            format(...args: any[]): void;

            moveCursor(...args: any[]): void;

            number(...args: any[]): void;

            pointer(...args: any[]): void;

            render(...args: any[]): void;

            space(...args: any[]): void;

            submit(...args: any[]): void;

            suggest(...args: any[]): void;

            static captureRejectionSymbol: any;

            static captureRejections: boolean;

            static defaultMaxListeners: number;

            static errorMonitor: any;

            static getEventListeners(emitterOrTarget: any, type: any): any;

            static init(opts: any): void;

            static kMaxEventTargetListeners: any;

            static kMaxEventTargetListenersWarned: any;

            static listenerCount(emitter: any, type: any): any;

            static on(emitter: any, event: any, options: any): any;

            static once(emitter: any, name: any, options: any): any;

            static prompt(options: any): void;

            static setMaxListeners(n: any, eventTargets: any): void;

            static usingDomains: boolean;

        }

        class Editable {
            constructor(...args: any[]);

            append(...args: any[]): void;

            delete(...args: any[]): void;

            dispatch(...args: any[]): void;

            error(...args: any[]): void;

            footer(...args: any[]): void;

            indent(...args: any[]): void;

            indicator(...args: any[]): void;

            next(...args: any[]): void;

            number(...args: any[]): void;

            prev(...args: any[]): void;

            renderChoice(...args: any[]): void;

            space(...args: any[]): void;

            submit(...args: any[]): void;

            validate(...args: any[]): void;

            static captureRejectionSymbol: any;

            static captureRejections: boolean;

            static defaultMaxListeners: number;

            static errorMonitor: any;

            static getEventListeners(emitterOrTarget: any, type: any): any;

            static init(opts: any): void;

            static kMaxEventTargetListeners: any;

            static kMaxEventTargetListenersWarned: any;

            static listenerCount(emitter: any, type: any): any;

            static on(emitter: any, event: any, options: any): any;

            static once(emitter: any, name: any, options: any): any;

            static prompt(options: any): void;

            static setMaxListeners(n: any, eventTargets: any): void;

            static usingDomains: boolean;

        }

        class Form {
            constructor(...args: any[]);

            append(...args: any[]): void;

            choiceSeparator(...args: any[]): void;

            delete(...args: any[]): void;

            deleteForward(...args: any[]): void;

            dispatch(...args: any[]): void;

            format(...args: any[]): void;

            indicator(...args: any[]): void;

            left(...args: any[]): void;

            next(...args: any[]): void;

            number(...args: any[]): void;

            pointer(...args: any[]): void;

            prev(...args: any[]): void;

            renderChoice(...args: any[]): void;

            reset(...args: any[]): void;

            right(...args: any[]): void;

            separator(...args: any[]): void;

            space(...args: any[]): void;

            submit(...args: any[]): void;

            static captureRejectionSymbol: any;

            static captureRejections: boolean;

            static defaultMaxListeners: number;

            static errorMonitor: any;

            static getEventListeners(emitterOrTarget: any, type: any): any;

            static init(opts: any): void;

            static kMaxEventTargetListeners: any;

            static kMaxEventTargetListenersWarned: any;

            static listenerCount(emitter: any, type: any): any;

            static on(emitter: any, event: any, options: any): any;

            static once(emitter: any, name: any, options: any): any;

            static prompt(options: any): void;

            static setMaxListeners(n: any, eventTargets: any): void;

            static usingDomains: boolean;

        }

        class Input {
            constructor(...args: any[]);

            altDown(...args: any[]): void;

            altUp(...args: any[]): void;

            completion(...args: any[]): void;

            prev(...args: any[]): void;

            save(...args: any[]): void;

            submit(...args: any[]): void;

            static captureRejectionSymbol: any;

            static captureRejections: boolean;

            static defaultMaxListeners: number;

            static errorMonitor: any;

            static getEventListeners(emitterOrTarget: any, type: any): any;

            static init(opts: any): void;

            static kMaxEventTargetListeners: any;

            static kMaxEventTargetListenersWarned: any;

            static listenerCount(emitter: any, type: any): any;

            static on(emitter: any, event: any, options: any): any;

            static once(emitter: any, name: any, options: any): any;

            static prompt(options: any): void;

            static setMaxListeners(n: any, eventTargets: any): void;

            static usingDomains: boolean;

        }

        class Invisible {
            constructor(...args: any[]);

            format(...args: any[]): void;

            static captureRejectionSymbol: any;

            static captureRejections: boolean;

            static defaultMaxListeners: number;

            static errorMonitor: any;

            static getEventListeners(emitterOrTarget: any, type: any): any;

            static init(opts: any): void;

            static kMaxEventTargetListeners: any;

            static kMaxEventTargetListenersWarned: any;

            static listenerCount(emitter: any, type: any): any;

            static on(emitter: any, event: any, options: any): any;

            static once(emitter: any, name: any, options: any): any;

            static prompt(options: any): void;

            static setMaxListeners(n: any, eventTargets: any): void;

            static usingDomains: boolean;

        }

        class List {
            constructor(...args: any[]);

            format(...args: any[]): void;

            split(...args: any[]): void;

            submit(...args: any[]): void;

            static captureRejectionSymbol: any;

            static captureRejections: boolean;

            static defaultMaxListeners: number;

            static errorMonitor: any;

            static getEventListeners(emitterOrTarget: any, type: any): any;

            static init(opts: any): void;

            static kMaxEventTargetListeners: any;

            static kMaxEventTargetListenersWarned: any;

            static listenerCount(emitter: any, type: any): any;

            static on(emitter: any, event: any, options: any): any;

            static once(emitter: any, name: any, options: any): any;

            static prompt(options: any): void;

            static setMaxListeners(n: any, eventTargets: any): void;

            static usingDomains: boolean;

        }

        class Numeral {
            constructor(...args: any[]);

            append(...args: any[]): void;

            down(...args: any[]): void;

            format(...args: any[]): void;

            isValue(...args: any[]): void;

            next(...args: any[]): void;

            number(...args: any[]): void;

            shiftDown(...args: any[]): void;

            shiftUp(...args: any[]): void;

            submit(...args: any[]): void;

            toNumber(...args: any[]): void;

            up(...args: any[]): void;

            static captureRejectionSymbol: any;

            static captureRejections: boolean;

            static defaultMaxListeners: number;

            static errorMonitor: any;

            static getEventListeners(emitterOrTarget: any, type: any): any;

            static init(opts: any): void;

            static kMaxEventTargetListeners: any;

            static kMaxEventTargetListenersWarned: any;

            static listenerCount(emitter: any, type: any): any;

            static on(emitter: any, event: any, options: any): any;

            static once(emitter: any, name: any, options: any): any;

            static prompt(options: any): void;

            static setMaxListeners(n: any, eventTargets: any): void;

            static usingDomains: boolean;

        }

        class Password {
            constructor(...args: any[]);

            format(...args: any[]): void;

            static captureRejectionSymbol: any;

            static captureRejections: boolean;

            static defaultMaxListeners: number;

            static errorMonitor: any;

            static getEventListeners(emitterOrTarget: any, type: any): any;

            static init(opts: any): void;

            static kMaxEventTargetListeners: any;

            static kMaxEventTargetListenersWarned: any;

            static listenerCount(emitter: any, type: any): any;

            static on(emitter: any, event: any, options: any): any;

            static once(emitter: any, name: any, options: any): any;

            static prompt(options: any): void;

            static setMaxListeners(n: any, eventTargets: any): void;

            static usingDomains: boolean;

        }

        class Quiz {
            constructor(...args: any[]);

            check(...args: any[]): void;

            result(...args: any[]): void;

            toChoices(...args: any[]): void;

            static captureRejectionSymbol: any;

            static captureRejections: boolean;

            static defaultMaxListeners: number;

            static errorMonitor: any;

            static getEventListeners(emitterOrTarget: any, type: any): any;

            static init(opts: any): void;

            static kMaxEventTargetListeners: any;

            static kMaxEventTargetListenersWarned: any;

            static listenerCount(emitter: any, type: any): any;

            static on(emitter: any, event: any, options: any): any;

            static once(emitter: any, name: any, options: any): any;

            static prompt(options: any): void;

            static setMaxListeners(n: any, eventTargets: any): void;

            static usingDomains: boolean;

        }

        class Scale {
            constructor(...args: any[]);

            dispatch(...args: any[]): void;

            format(...args: any[]): void;

            heading(...args: any[]): void;

            indent(...args: any[]): void;

            left(...args: any[]): void;

            pointer(...args: any[]): void;

            render(...args: any[]): void;

            renderChoice(...args: any[]): void;

            renderChoices(...args: any[]): void;

            renderScale(...args: any[]): void;

            renderScaleHeading(...args: any[]): void;

            renderScaleKey(...args: any[]): void;

            reset(...args: any[]): void;

            right(...args: any[]): void;

            scaleIndicator(...args: any[]): void;

            separator(...args: any[]): void;

            submit(...args: any[]): void;

            tableize(...args: any[]): void;

            static captureRejectionSymbol: any;

            static captureRejections: boolean;

            static defaultMaxListeners: number;

            static errorMonitor: any;

            static getEventListeners(emitterOrTarget: any, type: any): any;

            static init(opts: any): void;

            static kMaxEventTargetListeners: any;

            static kMaxEventTargetListenersWarned: any;

            static listenerCount(emitter: any, type: any): any;

            static on(emitter: any, event: any, options: any): any;

            static once(emitter: any, name: any, options: any): any;

            static prompt(options: any): void;

            static setMaxListeners(n: any, eventTargets: any): void;

            static usingDomains: boolean;

        }

        class Select {
            constructor(...args: any[]);

            choiceMessage(...args: any[]): void;

            choiceSeparator(...args: any[]): void;

            dispatch(...args: any[]): void;

            format(...args: any[]): void;

            indicator(...args: any[]): void;

            pointer(...args: any[]): void;

            render(...args: any[]): void;

            renderChoice(...args: any[]): void;

            renderChoices(...args: any[]): void;

            separator(...args: any[]): void;

            static captureRejectionSymbol: any;

            static captureRejections: boolean;

            static defaultMaxListeners: number;

            static errorMonitor: any;

            static getEventListeners(emitterOrTarget: any, type: any): any;

            static init(opts: any): void;

            static kMaxEventTargetListeners: any;

            static kMaxEventTargetListenersWarned: any;

            static listenerCount(emitter: any, type: any): any;

            static on(emitter: any, event: any, options: any): any;

            static once(emitter: any, name: any, options: any): any;

            static prompt(options: any): void;

            static setMaxListeners(n: any, eventTargets: any): void;

            static usingDomains: boolean;

        }

        class Snippet {
            constructor(...args: any[]);

            append(...args: any[]): void;

            decrement(...args: any[]): void;

            delete(...args: any[]): void;

            dispatch(...args: any[]): void;

            down(...args: any[]): void;

            first(...args: any[]): void;

            format(...args: any[]): void;

            getItem(...args: any[]): void;

            increment(...args: any[]): void;

            initialize(...args: any[]): void;

            last(...args: any[]): void;

            left(...args: any[]): void;

            moveCursor(...args: any[]): void;

            next(...args: any[]): void;

            prev(...args: any[]): void;

            render(...args: any[]): void;

            reset(...args: any[]): void;

            right(...args: any[]): void;

            submit(...args: any[]): void;

            up(...args: any[]): void;

            static captureRejectionSymbol: any;

            static captureRejections: boolean;

            static defaultMaxListeners: number;

            static errorMonitor: any;

            static getEventListeners(emitterOrTarget: any, type: any): any;

            static init(opts: any): void;

            static kMaxEventTargetListeners: any;

            static kMaxEventTargetListenersWarned: any;

            static listenerCount(emitter: any, type: any): any;

            static on(emitter: any, event: any, options: any): any;

            static once(emitter: any, name: any, options: any): any;

            static prompt(options: any): void;

            static setMaxListeners(n: any, eventTargets: any): void;

            static usingDomains: boolean;

        }

        class Sort {
            constructor(...args: any[]);

            indicator(...args: any[]): void;

            renderChoice(...args: any[]): void;

            submit(...args: any[]): void;

            static captureRejectionSymbol: any;

            static captureRejections: boolean;

            static defaultMaxListeners: number;

            static errorMonitor: any;

            static getEventListeners(emitterOrTarget: any, type: any): any;

            static init(opts: any): void;

            static kMaxEventTargetListeners: any;

            static kMaxEventTargetListenersWarned: any;

            static listenerCount(emitter: any, type: any): any;

            static on(emitter: any, event: any, options: any): any;

            static once(emitter: any, name: any, options: any): any;

            static prompt(options: any): void;

            static setMaxListeners(n: any, eventTargets: any): void;

            static usingDomains: boolean;

        }

        class Survey {
            constructor(...args: any[]);

            dispatch(...args: any[]): void;

            format(...args: any[]): void;

            indent(...args: any[]): void;

            indicator(...args: any[]): void;

            left(...args: any[]): void;

            pointer(...args: any[]): void;

            render(...args: any[]): void;

            renderChoice(...args: any[]): void;

            renderChoices(...args: any[]): void;

            right(...args: any[]): void;

            separator(...args: any[]): void;

            space(...args: any[]): void;

            submit(...args: any[]): void;

            toChoices(...args: any[]): void;

            static captureRejectionSymbol: any;

            static captureRejections: boolean;

            static defaultMaxListeners: number;

            static errorMonitor: any;

            static getEventListeners(emitterOrTarget: any, type: any): any;

            static init(opts: any): void;

            static kMaxEventTargetListeners: any;

            static kMaxEventTargetListenersWarned: any;

            static listenerCount(emitter: any, type: any): any;

            static on(emitter: any, event: any, options: any): any;

            static once(emitter: any, name: any, options: any): any;

            static prompt(options: any): void;

            static setMaxListeners(n: any, eventTargets: any): void;

            static usingDomains: boolean;

        }

        class Text {
            constructor(...args: any[]);

            altDown(...args: any[]): void;

            altUp(...args: any[]): void;

            completion(...args: any[]): void;

            prev(...args: any[]): void;

            save(...args: any[]): void;

            submit(...args: any[]): void;

            static captureRejectionSymbol: any;

            static captureRejections: boolean;

            static defaultMaxListeners: number;

            static errorMonitor: any;

            static getEventListeners(emitterOrTarget: any, type: any): any;

            static init(opts: any): void;

            static kMaxEventTargetListeners: any;

            static kMaxEventTargetListenersWarned: any;

            static listenerCount(emitter: any, type: any): any;

            static on(emitter: any, event: any, options: any): any;

            static once(emitter: any, name: any, options: any): any;

            static prompt(options: any): void;

            static setMaxListeners(n: any, eventTargets: any): void;

            static usingDomains: boolean;

        }

        class Toggle {
            constructor(...args: any[]);

            delete(...args: any[]): void;

            disable(...args: any[]): void;

            dispatch(...args: any[]): void;

            down(...args: any[]): void;

            enable(...args: any[]): void;

            format(...args: any[]): void;

            initialize(...args: any[]): void;

            left(...args: any[]): void;

            next(...args: any[]): void;

            prev(...args: any[]): void;

            render(...args: any[]): void;

            reset(...args: any[]): void;

            right(...args: any[]): void;

            toggle(...args: any[]): void;

            up(...args: any[]): void;

            static captureRejectionSymbol: any;

            static captureRejections: boolean;

            static defaultMaxListeners: number;

            static errorMonitor: any;

            static getEventListeners(emitterOrTarget: any, type: any): any;

            static init(opts: any): void;

            static kMaxEventTargetListeners: any;

            static kMaxEventTargetListenersWarned: any;

            static listenerCount(emitter: any, type: any): any;

            static on(emitter: any, event: any, options: any): any;

            static once(emitter: any, name: any, options: any): any;

            static prompt(options: any): void;

            static setMaxListeners(n: any, eventTargets: any): void;

            static usingDomains: boolean;

        }

        class autocomplete {
            constructor(...args: any[]);

            append(...args: any[]): void;

            complete(...args: any[]): void;

            delete(...args: any[]): void;

            deleteForward(...args: any[]): void;

            dispatch(...args: any[]): void;

            format(...args: any[]): void;

            moveCursor(...args: any[]): void;

            number(...args: any[]): void;

            pointer(...args: any[]): void;

            render(...args: any[]): void;

            space(...args: any[]): void;

            submit(...args: any[]): void;

            suggest(...args: any[]): void;

            static captureRejectionSymbol: any;

            static captureRejections: boolean;

            static defaultMaxListeners: number;

            static errorMonitor: any;

            static getEventListeners(emitterOrTarget: any, type: any): any;

            static init(opts: any): void;

            static kMaxEventTargetListeners: any;

            static kMaxEventTargetListenersWarned: any;

            static listenerCount(emitter: any, type: any): any;

            static on(emitter: any, event: any, options: any): any;

            static once(emitter: any, name: any, options: any): any;

            static prompt(options: any): void;

            static setMaxListeners(n: any, eventTargets: any): void;

            static usingDomains: boolean;

        }

        class editable {
            constructor(...args: any[]);

            append(...args: any[]): void;

            delete(...args: any[]): void;

            dispatch(...args: any[]): void;

            error(...args: any[]): void;

            footer(...args: any[]): void;

            indent(...args: any[]): void;

            indicator(...args: any[]): void;

            next(...args: any[]): void;

            number(...args: any[]): void;

            prev(...args: any[]): void;

            renderChoice(...args: any[]): void;

            space(...args: any[]): void;

            submit(...args: any[]): void;

            validate(...args: any[]): void;

            static captureRejectionSymbol: any;

            static captureRejections: boolean;

            static defaultMaxListeners: number;

            static errorMonitor: any;

            static getEventListeners(emitterOrTarget: any, type: any): any;

            static init(opts: any): void;

            static kMaxEventTargetListeners: any;

            static kMaxEventTargetListenersWarned: any;

            static listenerCount(emitter: any, type: any): any;

            static on(emitter: any, event: any, options: any): any;

            static once(emitter: any, name: any, options: any): any;

            static prompt(options: any): void;

            static setMaxListeners(n: any, eventTargets: any): void;

            static usingDomains: boolean;

        }

        class form {
            constructor(...args: any[]);

            append(...args: any[]): void;

            choiceSeparator(...args: any[]): void;

            delete(...args: any[]): void;

            deleteForward(...args: any[]): void;

            dispatch(...args: any[]): void;

            format(...args: any[]): void;

            indicator(...args: any[]): void;

            left(...args: any[]): void;

            next(...args: any[]): void;

            number(...args: any[]): void;

            pointer(...args: any[]): void;

            prev(...args: any[]): void;

            renderChoice(...args: any[]): void;

            reset(...args: any[]): void;

            right(...args: any[]): void;

            separator(...args: any[]): void;

            space(...args: any[]): void;

            submit(...args: any[]): void;

            static captureRejectionSymbol: any;

            static captureRejections: boolean;

            static defaultMaxListeners: number;

            static errorMonitor: any;

            static getEventListeners(emitterOrTarget: any, type: any): any;

            static init(opts: any): void;

            static kMaxEventTargetListeners: any;

            static kMaxEventTargetListenersWarned: any;

            static listenerCount(emitter: any, type: any): any;

            static on(emitter: any, event: any, options: any): any;

            static once(emitter: any, name: any, options: any): any;

            static prompt(options: any): void;

            static setMaxListeners(n: any, eventTargets: any): void;

            static usingDomains: boolean;

        }

        class input {
            constructor(...args: any[]);

            altDown(...args: any[]): void;

            altUp(...args: any[]): void;

            completion(...args: any[]): void;

            prev(...args: any[]): void;

            save(...args: any[]): void;

            submit(...args: any[]): void;

            static captureRejectionSymbol: any;

            static captureRejections: boolean;

            static defaultMaxListeners: number;

            static errorMonitor: any;

            static getEventListeners(emitterOrTarget: any, type: any): any;

            static init(opts: any): void;

            static kMaxEventTargetListeners: any;

            static kMaxEventTargetListenersWarned: any;

            static listenerCount(emitter: any, type: any): any;

            static on(emitter: any, event: any, options: any): any;

            static once(emitter: any, name: any, options: any): any;

            static prompt(options: any): void;

            static setMaxListeners(n: any, eventTargets: any): void;

            static usingDomains: boolean;

        }

        class invisible {
            constructor(...args: any[]);

            format(...args: any[]): void;

            static captureRejectionSymbol: any;

            static captureRejections: boolean;

            static defaultMaxListeners: number;

            static errorMonitor: any;

            static getEventListeners(emitterOrTarget: any, type: any): any;

            static init(opts: any): void;

            static kMaxEventTargetListeners: any;

            static kMaxEventTargetListenersWarned: any;

            static listenerCount(emitter: any, type: any): any;

            static on(emitter: any, event: any, options: any): any;

            static once(emitter: any, name: any, options: any): any;

            static prompt(options: any): void;

            static setMaxListeners(n: any, eventTargets: any): void;

            static usingDomains: boolean;

        }

        class list {
            constructor(...args: any[]);

            format(...args: any[]): void;

            split(...args: any[]): void;

            submit(...args: any[]): void;

            static captureRejectionSymbol: any;

            static captureRejections: boolean;

            static defaultMaxListeners: number;

            static errorMonitor: any;

            static getEventListeners(emitterOrTarget: any, type: any): any;

            static init(opts: any): void;

            static kMaxEventTargetListeners: any;

            static kMaxEventTargetListenersWarned: any;

            static listenerCount(emitter: any, type: any): any;

            static on(emitter: any, event: any, options: any): any;

            static once(emitter: any, name: any, options: any): any;

            static prompt(options: any): void;

            static setMaxListeners(n: any, eventTargets: any): void;

            static usingDomains: boolean;

        }

        class numeral {
            constructor(...args: any[]);

            append(...args: any[]): void;

            down(...args: any[]): void;

            format(...args: any[]): void;

            isValue(...args: any[]): void;

            next(...args: any[]): void;

            number(...args: any[]): void;

            shiftDown(...args: any[]): void;

            shiftUp(...args: any[]): void;

            submit(...args: any[]): void;

            toNumber(...args: any[]): void;

            up(...args: any[]): void;

            static captureRejectionSymbol: any;

            static captureRejections: boolean;

            static defaultMaxListeners: number;

            static errorMonitor: any;

            static getEventListeners(emitterOrTarget: any, type: any): any;

            static init(opts: any): void;

            static kMaxEventTargetListeners: any;

            static kMaxEventTargetListenersWarned: any;

            static listenerCount(emitter: any, type: any): any;

            static on(emitter: any, event: any, options: any): any;

            static once(emitter: any, name: any, options: any): any;

            static prompt(options: any): void;

            static setMaxListeners(n: any, eventTargets: any): void;

            static usingDomains: boolean;

        }

        class password {
            constructor(...args: any[]);

            format(...args: any[]): void;

            static captureRejectionSymbol: any;

            static captureRejections: boolean;

            static defaultMaxListeners: number;

            static errorMonitor: any;

            static getEventListeners(emitterOrTarget: any, type: any): any;

            static init(opts: any): void;

            static kMaxEventTargetListeners: any;

            static kMaxEventTargetListenersWarned: any;

            static listenerCount(emitter: any, type: any): any;

            static on(emitter: any, event: any, options: any): any;

            static once(emitter: any, name: any, options: any): any;

            static prompt(options: any): void;

            static setMaxListeners(n: any, eventTargets: any): void;

            static usingDomains: boolean;

        }

        class quiz {
            constructor(...args: any[]);

            check(...args: any[]): void;

            result(...args: any[]): void;

            toChoices(...args: any[]): void;

            static captureRejectionSymbol: any;

            static captureRejections: boolean;

            static defaultMaxListeners: number;

            static errorMonitor: any;

            static getEventListeners(emitterOrTarget: any, type: any): any;

            static init(opts: any): void;

            static kMaxEventTargetListeners: any;

            static kMaxEventTargetListenersWarned: any;

            static listenerCount(emitter: any, type: any): any;

            static on(emitter: any, event: any, options: any): any;

            static once(emitter: any, name: any, options: any): any;

            static prompt(options: any): void;

            static setMaxListeners(n: any, eventTargets: any): void;

            static usingDomains: boolean;

        }

        class scale {
            constructor(...args: any[]);

            dispatch(...args: any[]): void;

            format(...args: any[]): void;

            heading(...args: any[]): void;

            indent(...args: any[]): void;

            left(...args: any[]): void;

            pointer(...args: any[]): void;

            render(...args: any[]): void;

            renderChoice(...args: any[]): void;

            renderChoices(...args: any[]): void;

            renderScale(...args: any[]): void;

            renderScaleHeading(...args: any[]): void;

            renderScaleKey(...args: any[]): void;

            reset(...args: any[]): void;

            right(...args: any[]): void;

            scaleIndicator(...args: any[]): void;

            separator(...args: any[]): void;

            submit(...args: any[]): void;

            tableize(...args: any[]): void;

            static captureRejectionSymbol: any;

            static captureRejections: boolean;

            static defaultMaxListeners: number;

            static errorMonitor: any;

            static getEventListeners(emitterOrTarget: any, type: any): any;

            static init(opts: any): void;

            static kMaxEventTargetListeners: any;

            static kMaxEventTargetListenersWarned: any;

            static listenerCount(emitter: any, type: any): any;

            static on(emitter: any, event: any, options: any): any;

            static once(emitter: any, name: any, options: any): any;

            static prompt(options: any): void;

            static setMaxListeners(n: any, eventTargets: any): void;

            static usingDomains: boolean;

        }

        class select {
            constructor(...args: any[]);

            choiceMessage(...args: any[]): void;

            choiceSeparator(...args: any[]): void;

            dispatch(...args: any[]): void;

            format(...args: any[]): void;

            indicator(...args: any[]): void;

            pointer(...args: any[]): void;

            render(...args: any[]): void;

            renderChoice(...args: any[]): void;

            renderChoices(...args: any[]): void;

            separator(...args: any[]): void;

            static captureRejectionSymbol: any;

            static captureRejections: boolean;

            static defaultMaxListeners: number;

            static errorMonitor: any;

            static getEventListeners(emitterOrTarget: any, type: any): any;

            static init(opts: any): void;

            static kMaxEventTargetListeners: any;

            static kMaxEventTargetListenersWarned: any;

            static listenerCount(emitter: any, type: any): any;

            static on(emitter: any, event: any, options: any): any;

            static once(emitter: any, name: any, options: any): any;

            static prompt(options: any): void;

            static setMaxListeners(n: any, eventTargets: any): void;

            static usingDomains: boolean;

        }

        class snippet {
            constructor(...args: any[]);

            append(...args: any[]): void;

            decrement(...args: any[]): void;

            delete(...args: any[]): void;

            dispatch(...args: any[]): void;

            down(...args: any[]): void;

            first(...args: any[]): void;

            format(...args: any[]): void;

            getItem(...args: any[]): void;

            increment(...args: any[]): void;

            initialize(...args: any[]): void;

            last(...args: any[]): void;

            left(...args: any[]): void;

            moveCursor(...args: any[]): void;

            next(...args: any[]): void;

            prev(...args: any[]): void;

            render(...args: any[]): void;

            reset(...args: any[]): void;

            right(...args: any[]): void;

            submit(...args: any[]): void;

            up(...args: any[]): void;

            static captureRejectionSymbol: any;

            static captureRejections: boolean;

            static defaultMaxListeners: number;

            static errorMonitor: any;

            static getEventListeners(emitterOrTarget: any, type: any): any;

            static init(opts: any): void;

            static kMaxEventTargetListeners: any;

            static kMaxEventTargetListenersWarned: any;

            static listenerCount(emitter: any, type: any): any;

            static on(emitter: any, event: any, options: any): any;

            static once(emitter: any, name: any, options: any): any;

            static prompt(options: any): void;

            static setMaxListeners(n: any, eventTargets: any): void;

            static usingDomains: boolean;

        }

        class sort {
            constructor(...args: any[]);

            indicator(...args: any[]): void;

            renderChoice(...args: any[]): void;

            submit(...args: any[]): void;

            static captureRejectionSymbol: any;

            static captureRejections: boolean;

            static defaultMaxListeners: number;

            static errorMonitor: any;

            static getEventListeners(emitterOrTarget: any, type: any): any;

            static init(opts: any): void;

            static kMaxEventTargetListeners: any;

            static kMaxEventTargetListenersWarned: any;

            static listenerCount(emitter: any, type: any): any;

            static on(emitter: any, event: any, options: any): any;

            static once(emitter: any, name: any, options: any): any;

            static prompt(options: any): void;

            static setMaxListeners(n: any, eventTargets: any): void;

            static usingDomains: boolean;

        }

        class survey {
            constructor(...args: any[]);

            dispatch(...args: any[]): void;

            format(...args: any[]): void;

            indent(...args: any[]): void;

            indicator(...args: any[]): void;

            left(...args: any[]): void;

            pointer(...args: any[]): void;

            render(...args: any[]): void;

            renderChoice(...args: any[]): void;

            renderChoices(...args: any[]): void;

            right(...args: any[]): void;

            separator(...args: any[]): void;

            space(...args: any[]): void;

            submit(...args: any[]): void;

            toChoices(...args: any[]): void;

            static captureRejectionSymbol: any;

            static captureRejections: boolean;

            static defaultMaxListeners: number;

            static errorMonitor: any;

            static getEventListeners(emitterOrTarget: any, type: any): any;

            static init(opts: any): void;

            static kMaxEventTargetListeners: any;

            static kMaxEventTargetListenersWarned: any;

            static listenerCount(emitter: any, type: any): any;

            static on(emitter: any, event: any, options: any): any;

            static once(emitter: any, name: any, options: any): any;

            static prompt(options: any): void;

            static setMaxListeners(n: any, eventTargets: any): void;

            static usingDomains: boolean;

        }

        class text {
            constructor(...args: any[]);

            altDown(...args: any[]): void;

            altUp(...args: any[]): void;

            completion(...args: any[]): void;

            prev(...args: any[]): void;

            save(...args: any[]): void;

            submit(...args: any[]): void;

            static captureRejectionSymbol: any;

            static captureRejections: boolean;

            static defaultMaxListeners: number;

            static errorMonitor: any;

            static getEventListeners(emitterOrTarget: any, type: any): any;

            static init(opts: any): void;

            static kMaxEventTargetListeners: any;

            static kMaxEventTargetListenersWarned: any;

            static listenerCount(emitter: any, type: any): any;

            static on(emitter: any, event: any, options: any): any;

            static once(emitter: any, name: any, options: any): any;

            static prompt(options: any): void;

            static setMaxListeners(n: any, eventTargets: any): void;

            static usingDomains: boolean;

        }

        class toggle {
            constructor(...args: any[]);

            delete(...args: any[]): void;

            disable(...args: any[]): void;

            dispatch(...args: any[]): void;

            down(...args: any[]): void;

            enable(...args: any[]): void;

            format(...args: any[]): void;

            initialize(...args: any[]): void;

            left(...args: any[]): void;

            next(...args: any[]): void;

            prev(...args: any[]): void;

            render(...args: any[]): void;

            reset(...args: any[]): void;

            right(...args: any[]): void;

            toggle(...args: any[]): void;

            up(...args: any[]): void;

            static captureRejectionSymbol: any;

            static captureRejections: boolean;

            static defaultMaxListeners: number;

            static errorMonitor: any;

            static getEventListeners(emitterOrTarget: any, type: any): any;

            static init(opts: any): void;

            static kMaxEventTargetListeners: any;

            static kMaxEventTargetListenersWarned: any;

            static listenerCount(emitter: any, type: any): any;

            static on(emitter: any, event: any, options: any): any;

            static once(emitter: any, name: any, options: any): any;

            static prompt(options: any): void;

            static setMaxListeners(n: any, eventTargets: any): void;

            static usingDomains: boolean;

        }

        function BasicAuth(...args: any[]): any;

        function Confirm(...args: any[]): void;

        function MultiSelect(...args: any[]): void;

        function basicauth(...args: any[]): any;

        function confirm(...args: any[]): void;

        function multiselect(...args: any[]): void;

        namespace AutoComplete {
            class EventEmitter {
                constructor(opts: any);

                addListener(type: any, listener: any): any;

                emit(type: any, args: any): any;

                eventNames(): any;

                getMaxListeners(): any;

                listenerCount(type: any): any;

                listeners(type: any): any;

                off(type: any, listener: any): any;

                on(type: any, listener: any): any;

                once(type: any, listener: any): any;

                prependListener(type: any, listener: any): any;

                prependOnceListener(type: any, listener: any): any;

                rawListeners(type: any): any;

                removeAllListeners(type: any, ...args: any[]): any;

                removeListener(type: any, listener: any): any;

                setMaxListeners(n: any): any;

                static EventEmitter: any;

                static captureRejectionSymbol: any;

                static captureRejections: boolean;

                static defaultMaxListeners: number;

                static errorMonitor: any;

                static getEventListeners(emitterOrTarget: any, type: any): any;

                static init(opts: any): void;

                static kMaxEventTargetListeners: any;

                static kMaxEventTargetListenersWarned: any;

                static listenerCount(emitter: any, type: any): any;

                static on(emitter: any, event: any, options: any): any;

                static once(emitter: any, name: any, options: any): any;

                static setMaxListeners(n: any, eventTargets: any): void;

                static usingDomains: boolean;

            }

            class EventEmitterAsyncResource {
                constructor(...args: any[]);

                emit(...args: any[]): void;

                emitDestroy(...args: any[]): void;

                static EventEmitterAsyncResource: any;

                static captureRejectionSymbol: any;

                static captureRejections: boolean;

                static defaultMaxListeners: number;

                static errorMonitor: any;

                static getEventListeners(emitterOrTarget: any, type: any): any;

                static init(opts: any): void;

                static kMaxEventTargetListeners: any;

                static kMaxEventTargetListenersWarned: any;

                static listenerCount(emitter: any, type: any): any;

                static on(emitter: any, event: any, options: any): any;

                static once(emitter: any, name: any, options: any): any;

                static setMaxListeners(n: any, eventTargets: any): void;

                static usingDomains: boolean;

            }

            namespace EventEmitter {
                class EventEmitterAsyncResource {
                    constructor(...args: any[]);

                    emit(...args: any[]): void;

                    emitDestroy(...args: any[]): void;

                    static EventEmitter: any;

                    static EventEmitterAsyncResource: any;

                    static captureRejectionSymbol: any;

                    static captureRejections: any;

                    static defaultMaxListeners: any;

                    static errorMonitor: any;

                    static getEventListeners: any;

                    static init: any;

                    static kMaxEventTargetListeners: any;

                    static kMaxEventTargetListenersWarned: any;

                    static listenerCount: any;

                    static on: any;

                    static once: any;

                    static setMaxListeners: any;

                    static usingDomains: any;

                }

            }

            namespace EventEmitterAsyncResource {
                class EventEmitter {
                    constructor(opts: any);

                    addListener(type: any, listener: any): any;

                    emit(type: any, args: any): any;

                    eventNames(): any;

                    getMaxListeners(): any;

                    listenerCount(type: any): any;

                    listeners(type: any): any;

                    off(type: any, listener: any): any;

                    on(type: any, listener: any): any;

                    once(type: any, listener: any): any;

                    prependListener(type: any, listener: any): any;

                    prependOnceListener(type: any, listener: any): any;

                    rawListeners(type: any): any;

                    removeAllListeners(type: any, ...args: any[]): any;

                    removeListener(type: any, listener: any): any;

                    setMaxListeners(n: any): any;

                    static EventEmitter: any;

                    static EventEmitterAsyncResource: any;

                    static captureRejectionSymbol: any;

                    static captureRejections: any;

                    static defaultMaxListeners: any;

                    static errorMonitor: any;

                    static getEventListeners: any;

                    static init: any;

                    static kMaxEventTargetListeners: any;

                    static kMaxEventTargetListenersWarned: any;

                    static listenerCount: any;

                    static on: any;

                    static once: any;

                    static setMaxListeners: any;

                    static usingDomains: any;

                }

            }

        }

        namespace BasicAuth {
            class EventEmitter {
                constructor(opts: any);

                addListener(type: any, listener: any): any;

                emit(type: any, args: any): any;

                eventNames(): any;

                getMaxListeners(): any;

                listenerCount(type: any): any;

                listeners(type: any): any;

                off(type: any, listener: any): any;

                on(type: any, listener: any): any;

                once(type: any, listener: any): any;

                prependListener(type: any, listener: any): any;

                prependOnceListener(type: any, listener: any): any;

                rawListeners(type: any): any;

                removeAllListeners(type: any, ...args: any[]): any;

                removeListener(type: any, listener: any): any;

                setMaxListeners(n: any): any;

                static EventEmitter: any;

                static captureRejectionSymbol: any;

                static captureRejections: boolean;

                static defaultMaxListeners: number;

                static errorMonitor: any;

                static getEventListeners(emitterOrTarget: any, type: any): any;

                static init(opts: any): void;

                static kMaxEventTargetListeners: any;

                static kMaxEventTargetListenersWarned: any;

                static listenerCount(emitter: any, type: any): any;

                static on(emitter: any, event: any, options: any): any;

                static once(emitter: any, name: any, options: any): any;

                static setMaxListeners(n: any, eventTargets: any): void;

                static usingDomains: boolean;

            }

            class EventEmitterAsyncResource {
                constructor(...args: any[]);

                emit(...args: any[]): void;

                emitDestroy(...args: any[]): void;

                static EventEmitterAsyncResource: any;

                static captureRejectionSymbol: any;

                static captureRejections: boolean;

                static defaultMaxListeners: number;

                static errorMonitor: any;

                static getEventListeners(emitterOrTarget: any, type: any): any;

                static init(opts: any): void;

                static kMaxEventTargetListeners: any;

                static kMaxEventTargetListenersWarned: any;

                static listenerCount(emitter: any, type: any): any;

                static on(emitter: any, event: any, options: any): any;

                static once(emitter: any, name: any, options: any): any;

                static setMaxListeners(n: any, eventTargets: any): void;

                static usingDomains: boolean;

            }

            const captureRejectionSymbol: any;

            const captureRejections: boolean;

            const defaultMaxListeners: number;

            const errorMonitor: any;

            const kMaxEventTargetListeners: any;

            const kMaxEventTargetListenersWarned: any;

            const usingDomains: boolean;

            function create(...args: any[]): void;

            function getEventListeners(emitterOrTarget: any, type: any): any;

            function init(opts: any): void;

            function listenerCount(emitter: any, type: any): any;

            function on(emitter: any, event: any, options: any): any;

            function once(emitter: any, name: any, options: any): any;

            function prompt(options: any): void;

            function setMaxListeners(n: any, eventTargets: any): void;

            namespace EventEmitter {
                class EventEmitterAsyncResource {
                    constructor(...args: any[]);

                    emit(...args: any[]): void;

                    emitDestroy(...args: any[]): void;

                    static EventEmitter: any;

                    static EventEmitterAsyncResource: any;

                    static captureRejectionSymbol: any;

                    static captureRejections: any;

                    static defaultMaxListeners: any;

                    static errorMonitor: any;

                    static getEventListeners: any;

                    static init: any;

                    static kMaxEventTargetListeners: any;

                    static kMaxEventTargetListenersWarned: any;

                    static listenerCount: any;

                    static on: any;

                    static once: any;

                    static setMaxListeners: any;

                    static usingDomains: any;

                }

            }

            namespace EventEmitterAsyncResource {
                class EventEmitter {
                    constructor(opts: any);

                    addListener(type: any, listener: any): any;

                    emit(type: any, args: any): any;

                    eventNames(): any;

                    getMaxListeners(): any;

                    listenerCount(type: any): any;

                    listeners(type: any): any;

                    off(type: any, listener: any): any;

                    on(type: any, listener: any): any;

                    once(type: any, listener: any): any;

                    prependListener(type: any, listener: any): any;

                    prependOnceListener(type: any, listener: any): any;

                    rawListeners(type: any): any;

                    removeAllListeners(type: any, ...args: any[]): any;

                    removeListener(type: any, listener: any): any;

                    setMaxListeners(n: any): any;

                    static EventEmitter: any;

                    static EventEmitterAsyncResource: any;

                    static captureRejectionSymbol: any;

                    static captureRejections: any;

                    static defaultMaxListeners: any;

                    static errorMonitor: any;

                    static getEventListeners: any;

                    static init: any;

                    static kMaxEventTargetListeners: any;

                    static kMaxEventTargetListenersWarned: any;

                    static listenerCount: any;

                    static on: any;

                    static once: any;

                    static setMaxListeners: any;

                    static usingDomains: any;

                }

            }

        }

        namespace Confirm {
            class EventEmitter {
                constructor(opts: any);

                addListener(type: any, listener: any): any;

                emit(type: any, args: any): any;

                eventNames(): any;

                getMaxListeners(): any;

                listenerCount(type: any): any;

                listeners(type: any): any;

                off(type: any, listener: any): any;

                on(type: any, listener: any): any;

                once(type: any, listener: any): any;

                prependListener(type: any, listener: any): any;

                prependOnceListener(type: any, listener: any): any;

                rawListeners(type: any): any;

                removeAllListeners(type: any, ...args: any[]): any;

                removeListener(type: any, listener: any): any;

                setMaxListeners(n: any): any;

                static EventEmitter: any;

                static captureRejectionSymbol: any;

                static captureRejections: boolean;

                static defaultMaxListeners: number;

                static errorMonitor: any;

                static getEventListeners(emitterOrTarget: any, type: any): any;

                static init(opts: any): void;

                static kMaxEventTargetListeners: any;

                static kMaxEventTargetListenersWarned: any;

                static listenerCount(emitter: any, type: any): any;

                static on(emitter: any, event: any, options: any): any;

                static once(emitter: any, name: any, options: any): any;

                static setMaxListeners(n: any, eventTargets: any): void;

                static usingDomains: boolean;

            }

            class EventEmitterAsyncResource {
                constructor(...args: any[]);

                emit(...args: any[]): void;

                emitDestroy(...args: any[]): void;

                static EventEmitterAsyncResource: any;

                static captureRejectionSymbol: any;

                static captureRejections: boolean;

                static defaultMaxListeners: number;

                static errorMonitor: any;

                static getEventListeners(emitterOrTarget: any, type: any): any;

                static init(opts: any): void;

                static kMaxEventTargetListeners: any;

                static kMaxEventTargetListenersWarned: any;

                static listenerCount(emitter: any, type: any): any;

                static on(emitter: any, event: any, options: any): any;

                static once(emitter: any, name: any, options: any): any;

                static setMaxListeners(n: any, eventTargets: any): void;

                static usingDomains: boolean;

            }

            const captureRejectionSymbol: any;

            const captureRejections: boolean;

            const defaultMaxListeners: number;

            const errorMonitor: any;

            const kMaxEventTargetListeners: any;

            const kMaxEventTargetListenersWarned: any;

            const usingDomains: boolean;

            function getEventListeners(emitterOrTarget: any, type: any): any;

            function init(opts: any): void;

            function listenerCount(emitter: any, type: any): any;

            function on(emitter: any, event: any, options: any): any;

            function once(emitter: any, name: any, options: any): any;

            function prompt(options: any): void;

            function setMaxListeners(n: any, eventTargets: any): void;

            namespace EventEmitter {
                class EventEmitterAsyncResource {
                    constructor(...args: any[]);

                    emit(...args: any[]): void;

                    emitDestroy(...args: any[]): void;

                    static EventEmitter: any;

                    static EventEmitterAsyncResource: any;

                    static captureRejectionSymbol: any;

                    static captureRejections: any;

                    static defaultMaxListeners: any;

                    static errorMonitor: any;

                    static getEventListeners: any;

                    static init: any;

                    static kMaxEventTargetListeners: any;

                    static kMaxEventTargetListenersWarned: any;

                    static listenerCount: any;

                    static on: any;

                    static once: any;

                    static setMaxListeners: any;

                    static usingDomains: any;

                }

            }

            namespace EventEmitterAsyncResource {
                class EventEmitter {
                    constructor(opts: any);

                    addListener(type: any, listener: any): any;

                    emit(type: any, args: any): any;

                    eventNames(): any;

                    getMaxListeners(): any;

                    listenerCount(type: any): any;

                    listeners(type: any): any;

                    off(type: any, listener: any): any;

                    on(type: any, listener: any): any;

                    once(type: any, listener: any): any;

                    prependListener(type: any, listener: any): any;

                    prependOnceListener(type: any, listener: any): any;

                    rawListeners(type: any): any;

                    removeAllListeners(type: any, ...args: any[]): any;

                    removeListener(type: any, listener: any): any;

                    setMaxListeners(n: any): any;

                    static EventEmitter: any;

                    static EventEmitterAsyncResource: any;

                    static captureRejectionSymbol: any;

                    static captureRejections: any;

                    static defaultMaxListeners: any;

                    static errorMonitor: any;

                    static getEventListeners: any;

                    static init: any;

                    static kMaxEventTargetListeners: any;

                    static kMaxEventTargetListenersWarned: any;

                    static listenerCount: any;

                    static on: any;

                    static once: any;

                    static setMaxListeners: any;

                    static usingDomains: any;

                }

            }

        }

        namespace Editable {
            class EventEmitter {
                constructor(opts: any);

                addListener(type: any, listener: any): any;

                emit(type: any, args: any): any;

                eventNames(): any;

                getMaxListeners(): any;

                listenerCount(type: any): any;

                listeners(type: any): any;

                off(type: any, listener: any): any;

                on(type: any, listener: any): any;

                once(type: any, listener: any): any;

                prependListener(type: any, listener: any): any;

                prependOnceListener(type: any, listener: any): any;

                rawListeners(type: any): any;

                removeAllListeners(type: any, ...args: any[]): any;

                removeListener(type: any, listener: any): any;

                setMaxListeners(n: any): any;

                static EventEmitter: any;

                static captureRejectionSymbol: any;

                static captureRejections: boolean;

                static defaultMaxListeners: number;

                static errorMonitor: any;

                static getEventListeners(emitterOrTarget: any, type: any): any;

                static init(opts: any): void;

                static kMaxEventTargetListeners: any;

                static kMaxEventTargetListenersWarned: any;

                static listenerCount(emitter: any, type: any): any;

                static on(emitter: any, event: any, options: any): any;

                static once(emitter: any, name: any, options: any): any;

                static setMaxListeners(n: any, eventTargets: any): void;

                static usingDomains: boolean;

            }

            class EventEmitterAsyncResource {
                constructor(...args: any[]);

                emit(...args: any[]): void;

                emitDestroy(...args: any[]): void;

                static EventEmitterAsyncResource: any;

                static captureRejectionSymbol: any;

                static captureRejections: boolean;

                static defaultMaxListeners: number;

                static errorMonitor: any;

                static getEventListeners(emitterOrTarget: any, type: any): any;

                static init(opts: any): void;

                static kMaxEventTargetListeners: any;

                static kMaxEventTargetListenersWarned: any;

                static listenerCount(emitter: any, type: any): any;

                static on(emitter: any, event: any, options: any): any;

                static once(emitter: any, name: any, options: any): any;

                static setMaxListeners(n: any, eventTargets: any): void;

                static usingDomains: boolean;

            }

            namespace EventEmitter {
                class EventEmitterAsyncResource {
                    constructor(...args: any[]);

                    emit(...args: any[]): void;

                    emitDestroy(...args: any[]): void;

                    static EventEmitter: any;

                    static EventEmitterAsyncResource: any;

                    static captureRejectionSymbol: any;

                    static captureRejections: any;

                    static defaultMaxListeners: any;

                    static errorMonitor: any;

                    static getEventListeners: any;

                    static init: any;

                    static kMaxEventTargetListeners: any;

                    static kMaxEventTargetListenersWarned: any;

                    static listenerCount: any;

                    static on: any;

                    static once: any;

                    static setMaxListeners: any;

                    static usingDomains: any;

                }

            }

            namespace EventEmitterAsyncResource {
                class EventEmitter {
                    constructor(opts: any);

                    addListener(type: any, listener: any): any;

                    emit(type: any, args: any): any;

                    eventNames(): any;

                    getMaxListeners(): any;

                    listenerCount(type: any): any;

                    listeners(type: any): any;

                    off(type: any, listener: any): any;

                    on(type: any, listener: any): any;

                    once(type: any, listener: any): any;

                    prependListener(type: any, listener: any): any;

                    prependOnceListener(type: any, listener: any): any;

                    rawListeners(type: any): any;

                    removeAllListeners(type: any, ...args: any[]): any;

                    removeListener(type: any, listener: any): any;

                    setMaxListeners(n: any): any;

                    static EventEmitter: any;

                    static EventEmitterAsyncResource: any;

                    static captureRejectionSymbol: any;

                    static captureRejections: any;

                    static defaultMaxListeners: any;

                    static errorMonitor: any;

                    static getEventListeners: any;

                    static init: any;

                    static kMaxEventTargetListeners: any;

                    static kMaxEventTargetListenersWarned: any;

                    static listenerCount: any;

                    static on: any;

                    static once: any;

                    static setMaxListeners: any;

                    static usingDomains: any;

                }

            }

        }

        namespace Form {
            class EventEmitter {
                constructor(opts: any);

                addListener(type: any, listener: any): any;

                emit(type: any, args: any): any;

                eventNames(): any;

                getMaxListeners(): any;

                listenerCount(type: any): any;

                listeners(type: any): any;

                off(type: any, listener: any): any;

                on(type: any, listener: any): any;

                once(type: any, listener: any): any;

                prependListener(type: any, listener: any): any;

                prependOnceListener(type: any, listener: any): any;

                rawListeners(type: any): any;

                removeAllListeners(type: any, ...args: any[]): any;

                removeListener(type: any, listener: any): any;

                setMaxListeners(n: any): any;

                static EventEmitter: any;

                static captureRejectionSymbol: any;

                static captureRejections: boolean;

                static defaultMaxListeners: number;

                static errorMonitor: any;

                static getEventListeners(emitterOrTarget: any, type: any): any;

                static init(opts: any): void;

                static kMaxEventTargetListeners: any;

                static kMaxEventTargetListenersWarned: any;

                static listenerCount(emitter: any, type: any): any;

                static on(emitter: any, event: any, options: any): any;

                static once(emitter: any, name: any, options: any): any;

                static setMaxListeners(n: any, eventTargets: any): void;

                static usingDomains: boolean;

            }

            class EventEmitterAsyncResource {
                constructor(...args: any[]);

                emit(...args: any[]): void;

                emitDestroy(...args: any[]): void;

                static EventEmitterAsyncResource: any;

                static captureRejectionSymbol: any;

                static captureRejections: boolean;

                static defaultMaxListeners: number;

                static errorMonitor: any;

                static getEventListeners(emitterOrTarget: any, type: any): any;

                static init(opts: any): void;

                static kMaxEventTargetListeners: any;

                static kMaxEventTargetListenersWarned: any;

                static listenerCount(emitter: any, type: any): any;

                static on(emitter: any, event: any, options: any): any;

                static once(emitter: any, name: any, options: any): any;

                static setMaxListeners(n: any, eventTargets: any): void;

                static usingDomains: boolean;

            }

            namespace EventEmitter {
                class EventEmitterAsyncResource {
                    constructor(...args: any[]);

                    emit(...args: any[]): void;

                    emitDestroy(...args: any[]): void;

                    static EventEmitter: any;

                    static EventEmitterAsyncResource: any;

                    static captureRejectionSymbol: any;

                    static captureRejections: any;

                    static defaultMaxListeners: any;

                    static errorMonitor: any;

                    static getEventListeners: any;

                    static init: any;

                    static kMaxEventTargetListeners: any;

                    static kMaxEventTargetListenersWarned: any;

                    static listenerCount: any;

                    static on: any;

                    static once: any;

                    static setMaxListeners: any;

                    static usingDomains: any;

                }

            }

            namespace EventEmitterAsyncResource {
                class EventEmitter {
                    constructor(opts: any);

                    addListener(type: any, listener: any): any;

                    emit(type: any, args: any): any;

                    eventNames(): any;

                    getMaxListeners(): any;

                    listenerCount(type: any): any;

                    listeners(type: any): any;

                    off(type: any, listener: any): any;

                    on(type: any, listener: any): any;

                    once(type: any, listener: any): any;

                    prependListener(type: any, listener: any): any;

                    prependOnceListener(type: any, listener: any): any;

                    rawListeners(type: any): any;

                    removeAllListeners(type: any, ...args: any[]): any;

                    removeListener(type: any, listener: any): any;

                    setMaxListeners(n: any): any;

                    static EventEmitter: any;

                    static EventEmitterAsyncResource: any;

                    static captureRejectionSymbol: any;

                    static captureRejections: any;

                    static defaultMaxListeners: any;

                    static errorMonitor: any;

                    static getEventListeners: any;

                    static init: any;

                    static kMaxEventTargetListeners: any;

                    static kMaxEventTargetListenersWarned: any;

                    static listenerCount: any;

                    static on: any;

                    static once: any;

                    static setMaxListeners: any;

                    static usingDomains: any;

                }

            }

        }

        namespace Input {
            class EventEmitter {
                constructor(opts: any);

                addListener(type: any, listener: any): any;

                emit(type: any, args: any): any;

                eventNames(): any;

                getMaxListeners(): any;

                listenerCount(type: any): any;

                listeners(type: any): any;

                off(type: any, listener: any): any;

                on(type: any, listener: any): any;

                once(type: any, listener: any): any;

                prependListener(type: any, listener: any): any;

                prependOnceListener(type: any, listener: any): any;

                rawListeners(type: any): any;

                removeAllListeners(type: any, ...args: any[]): any;

                removeListener(type: any, listener: any): any;

                setMaxListeners(n: any): any;

                static EventEmitter: any;

                static captureRejectionSymbol: any;

                static captureRejections: boolean;

                static defaultMaxListeners: number;

                static errorMonitor: any;

                static getEventListeners(emitterOrTarget: any, type: any): any;

                static init(opts: any): void;

                static kMaxEventTargetListeners: any;

                static kMaxEventTargetListenersWarned: any;

                static listenerCount(emitter: any, type: any): any;

                static on(emitter: any, event: any, options: any): any;

                static once(emitter: any, name: any, options: any): any;

                static setMaxListeners(n: any, eventTargets: any): void;

                static usingDomains: boolean;

            }

            class EventEmitterAsyncResource {
                constructor(...args: any[]);

                emit(...args: any[]): void;

                emitDestroy(...args: any[]): void;

                static EventEmitterAsyncResource: any;

                static captureRejectionSymbol: any;

                static captureRejections: boolean;

                static defaultMaxListeners: number;

                static errorMonitor: any;

                static getEventListeners(emitterOrTarget: any, type: any): any;

                static init(opts: any): void;

                static kMaxEventTargetListeners: any;

                static kMaxEventTargetListenersWarned: any;

                static listenerCount(emitter: any, type: any): any;

                static on(emitter: any, event: any, options: any): any;

                static once(emitter: any, name: any, options: any): any;

                static setMaxListeners(n: any, eventTargets: any): void;

                static usingDomains: boolean;

            }

            namespace EventEmitter {
                class EventEmitterAsyncResource {
                    constructor(...args: any[]);

                    emit(...args: any[]): void;

                    emitDestroy(...args: any[]): void;

                    static EventEmitter: any;

                    static EventEmitterAsyncResource: any;

                    static captureRejectionSymbol: any;

                    static captureRejections: any;

                    static defaultMaxListeners: any;

                    static errorMonitor: any;

                    static getEventListeners: any;

                    static init: any;

                    static kMaxEventTargetListeners: any;

                    static kMaxEventTargetListenersWarned: any;

                    static listenerCount: any;

                    static on: any;

                    static once: any;

                    static setMaxListeners: any;

                    static usingDomains: any;

                }

            }

            namespace EventEmitterAsyncResource {
                class EventEmitter {
                    constructor(opts: any);

                    addListener(type: any, listener: any): any;

                    emit(type: any, args: any): any;

                    eventNames(): any;

                    getMaxListeners(): any;

                    listenerCount(type: any): any;

                    listeners(type: any): any;

                    off(type: any, listener: any): any;

                    on(type: any, listener: any): any;

                    once(type: any, listener: any): any;

                    prependListener(type: any, listener: any): any;

                    prependOnceListener(type: any, listener: any): any;

                    rawListeners(type: any): any;

                    removeAllListeners(type: any, ...args: any[]): any;

                    removeListener(type: any, listener: any): any;

                    setMaxListeners(n: any): any;

                    static EventEmitter: any;

                    static EventEmitterAsyncResource: any;

                    static captureRejectionSymbol: any;

                    static captureRejections: any;

                    static defaultMaxListeners: any;

                    static errorMonitor: any;

                    static getEventListeners: any;

                    static init: any;

                    static kMaxEventTargetListeners: any;

                    static kMaxEventTargetListenersWarned: any;

                    static listenerCount: any;

                    static on: any;

                    static once: any;

                    static setMaxListeners: any;

                    static usingDomains: any;

                }

            }

        }

        namespace Invisible {
            class EventEmitter {
                constructor(opts: any);

                addListener(type: any, listener: any): any;

                emit(type: any, args: any): any;

                eventNames(): any;

                getMaxListeners(): any;

                listenerCount(type: any): any;

                listeners(type: any): any;

                off(type: any, listener: any): any;

                on(type: any, listener: any): any;

                once(type: any, listener: any): any;

                prependListener(type: any, listener: any): any;

                prependOnceListener(type: any, listener: any): any;

                rawListeners(type: any): any;

                removeAllListeners(type: any, ...args: any[]): any;

                removeListener(type: any, listener: any): any;

                setMaxListeners(n: any): any;

                static EventEmitter: any;

                static captureRejectionSymbol: any;

                static captureRejections: boolean;

                static defaultMaxListeners: number;

                static errorMonitor: any;

                static getEventListeners(emitterOrTarget: any, type: any): any;

                static init(opts: any): void;

                static kMaxEventTargetListeners: any;

                static kMaxEventTargetListenersWarned: any;

                static listenerCount(emitter: any, type: any): any;

                static on(emitter: any, event: any, options: any): any;

                static once(emitter: any, name: any, options: any): any;

                static setMaxListeners(n: any, eventTargets: any): void;

                static usingDomains: boolean;

            }

            class EventEmitterAsyncResource {
                constructor(...args: any[]);

                emit(...args: any[]): void;

                emitDestroy(...args: any[]): void;

                static EventEmitterAsyncResource: any;

                static captureRejectionSymbol: any;

                static captureRejections: boolean;

                static defaultMaxListeners: number;

                static errorMonitor: any;

                static getEventListeners(emitterOrTarget: any, type: any): any;

                static init(opts: any): void;

                static kMaxEventTargetListeners: any;

                static kMaxEventTargetListenersWarned: any;

                static listenerCount(emitter: any, type: any): any;

                static on(emitter: any, event: any, options: any): any;

                static once(emitter: any, name: any, options: any): any;

                static setMaxListeners(n: any, eventTargets: any): void;

                static usingDomains: boolean;

            }

            namespace EventEmitter {
                class EventEmitterAsyncResource {
                    constructor(...args: any[]);

                    emit(...args: any[]): void;

                    emitDestroy(...args: any[]): void;

                    static EventEmitter: any;

                    static EventEmitterAsyncResource: any;

                    static captureRejectionSymbol: any;

                    static captureRejections: any;

                    static defaultMaxListeners: any;

                    static errorMonitor: any;

                    static getEventListeners: any;

                    static init: any;

                    static kMaxEventTargetListeners: any;

                    static kMaxEventTargetListenersWarned: any;

                    static listenerCount: any;

                    static on: any;

                    static once: any;

                    static setMaxListeners: any;

                    static usingDomains: any;

                }

            }

            namespace EventEmitterAsyncResource {
                class EventEmitter {
                    constructor(opts: any);

                    addListener(type: any, listener: any): any;

                    emit(type: any, args: any): any;

                    eventNames(): any;

                    getMaxListeners(): any;

                    listenerCount(type: any): any;

                    listeners(type: any): any;

                    off(type: any, listener: any): any;

                    on(type: any, listener: any): any;

                    once(type: any, listener: any): any;

                    prependListener(type: any, listener: any): any;

                    prependOnceListener(type: any, listener: any): any;

                    rawListeners(type: any): any;

                    removeAllListeners(type: any, ...args: any[]): any;

                    removeListener(type: any, listener: any): any;

                    setMaxListeners(n: any): any;

                    static EventEmitter: any;

                    static EventEmitterAsyncResource: any;

                    static captureRejectionSymbol: any;

                    static captureRejections: any;

                    static defaultMaxListeners: any;

                    static errorMonitor: any;

                    static getEventListeners: any;

                    static init: any;

                    static kMaxEventTargetListeners: any;

                    static kMaxEventTargetListenersWarned: any;

                    static listenerCount: any;

                    static on: any;

                    static once: any;

                    static setMaxListeners: any;

                    static usingDomains: any;

                }

            }

        }

        namespace List {
            class EventEmitter {
                constructor(opts: any);

                addListener(type: any, listener: any): any;

                emit(type: any, args: any): any;

                eventNames(): any;

                getMaxListeners(): any;

                listenerCount(type: any): any;

                listeners(type: any): any;

                off(type: any, listener: any): any;

                on(type: any, listener: any): any;

                once(type: any, listener: any): any;

                prependListener(type: any, listener: any): any;

                prependOnceListener(type: any, listener: any): any;

                rawListeners(type: any): any;

                removeAllListeners(type: any, ...args: any[]): any;

                removeListener(type: any, listener: any): any;

                setMaxListeners(n: any): any;

                static EventEmitter: any;

                static captureRejectionSymbol: any;

                static captureRejections: boolean;

                static defaultMaxListeners: number;

                static errorMonitor: any;

                static getEventListeners(emitterOrTarget: any, type: any): any;

                static init(opts: any): void;

                static kMaxEventTargetListeners: any;

                static kMaxEventTargetListenersWarned: any;

                static listenerCount(emitter: any, type: any): any;

                static on(emitter: any, event: any, options: any): any;

                static once(emitter: any, name: any, options: any): any;

                static setMaxListeners(n: any, eventTargets: any): void;

                static usingDomains: boolean;

            }

            class EventEmitterAsyncResource {
                constructor(...args: any[]);

                emit(...args: any[]): void;

                emitDestroy(...args: any[]): void;

                static EventEmitterAsyncResource: any;

                static captureRejectionSymbol: any;

                static captureRejections: boolean;

                static defaultMaxListeners: number;

                static errorMonitor: any;

                static getEventListeners(emitterOrTarget: any, type: any): any;

                static init(opts: any): void;

                static kMaxEventTargetListeners: any;

                static kMaxEventTargetListenersWarned: any;

                static listenerCount(emitter: any, type: any): any;

                static on(emitter: any, event: any, options: any): any;

                static once(emitter: any, name: any, options: any): any;

                static setMaxListeners(n: any, eventTargets: any): void;

                static usingDomains: boolean;

            }

            namespace EventEmitter {
                class EventEmitterAsyncResource {
                    constructor(...args: any[]);

                    emit(...args: any[]): void;

                    emitDestroy(...args: any[]): void;

                    static EventEmitter: any;

                    static EventEmitterAsyncResource: any;

                    static captureRejectionSymbol: any;

                    static captureRejections: any;

                    static defaultMaxListeners: any;

                    static errorMonitor: any;

                    static getEventListeners: any;

                    static init: any;

                    static kMaxEventTargetListeners: any;

                    static kMaxEventTargetListenersWarned: any;

                    static listenerCount: any;

                    static on: any;

                    static once: any;

                    static setMaxListeners: any;

                    static usingDomains: any;

                }

            }

            namespace EventEmitterAsyncResource {
                class EventEmitter {
                    constructor(opts: any);

                    addListener(type: any, listener: any): any;

                    emit(type: any, args: any): any;

                    eventNames(): any;

                    getMaxListeners(): any;

                    listenerCount(type: any): any;

                    listeners(type: any): any;

                    off(type: any, listener: any): any;

                    on(type: any, listener: any): any;

                    once(type: any, listener: any): any;

                    prependListener(type: any, listener: any): any;

                    prependOnceListener(type: any, listener: any): any;

                    rawListeners(type: any): any;

                    removeAllListeners(type: any, ...args: any[]): any;

                    removeListener(type: any, listener: any): any;

                    setMaxListeners(n: any): any;

                    static EventEmitter: any;

                    static EventEmitterAsyncResource: any;

                    static captureRejectionSymbol: any;

                    static captureRejections: any;

                    static defaultMaxListeners: any;

                    static errorMonitor: any;

                    static getEventListeners: any;

                    static init: any;

                    static kMaxEventTargetListeners: any;

                    static kMaxEventTargetListenersWarned: any;

                    static listenerCount: any;

                    static on: any;

                    static once: any;

                    static setMaxListeners: any;

                    static usingDomains: any;

                }

            }

        }

        namespace MultiSelect {
            class EventEmitter {
                constructor(opts: any);

                addListener(type: any, listener: any): any;

                emit(type: any, args: any): any;

                eventNames(): any;

                getMaxListeners(): any;

                listenerCount(type: any): any;

                listeners(type: any): any;

                off(type: any, listener: any): any;

                on(type: any, listener: any): any;

                once(type: any, listener: any): any;

                prependListener(type: any, listener: any): any;

                prependOnceListener(type: any, listener: any): any;

                rawListeners(type: any): any;

                removeAllListeners(type: any, ...args: any[]): any;

                removeListener(type: any, listener: any): any;

                setMaxListeners(n: any): any;

                static EventEmitter: any;

                static captureRejectionSymbol: any;

                static captureRejections: boolean;

                static defaultMaxListeners: number;

                static errorMonitor: any;

                static getEventListeners(emitterOrTarget: any, type: any): any;

                static init(opts: any): void;

                static kMaxEventTargetListeners: any;

                static kMaxEventTargetListenersWarned: any;

                static listenerCount(emitter: any, type: any): any;

                static on(emitter: any, event: any, options: any): any;

                static once(emitter: any, name: any, options: any): any;

                static setMaxListeners(n: any, eventTargets: any): void;

                static usingDomains: boolean;

            }

            class EventEmitterAsyncResource {
                constructor(...args: any[]);

                emit(...args: any[]): void;

                emitDestroy(...args: any[]): void;

                static EventEmitterAsyncResource: any;

                static captureRejectionSymbol: any;

                static captureRejections: boolean;

                static defaultMaxListeners: number;

                static errorMonitor: any;

                static getEventListeners(emitterOrTarget: any, type: any): any;

                static init(opts: any): void;

                static kMaxEventTargetListeners: any;

                static kMaxEventTargetListenersWarned: any;

                static listenerCount(emitter: any, type: any): any;

                static on(emitter: any, event: any, options: any): any;

                static once(emitter: any, name: any, options: any): any;

                static setMaxListeners(n: any, eventTargets: any): void;

                static usingDomains: boolean;

            }

            const captureRejectionSymbol: any;

            const captureRejections: boolean;

            const defaultMaxListeners: number;

            const errorMonitor: any;

            const kMaxEventTargetListeners: any;

            const kMaxEventTargetListenersWarned: any;

            const usingDomains: boolean;

            function getEventListeners(emitterOrTarget: any, type: any): any;

            function init(opts: any): void;

            function listenerCount(emitter: any, type: any): any;

            function on(emitter: any, event: any, options: any): any;

            function once(emitter: any, name: any, options: any): any;

            function prompt(options: any): void;

            function setMaxListeners(n: any, eventTargets: any): void;

            namespace EventEmitter {
                class EventEmitterAsyncResource {
                    constructor(...args: any[]);

                    emit(...args: any[]): void;

                    emitDestroy(...args: any[]): void;

                    static EventEmitter: any;

                    static EventEmitterAsyncResource: any;

                    static captureRejectionSymbol: any;

                    static captureRejections: any;

                    static defaultMaxListeners: any;

                    static errorMonitor: any;

                    static getEventListeners: any;

                    static init: any;

                    static kMaxEventTargetListeners: any;

                    static kMaxEventTargetListenersWarned: any;

                    static listenerCount: any;

                    static on: any;

                    static once: any;

                    static setMaxListeners: any;

                    static usingDomains: any;

                }

            }

            namespace EventEmitterAsyncResource {
                class EventEmitter {
                    constructor(opts: any);

                    addListener(type: any, listener: any): any;

                    emit(type: any, args: any): any;

                    eventNames(): any;

                    getMaxListeners(): any;

                    listenerCount(type: any): any;

                    listeners(type: any): any;

                    off(type: any, listener: any): any;

                    on(type: any, listener: any): any;

                    once(type: any, listener: any): any;

                    prependListener(type: any, listener: any): any;

                    prependOnceListener(type: any, listener: any): any;

                    rawListeners(type: any): any;

                    removeAllListeners(type: any, ...args: any[]): any;

                    removeListener(type: any, listener: any): any;

                    setMaxListeners(n: any): any;

                    static EventEmitter: any;

                    static EventEmitterAsyncResource: any;

                    static captureRejectionSymbol: any;

                    static captureRejections: any;

                    static defaultMaxListeners: any;

                    static errorMonitor: any;

                    static getEventListeners: any;

                    static init: any;

                    static kMaxEventTargetListeners: any;

                    static kMaxEventTargetListenersWarned: any;

                    static listenerCount: any;

                    static on: any;

                    static once: any;

                    static setMaxListeners: any;

                    static usingDomains: any;

                }

            }

        }

        namespace Numeral {
            class EventEmitter {
                constructor(opts: any);

                addListener(type: any, listener: any): any;

                emit(type: any, args: any): any;

                eventNames(): any;

                getMaxListeners(): any;

                listenerCount(type: any): any;

                listeners(type: any): any;

                off(type: any, listener: any): any;

                on(type: any, listener: any): any;

                once(type: any, listener: any): any;

                prependListener(type: any, listener: any): any;

                prependOnceListener(type: any, listener: any): any;

                rawListeners(type: any): any;

                removeAllListeners(type: any, ...args: any[]): any;

                removeListener(type: any, listener: any): any;

                setMaxListeners(n: any): any;

                static EventEmitter: any;

                static captureRejectionSymbol: any;

                static captureRejections: boolean;

                static defaultMaxListeners: number;

                static errorMonitor: any;

                static getEventListeners(emitterOrTarget: any, type: any): any;

                static init(opts: any): void;

                static kMaxEventTargetListeners: any;

                static kMaxEventTargetListenersWarned: any;

                static listenerCount(emitter: any, type: any): any;

                static on(emitter: any, event: any, options: any): any;

                static once(emitter: any, name: any, options: any): any;

                static setMaxListeners(n: any, eventTargets: any): void;

                static usingDomains: boolean;

            }

            class EventEmitterAsyncResource {
                constructor(...args: any[]);

                emit(...args: any[]): void;

                emitDestroy(...args: any[]): void;

                static EventEmitterAsyncResource: any;

                static captureRejectionSymbol: any;

                static captureRejections: boolean;

                static defaultMaxListeners: number;

                static errorMonitor: any;

                static getEventListeners(emitterOrTarget: any, type: any): any;

                static init(opts: any): void;

                static kMaxEventTargetListeners: any;

                static kMaxEventTargetListenersWarned: any;

                static listenerCount(emitter: any, type: any): any;

                static on(emitter: any, event: any, options: any): any;

                static once(emitter: any, name: any, options: any): any;

                static setMaxListeners(n: any, eventTargets: any): void;

                static usingDomains: boolean;

            }

            namespace EventEmitter {
                class EventEmitterAsyncResource {
                    constructor(...args: any[]);

                    emit(...args: any[]): void;

                    emitDestroy(...args: any[]): void;

                    static EventEmitter: any;

                    static EventEmitterAsyncResource: any;

                    static captureRejectionSymbol: any;

                    static captureRejections: any;

                    static defaultMaxListeners: any;

                    static errorMonitor: any;

                    static getEventListeners: any;

                    static init: any;

                    static kMaxEventTargetListeners: any;

                    static kMaxEventTargetListenersWarned: any;

                    static listenerCount: any;

                    static on: any;

                    static once: any;

                    static setMaxListeners: any;

                    static usingDomains: any;

                }

            }

            namespace EventEmitterAsyncResource {
                class EventEmitter {
                    constructor(opts: any);

                    addListener(type: any, listener: any): any;

                    emit(type: any, args: any): any;

                    eventNames(): any;

                    getMaxListeners(): any;

                    listenerCount(type: any): any;

                    listeners(type: any): any;

                    off(type: any, listener: any): any;

                    on(type: any, listener: any): any;

                    once(type: any, listener: any): any;

                    prependListener(type: any, listener: any): any;

                    prependOnceListener(type: any, listener: any): any;

                    rawListeners(type: any): any;

                    removeAllListeners(type: any, ...args: any[]): any;

                    removeListener(type: any, listener: any): any;

                    setMaxListeners(n: any): any;

                    static EventEmitter: any;

                    static EventEmitterAsyncResource: any;

                    static captureRejectionSymbol: any;

                    static captureRejections: any;

                    static defaultMaxListeners: any;

                    static errorMonitor: any;

                    static getEventListeners: any;

                    static init: any;

                    static kMaxEventTargetListeners: any;

                    static kMaxEventTargetListenersWarned: any;

                    static listenerCount: any;

                    static on: any;

                    static once: any;

                    static setMaxListeners: any;

                    static usingDomains: any;

                }

            }

        }

        namespace Password {
            class EventEmitter {
                constructor(opts: any);

                addListener(type: any, listener: any): any;

                emit(type: any, args: any): any;

                eventNames(): any;

                getMaxListeners(): any;

                listenerCount(type: any): any;

                listeners(type: any): any;

                off(type: any, listener: any): any;

                on(type: any, listener: any): any;

                once(type: any, listener: any): any;

                prependListener(type: any, listener: any): any;

                prependOnceListener(type: any, listener: any): any;

                rawListeners(type: any): any;

                removeAllListeners(type: any, ...args: any[]): any;

                removeListener(type: any, listener: any): any;

                setMaxListeners(n: any): any;

                static EventEmitter: any;

                static captureRejectionSymbol: any;

                static captureRejections: boolean;

                static defaultMaxListeners: number;

                static errorMonitor: any;

                static getEventListeners(emitterOrTarget: any, type: any): any;

                static init(opts: any): void;

                static kMaxEventTargetListeners: any;

                static kMaxEventTargetListenersWarned: any;

                static listenerCount(emitter: any, type: any): any;

                static on(emitter: any, event: any, options: any): any;

                static once(emitter: any, name: any, options: any): any;

                static setMaxListeners(n: any, eventTargets: any): void;

                static usingDomains: boolean;

            }

            class EventEmitterAsyncResource {
                constructor(...args: any[]);

                emit(...args: any[]): void;

                emitDestroy(...args: any[]): void;

                static EventEmitterAsyncResource: any;

                static captureRejectionSymbol: any;

                static captureRejections: boolean;

                static defaultMaxListeners: number;

                static errorMonitor: any;

                static getEventListeners(emitterOrTarget: any, type: any): any;

                static init(opts: any): void;

                static kMaxEventTargetListeners: any;

                static kMaxEventTargetListenersWarned: any;

                static listenerCount(emitter: any, type: any): any;

                static on(emitter: any, event: any, options: any): any;

                static once(emitter: any, name: any, options: any): any;

                static setMaxListeners(n: any, eventTargets: any): void;

                static usingDomains: boolean;

            }

            namespace EventEmitter {
                class EventEmitterAsyncResource {
                    constructor(...args: any[]);

                    emit(...args: any[]): void;

                    emitDestroy(...args: any[]): void;

                    static EventEmitter: any;

                    static EventEmitterAsyncResource: any;

                    static captureRejectionSymbol: any;

                    static captureRejections: any;

                    static defaultMaxListeners: any;

                    static errorMonitor: any;

                    static getEventListeners: any;

                    static init: any;

                    static kMaxEventTargetListeners: any;

                    static kMaxEventTargetListenersWarned: any;

                    static listenerCount: any;

                    static on: any;

                    static once: any;

                    static setMaxListeners: any;

                    static usingDomains: any;

                }

            }

            namespace EventEmitterAsyncResource {
                class EventEmitter {
                    constructor(opts: any);

                    addListener(type: any, listener: any): any;

                    emit(type: any, args: any): any;

                    eventNames(): any;

                    getMaxListeners(): any;

                    listenerCount(type: any): any;

                    listeners(type: any): any;

                    off(type: any, listener: any): any;

                    on(type: any, listener: any): any;

                    once(type: any, listener: any): any;

                    prependListener(type: any, listener: any): any;

                    prependOnceListener(type: any, listener: any): any;

                    rawListeners(type: any): any;

                    removeAllListeners(type: any, ...args: any[]): any;

                    removeListener(type: any, listener: any): any;

                    setMaxListeners(n: any): any;

                    static EventEmitter: any;

                    static EventEmitterAsyncResource: any;

                    static captureRejectionSymbol: any;

                    static captureRejections: any;

                    static defaultMaxListeners: any;

                    static errorMonitor: any;

                    static getEventListeners: any;

                    static init: any;

                    static kMaxEventTargetListeners: any;

                    static kMaxEventTargetListenersWarned: any;

                    static listenerCount: any;

                    static on: any;

                    static once: any;

                    static setMaxListeners: any;

                    static usingDomains: any;

                }

            }

        }

        namespace Quiz {
            class EventEmitter {
                constructor(opts: any);

                addListener(type: any, listener: any): any;

                emit(type: any, args: any): any;

                eventNames(): any;

                getMaxListeners(): any;

                listenerCount(type: any): any;

                listeners(type: any): any;

                off(type: any, listener: any): any;

                on(type: any, listener: any): any;

                once(type: any, listener: any): any;

                prependListener(type: any, listener: any): any;

                prependOnceListener(type: any, listener: any): any;

                rawListeners(type: any): any;

                removeAllListeners(type: any, ...args: any[]): any;

                removeListener(type: any, listener: any): any;

                setMaxListeners(n: any): any;

                static EventEmitter: any;

                static captureRejectionSymbol: any;

                static captureRejections: boolean;

                static defaultMaxListeners: number;

                static errorMonitor: any;

                static getEventListeners(emitterOrTarget: any, type: any): any;

                static init(opts: any): void;

                static kMaxEventTargetListeners: any;

                static kMaxEventTargetListenersWarned: any;

                static listenerCount(emitter: any, type: any): any;

                static on(emitter: any, event: any, options: any): any;

                static once(emitter: any, name: any, options: any): any;

                static setMaxListeners(n: any, eventTargets: any): void;

                static usingDomains: boolean;

            }

            class EventEmitterAsyncResource {
                constructor(...args: any[]);

                emit(...args: any[]): void;

                emitDestroy(...args: any[]): void;

                static EventEmitterAsyncResource: any;

                static captureRejectionSymbol: any;

                static captureRejections: boolean;

                static defaultMaxListeners: number;

                static errorMonitor: any;

                static getEventListeners(emitterOrTarget: any, type: any): any;

                static init(opts: any): void;

                static kMaxEventTargetListeners: any;

                static kMaxEventTargetListenersWarned: any;

                static listenerCount(emitter: any, type: any): any;

                static on(emitter: any, event: any, options: any): any;

                static once(emitter: any, name: any, options: any): any;

                static setMaxListeners(n: any, eventTargets: any): void;

                static usingDomains: boolean;

            }

            namespace EventEmitter {
                class EventEmitterAsyncResource {
                    constructor(...args: any[]);

                    emit(...args: any[]): void;

                    emitDestroy(...args: any[]): void;

                    static EventEmitter: any;

                    static EventEmitterAsyncResource: any;

                    static captureRejectionSymbol: any;

                    static captureRejections: any;

                    static defaultMaxListeners: any;

                    static errorMonitor: any;

                    static getEventListeners: any;

                    static init: any;

                    static kMaxEventTargetListeners: any;

                    static kMaxEventTargetListenersWarned: any;

                    static listenerCount: any;

                    static on: any;

                    static once: any;

                    static setMaxListeners: any;

                    static usingDomains: any;

                }

            }

            namespace EventEmitterAsyncResource {
                class EventEmitter {
                    constructor(opts: any);

                    addListener(type: any, listener: any): any;

                    emit(type: any, args: any): any;

                    eventNames(): any;

                    getMaxListeners(): any;

                    listenerCount(type: any): any;

                    listeners(type: any): any;

                    off(type: any, listener: any): any;

                    on(type: any, listener: any): any;

                    once(type: any, listener: any): any;

                    prependListener(type: any, listener: any): any;

                    prependOnceListener(type: any, listener: any): any;

                    rawListeners(type: any): any;

                    removeAllListeners(type: any, ...args: any[]): any;

                    removeListener(type: any, listener: any): any;

                    setMaxListeners(n: any): any;

                    static EventEmitter: any;

                    static EventEmitterAsyncResource: any;

                    static captureRejectionSymbol: any;

                    static captureRejections: any;

                    static defaultMaxListeners: any;

                    static errorMonitor: any;

                    static getEventListeners: any;

                    static init: any;

                    static kMaxEventTargetListeners: any;

                    static kMaxEventTargetListenersWarned: any;

                    static listenerCount: any;

                    static on: any;

                    static once: any;

                    static setMaxListeners: any;

                    static usingDomains: any;

                }

            }

        }

        namespace Scale {
            class EventEmitter {
                constructor(opts: any);

                addListener(type: any, listener: any): any;

                emit(type: any, args: any): any;

                eventNames(): any;

                getMaxListeners(): any;

                listenerCount(type: any): any;

                listeners(type: any): any;

                off(type: any, listener: any): any;

                on(type: any, listener: any): any;

                once(type: any, listener: any): any;

                prependListener(type: any, listener: any): any;

                prependOnceListener(type: any, listener: any): any;

                rawListeners(type: any): any;

                removeAllListeners(type: any, ...args: any[]): any;

                removeListener(type: any, listener: any): any;

                setMaxListeners(n: any): any;

                static EventEmitter: any;

                static captureRejectionSymbol: any;

                static captureRejections: boolean;

                static defaultMaxListeners: number;

                static errorMonitor: any;

                static getEventListeners(emitterOrTarget: any, type: any): any;

                static init(opts: any): void;

                static kMaxEventTargetListeners: any;

                static kMaxEventTargetListenersWarned: any;

                static listenerCount(emitter: any, type: any): any;

                static on(emitter: any, event: any, options: any): any;

                static once(emitter: any, name: any, options: any): any;

                static setMaxListeners(n: any, eventTargets: any): void;

                static usingDomains: boolean;

            }

            class EventEmitterAsyncResource {
                constructor(...args: any[]);

                emit(...args: any[]): void;

                emitDestroy(...args: any[]): void;

                static EventEmitterAsyncResource: any;

                static captureRejectionSymbol: any;

                static captureRejections: boolean;

                static defaultMaxListeners: number;

                static errorMonitor: any;

                static getEventListeners(emitterOrTarget: any, type: any): any;

                static init(opts: any): void;

                static kMaxEventTargetListeners: any;

                static kMaxEventTargetListenersWarned: any;

                static listenerCount(emitter: any, type: any): any;

                static on(emitter: any, event: any, options: any): any;

                static once(emitter: any, name: any, options: any): any;

                static setMaxListeners(n: any, eventTargets: any): void;

                static usingDomains: boolean;

            }

            namespace EventEmitter {
                class EventEmitterAsyncResource {
                    constructor(...args: any[]);

                    emit(...args: any[]): void;

                    emitDestroy(...args: any[]): void;

                    static EventEmitter: any;

                    static EventEmitterAsyncResource: any;

                    static captureRejectionSymbol: any;

                    static captureRejections: any;

                    static defaultMaxListeners: any;

                    static errorMonitor: any;

                    static getEventListeners: any;

                    static init: any;

                    static kMaxEventTargetListeners: any;

                    static kMaxEventTargetListenersWarned: any;

                    static listenerCount: any;

                    static on: any;

                    static once: any;

                    static setMaxListeners: any;

                    static usingDomains: any;

                }

            }

            namespace EventEmitterAsyncResource {
                class EventEmitter {
                    constructor(opts: any);

                    addListener(type: any, listener: any): any;

                    emit(type: any, args: any): any;

                    eventNames(): any;

                    getMaxListeners(): any;

                    listenerCount(type: any): any;

                    listeners(type: any): any;

                    off(type: any, listener: any): any;

                    on(type: any, listener: any): any;

                    once(type: any, listener: any): any;

                    prependListener(type: any, listener: any): any;

                    prependOnceListener(type: any, listener: any): any;

                    rawListeners(type: any): any;

                    removeAllListeners(type: any, ...args: any[]): any;

                    removeListener(type: any, listener: any): any;

                    setMaxListeners(n: any): any;

                    static EventEmitter: any;

                    static EventEmitterAsyncResource: any;

                    static captureRejectionSymbol: any;

                    static captureRejections: any;

                    static defaultMaxListeners: any;

                    static errorMonitor: any;

                    static getEventListeners: any;

                    static init: any;

                    static kMaxEventTargetListeners: any;

                    static kMaxEventTargetListenersWarned: any;

                    static listenerCount: any;

                    static on: any;

                    static once: any;

                    static setMaxListeners: any;

                    static usingDomains: any;

                }

            }

        }

        namespace Select {
            class EventEmitter {
                constructor(opts: any);

                addListener(type: any, listener: any): any;

                emit(type: any, args: any): any;

                eventNames(): any;

                getMaxListeners(): any;

                listenerCount(type: any): any;

                listeners(type: any): any;

                off(type: any, listener: any): any;

                on(type: any, listener: any): any;

                once(type: any, listener: any): any;

                prependListener(type: any, listener: any): any;

                prependOnceListener(type: any, listener: any): any;

                rawListeners(type: any): any;

                removeAllListeners(type: any, ...args: any[]): any;

                removeListener(type: any, listener: any): any;

                setMaxListeners(n: any): any;

                static EventEmitter: any;

                static captureRejectionSymbol: any;

                static captureRejections: boolean;

                static defaultMaxListeners: number;

                static errorMonitor: any;

                static getEventListeners(emitterOrTarget: any, type: any): any;

                static init(opts: any): void;

                static kMaxEventTargetListeners: any;

                static kMaxEventTargetListenersWarned: any;

                static listenerCount(emitter: any, type: any): any;

                static on(emitter: any, event: any, options: any): any;

                static once(emitter: any, name: any, options: any): any;

                static setMaxListeners(n: any, eventTargets: any): void;

                static usingDomains: boolean;

            }

            class EventEmitterAsyncResource {
                constructor(...args: any[]);

                emit(...args: any[]): void;

                emitDestroy(...args: any[]): void;

                static EventEmitterAsyncResource: any;

                static captureRejectionSymbol: any;

                static captureRejections: boolean;

                static defaultMaxListeners: number;

                static errorMonitor: any;

                static getEventListeners(emitterOrTarget: any, type: any): any;

                static init(opts: any): void;

                static kMaxEventTargetListeners: any;

                static kMaxEventTargetListenersWarned: any;

                static listenerCount(emitter: any, type: any): any;

                static on(emitter: any, event: any, options: any): any;

                static once(emitter: any, name: any, options: any): any;

                static setMaxListeners(n: any, eventTargets: any): void;

                static usingDomains: boolean;

            }

            namespace EventEmitter {
                class EventEmitterAsyncResource {
                    constructor(...args: any[]);

                    emit(...args: any[]): void;

                    emitDestroy(...args: any[]): void;

                    static EventEmitter: any;

                    static EventEmitterAsyncResource: any;

                    static captureRejectionSymbol: any;

                    static captureRejections: any;

                    static defaultMaxListeners: any;

                    static errorMonitor: any;

                    static getEventListeners: any;

                    static init: any;

                    static kMaxEventTargetListeners: any;

                    static kMaxEventTargetListenersWarned: any;

                    static listenerCount: any;

                    static on: any;

                    static once: any;

                    static setMaxListeners: any;

                    static usingDomains: any;

                }

            }

            namespace EventEmitterAsyncResource {
                class EventEmitter {
                    constructor(opts: any);

                    addListener(type: any, listener: any): any;

                    emit(type: any, args: any): any;

                    eventNames(): any;

                    getMaxListeners(): any;

                    listenerCount(type: any): any;

                    listeners(type: any): any;

                    off(type: any, listener: any): any;

                    on(type: any, listener: any): any;

                    once(type: any, listener: any): any;

                    prependListener(type: any, listener: any): any;

                    prependOnceListener(type: any, listener: any): any;

                    rawListeners(type: any): any;

                    removeAllListeners(type: any, ...args: any[]): any;

                    removeListener(type: any, listener: any): any;

                    setMaxListeners(n: any): any;

                    static EventEmitter: any;

                    static EventEmitterAsyncResource: any;

                    static captureRejectionSymbol: any;

                    static captureRejections: any;

                    static defaultMaxListeners: any;

                    static errorMonitor: any;

                    static getEventListeners: any;

                    static init: any;

                    static kMaxEventTargetListeners: any;

                    static kMaxEventTargetListenersWarned: any;

                    static listenerCount: any;

                    static on: any;

                    static once: any;

                    static setMaxListeners: any;

                    static usingDomains: any;

                }

            }

        }

        namespace Snippet {
            class EventEmitter {
                constructor(opts: any);

                addListener(type: any, listener: any): any;

                emit(type: any, args: any): any;

                eventNames(): any;

                getMaxListeners(): any;

                listenerCount(type: any): any;

                listeners(type: any): any;

                off(type: any, listener: any): any;

                on(type: any, listener: any): any;

                once(type: any, listener: any): any;

                prependListener(type: any, listener: any): any;

                prependOnceListener(type: any, listener: any): any;

                rawListeners(type: any): any;

                removeAllListeners(type: any, ...args: any[]): any;

                removeListener(type: any, listener: any): any;

                setMaxListeners(n: any): any;

                static EventEmitter: any;

                static captureRejectionSymbol: any;

                static captureRejections: boolean;

                static defaultMaxListeners: number;

                static errorMonitor: any;

                static getEventListeners(emitterOrTarget: any, type: any): any;

                static init(opts: any): void;

                static kMaxEventTargetListeners: any;

                static kMaxEventTargetListenersWarned: any;

                static listenerCount(emitter: any, type: any): any;

                static on(emitter: any, event: any, options: any): any;

                static once(emitter: any, name: any, options: any): any;

                static setMaxListeners(n: any, eventTargets: any): void;

                static usingDomains: boolean;

            }

            class EventEmitterAsyncResource {
                constructor(...args: any[]);

                emit(...args: any[]): void;

                emitDestroy(...args: any[]): void;

                static EventEmitterAsyncResource: any;

                static captureRejectionSymbol: any;

                static captureRejections: boolean;

                static defaultMaxListeners: number;

                static errorMonitor: any;

                static getEventListeners(emitterOrTarget: any, type: any): any;

                static init(opts: any): void;

                static kMaxEventTargetListeners: any;

                static kMaxEventTargetListenersWarned: any;

                static listenerCount(emitter: any, type: any): any;

                static on(emitter: any, event: any, options: any): any;

                static once(emitter: any, name: any, options: any): any;

                static setMaxListeners(n: any, eventTargets: any): void;

                static usingDomains: boolean;

            }

            namespace EventEmitter {
                class EventEmitterAsyncResource {
                    constructor(...args: any[]);

                    emit(...args: any[]): void;

                    emitDestroy(...args: any[]): void;

                    static EventEmitter: any;

                    static EventEmitterAsyncResource: any;

                    static captureRejectionSymbol: any;

                    static captureRejections: any;

                    static defaultMaxListeners: any;

                    static errorMonitor: any;

                    static getEventListeners: any;

                    static init: any;

                    static kMaxEventTargetListeners: any;

                    static kMaxEventTargetListenersWarned: any;

                    static listenerCount: any;

                    static on: any;

                    static once: any;

                    static setMaxListeners: any;

                    static usingDomains: any;

                }

            }

            namespace EventEmitterAsyncResource {
                class EventEmitter {
                    constructor(opts: any);

                    addListener(type: any, listener: any): any;

                    emit(type: any, args: any): any;

                    eventNames(): any;

                    getMaxListeners(): any;

                    listenerCount(type: any): any;

                    listeners(type: any): any;

                    off(type: any, listener: any): any;

                    on(type: any, listener: any): any;

                    once(type: any, listener: any): any;

                    prependListener(type: any, listener: any): any;

                    prependOnceListener(type: any, listener: any): any;

                    rawListeners(type: any): any;

                    removeAllListeners(type: any, ...args: any[]): any;

                    removeListener(type: any, listener: any): any;

                    setMaxListeners(n: any): any;

                    static EventEmitter: any;

                    static EventEmitterAsyncResource: any;

                    static captureRejectionSymbol: any;

                    static captureRejections: any;

                    static defaultMaxListeners: any;

                    static errorMonitor: any;

                    static getEventListeners: any;

                    static init: any;

                    static kMaxEventTargetListeners: any;

                    static kMaxEventTargetListenersWarned: any;

                    static listenerCount: any;

                    static on: any;

                    static once: any;

                    static setMaxListeners: any;

                    static usingDomains: any;

                }

            }

        }

        namespace Sort {
            class EventEmitter {
                constructor(opts: any);

                addListener(type: any, listener: any): any;

                emit(type: any, args: any): any;

                eventNames(): any;

                getMaxListeners(): any;

                listenerCount(type: any): any;

                listeners(type: any): any;

                off(type: any, listener: any): any;

                on(type: any, listener: any): any;

                once(type: any, listener: any): any;

                prependListener(type: any, listener: any): any;

                prependOnceListener(type: any, listener: any): any;

                rawListeners(type: any): any;

                removeAllListeners(type: any, ...args: any[]): any;

                removeListener(type: any, listener: any): any;

                setMaxListeners(n: any): any;

                static EventEmitter: any;

                static captureRejectionSymbol: any;

                static captureRejections: boolean;

                static defaultMaxListeners: number;

                static errorMonitor: any;

                static getEventListeners(emitterOrTarget: any, type: any): any;

                static init(opts: any): void;

                static kMaxEventTargetListeners: any;

                static kMaxEventTargetListenersWarned: any;

                static listenerCount(emitter: any, type: any): any;

                static on(emitter: any, event: any, options: any): any;

                static once(emitter: any, name: any, options: any): any;

                static setMaxListeners(n: any, eventTargets: any): void;

                static usingDomains: boolean;

            }

            class EventEmitterAsyncResource {
                constructor(...args: any[]);

                emit(...args: any[]): void;

                emitDestroy(...args: any[]): void;

                static EventEmitterAsyncResource: any;

                static captureRejectionSymbol: any;

                static captureRejections: boolean;

                static defaultMaxListeners: number;

                static errorMonitor: any;

                static getEventListeners(emitterOrTarget: any, type: any): any;

                static init(opts: any): void;

                static kMaxEventTargetListeners: any;

                static kMaxEventTargetListenersWarned: any;

                static listenerCount(emitter: any, type: any): any;

                static on(emitter: any, event: any, options: any): any;

                static once(emitter: any, name: any, options: any): any;

                static setMaxListeners(n: any, eventTargets: any): void;

                static usingDomains: boolean;

            }

            namespace EventEmitter {
                class EventEmitterAsyncResource {
                    constructor(...args: any[]);

                    emit(...args: any[]): void;

                    emitDestroy(...args: any[]): void;

                    static EventEmitter: any;

                    static EventEmitterAsyncResource: any;

                    static captureRejectionSymbol: any;

                    static captureRejections: any;

                    static defaultMaxListeners: any;

                    static errorMonitor: any;

                    static getEventListeners: any;

                    static init: any;

                    static kMaxEventTargetListeners: any;

                    static kMaxEventTargetListenersWarned: any;

                    static listenerCount: any;

                    static on: any;

                    static once: any;

                    static setMaxListeners: any;

                    static usingDomains: any;

                }

            }

            namespace EventEmitterAsyncResource {
                class EventEmitter {
                    constructor(opts: any);

                    addListener(type: any, listener: any): any;

                    emit(type: any, args: any): any;

                    eventNames(): any;

                    getMaxListeners(): any;

                    listenerCount(type: any): any;

                    listeners(type: any): any;

                    off(type: any, listener: any): any;

                    on(type: any, listener: any): any;

                    once(type: any, listener: any): any;

                    prependListener(type: any, listener: any): any;

                    prependOnceListener(type: any, listener: any): any;

                    rawListeners(type: any): any;

                    removeAllListeners(type: any, ...args: any[]): any;

                    removeListener(type: any, listener: any): any;

                    setMaxListeners(n: any): any;

                    static EventEmitter: any;

                    static EventEmitterAsyncResource: any;

                    static captureRejectionSymbol: any;

                    static captureRejections: any;

                    static defaultMaxListeners: any;

                    static errorMonitor: any;

                    static getEventListeners: any;

                    static init: any;

                    static kMaxEventTargetListeners: any;

                    static kMaxEventTargetListenersWarned: any;

                    static listenerCount: any;

                    static on: any;

                    static once: any;

                    static setMaxListeners: any;

                    static usingDomains: any;

                }

            }

        }

        namespace Survey {
            class EventEmitter {
                constructor(opts: any);

                addListener(type: any, listener: any): any;

                emit(type: any, args: any): any;

                eventNames(): any;

                getMaxListeners(): any;

                listenerCount(type: any): any;

                listeners(type: any): any;

                off(type: any, listener: any): any;

                on(type: any, listener: any): any;

                once(type: any, listener: any): any;

                prependListener(type: any, listener: any): any;

                prependOnceListener(type: any, listener: any): any;

                rawListeners(type: any): any;

                removeAllListeners(type: any, ...args: any[]): any;

                removeListener(type: any, listener: any): any;

                setMaxListeners(n: any): any;

                static EventEmitter: any;

                static captureRejectionSymbol: any;

                static captureRejections: boolean;

                static defaultMaxListeners: number;

                static errorMonitor: any;

                static getEventListeners(emitterOrTarget: any, type: any): any;

                static init(opts: any): void;

                static kMaxEventTargetListeners: any;

                static kMaxEventTargetListenersWarned: any;

                static listenerCount(emitter: any, type: any): any;

                static on(emitter: any, event: any, options: any): any;

                static once(emitter: any, name: any, options: any): any;

                static setMaxListeners(n: any, eventTargets: any): void;

                static usingDomains: boolean;

            }

            class EventEmitterAsyncResource {
                constructor(...args: any[]);

                emit(...args: any[]): void;

                emitDestroy(...args: any[]): void;

                static EventEmitterAsyncResource: any;

                static captureRejectionSymbol: any;

                static captureRejections: boolean;

                static defaultMaxListeners: number;

                static errorMonitor: any;

                static getEventListeners(emitterOrTarget: any, type: any): any;

                static init(opts: any): void;

                static kMaxEventTargetListeners: any;

                static kMaxEventTargetListenersWarned: any;

                static listenerCount(emitter: any, type: any): any;

                static on(emitter: any, event: any, options: any): any;

                static once(emitter: any, name: any, options: any): any;

                static setMaxListeners(n: any, eventTargets: any): void;

                static usingDomains: boolean;

            }

            namespace EventEmitter {
                class EventEmitterAsyncResource {
                    constructor(...args: any[]);

                    emit(...args: any[]): void;

                    emitDestroy(...args: any[]): void;

                    static EventEmitter: any;

                    static EventEmitterAsyncResource: any;

                    static captureRejectionSymbol: any;

                    static captureRejections: any;

                    static defaultMaxListeners: any;

                    static errorMonitor: any;

                    static getEventListeners: any;

                    static init: any;

                    static kMaxEventTargetListeners: any;

                    static kMaxEventTargetListenersWarned: any;

                    static listenerCount: any;

                    static on: any;

                    static once: any;

                    static setMaxListeners: any;

                    static usingDomains: any;

                }

            }

            namespace EventEmitterAsyncResource {
                class EventEmitter {
                    constructor(opts: any);

                    addListener(type: any, listener: any): any;

                    emit(type: any, args: any): any;

                    eventNames(): any;

                    getMaxListeners(): any;

                    listenerCount(type: any): any;

                    listeners(type: any): any;

                    off(type: any, listener: any): any;

                    on(type: any, listener: any): any;

                    once(type: any, listener: any): any;

                    prependListener(type: any, listener: any): any;

                    prependOnceListener(type: any, listener: any): any;

                    rawListeners(type: any): any;

                    removeAllListeners(type: any, ...args: any[]): any;

                    removeListener(type: any, listener: any): any;

                    setMaxListeners(n: any): any;

                    static EventEmitter: any;

                    static EventEmitterAsyncResource: any;

                    static captureRejectionSymbol: any;

                    static captureRejections: any;

                    static defaultMaxListeners: any;

                    static errorMonitor: any;

                    static getEventListeners: any;

                    static init: any;

                    static kMaxEventTargetListeners: any;

                    static kMaxEventTargetListenersWarned: any;

                    static listenerCount: any;

                    static on: any;

                    static once: any;

                    static setMaxListeners: any;

                    static usingDomains: any;

                }

            }

        }

        namespace Text {
            class EventEmitter {
                constructor(opts: any);

                addListener(type: any, listener: any): any;

                emit(type: any, args: any): any;

                eventNames(): any;

                getMaxListeners(): any;

                listenerCount(type: any): any;

                listeners(type: any): any;

                off(type: any, listener: any): any;

                on(type: any, listener: any): any;

                once(type: any, listener: any): any;

                prependListener(type: any, listener: any): any;

                prependOnceListener(type: any, listener: any): any;

                rawListeners(type: any): any;

                removeAllListeners(type: any, ...args: any[]): any;

                removeListener(type: any, listener: any): any;

                setMaxListeners(n: any): any;

                static EventEmitter: any;

                static captureRejectionSymbol: any;

                static captureRejections: boolean;

                static defaultMaxListeners: number;

                static errorMonitor: any;

                static getEventListeners(emitterOrTarget: any, type: any): any;

                static init(opts: any): void;

                static kMaxEventTargetListeners: any;

                static kMaxEventTargetListenersWarned: any;

                static listenerCount(emitter: any, type: any): any;

                static on(emitter: any, event: any, options: any): any;

                static once(emitter: any, name: any, options: any): any;

                static setMaxListeners(n: any, eventTargets: any): void;

                static usingDomains: boolean;

            }

            class EventEmitterAsyncResource {
                constructor(...args: any[]);

                emit(...args: any[]): void;

                emitDestroy(...args: any[]): void;

                static EventEmitterAsyncResource: any;

                static captureRejectionSymbol: any;

                static captureRejections: boolean;

                static defaultMaxListeners: number;

                static errorMonitor: any;

                static getEventListeners(emitterOrTarget: any, type: any): any;

                static init(opts: any): void;

                static kMaxEventTargetListeners: any;

                static kMaxEventTargetListenersWarned: any;

                static listenerCount(emitter: any, type: any): any;

                static on(emitter: any, event: any, options: any): any;

                static once(emitter: any, name: any, options: any): any;

                static setMaxListeners(n: any, eventTargets: any): void;

                static usingDomains: boolean;

            }

            namespace EventEmitter {
                class EventEmitterAsyncResource {
                    constructor(...args: any[]);

                    emit(...args: any[]): void;

                    emitDestroy(...args: any[]): void;

                    static EventEmitter: any;

                    static EventEmitterAsyncResource: any;

                    static captureRejectionSymbol: any;

                    static captureRejections: any;

                    static defaultMaxListeners: any;

                    static errorMonitor: any;

                    static getEventListeners: any;

                    static init: any;

                    static kMaxEventTargetListeners: any;

                    static kMaxEventTargetListenersWarned: any;

                    static listenerCount: any;

                    static on: any;

                    static once: any;

                    static setMaxListeners: any;

                    static usingDomains: any;

                }

            }

            namespace EventEmitterAsyncResource {
                class EventEmitter {
                    constructor(opts: any);

                    addListener(type: any, listener: any): any;

                    emit(type: any, args: any): any;

                    eventNames(): any;

                    getMaxListeners(): any;

                    listenerCount(type: any): any;

                    listeners(type: any): any;

                    off(type: any, listener: any): any;

                    on(type: any, listener: any): any;

                    once(type: any, listener: any): any;

                    prependListener(type: any, listener: any): any;

                    prependOnceListener(type: any, listener: any): any;

                    rawListeners(type: any): any;

                    removeAllListeners(type: any, ...args: any[]): any;

                    removeListener(type: any, listener: any): any;

                    setMaxListeners(n: any): any;

                    static EventEmitter: any;

                    static EventEmitterAsyncResource: any;

                    static captureRejectionSymbol: any;

                    static captureRejections: any;

                    static defaultMaxListeners: any;

                    static errorMonitor: any;

                    static getEventListeners: any;

                    static init: any;

                    static kMaxEventTargetListeners: any;

                    static kMaxEventTargetListenersWarned: any;

                    static listenerCount: any;

                    static on: any;

                    static once: any;

                    static setMaxListeners: any;

                    static usingDomains: any;

                }

            }

        }

        namespace Toggle {
            class EventEmitter {
                constructor(opts: any);

                addListener(type: any, listener: any): any;

                emit(type: any, args: any): any;

                eventNames(): any;

                getMaxListeners(): any;

                listenerCount(type: any): any;

                listeners(type: any): any;

                off(type: any, listener: any): any;

                on(type: any, listener: any): any;

                once(type: any, listener: any): any;

                prependListener(type: any, listener: any): any;

                prependOnceListener(type: any, listener: any): any;

                rawListeners(type: any): any;

                removeAllListeners(type: any, ...args: any[]): any;

                removeListener(type: any, listener: any): any;

                setMaxListeners(n: any): any;

                static EventEmitter: any;

                static captureRejectionSymbol: any;

                static captureRejections: boolean;

                static defaultMaxListeners: number;

                static errorMonitor: any;

                static getEventListeners(emitterOrTarget: any, type: any): any;

                static init(opts: any): void;

                static kMaxEventTargetListeners: any;

                static kMaxEventTargetListenersWarned: any;

                static listenerCount(emitter: any, type: any): any;

                static on(emitter: any, event: any, options: any): any;

                static once(emitter: any, name: any, options: any): any;

                static setMaxListeners(n: any, eventTargets: any): void;

                static usingDomains: boolean;

            }

            class EventEmitterAsyncResource {
                constructor(...args: any[]);

                emit(...args: any[]): void;

                emitDestroy(...args: any[]): void;

                static EventEmitterAsyncResource: any;

                static captureRejectionSymbol: any;

                static captureRejections: boolean;

                static defaultMaxListeners: number;

                static errorMonitor: any;

                static getEventListeners(emitterOrTarget: any, type: any): any;

                static init(opts: any): void;

                static kMaxEventTargetListeners: any;

                static kMaxEventTargetListenersWarned: any;

                static listenerCount(emitter: any, type: any): any;

                static on(emitter: any, event: any, options: any): any;

                static once(emitter: any, name: any, options: any): any;

                static setMaxListeners(n: any, eventTargets: any): void;

                static usingDomains: boolean;

            }

            namespace EventEmitter {
                class EventEmitterAsyncResource {
                    constructor(...args: any[]);

                    emit(...args: any[]): void;

                    emitDestroy(...args: any[]): void;

                    static EventEmitter: any;

                    static EventEmitterAsyncResource: any;

                    static captureRejectionSymbol: any;

                    static captureRejections: any;

                    static defaultMaxListeners: any;

                    static errorMonitor: any;

                    static getEventListeners: any;

                    static init: any;

                    static kMaxEventTargetListeners: any;

                    static kMaxEventTargetListenersWarned: any;

                    static listenerCount: any;

                    static on: any;

                    static once: any;

                    static setMaxListeners: any;

                    static usingDomains: any;

                }

            }

            namespace EventEmitterAsyncResource {
                class EventEmitter {
                    constructor(opts: any);

                    addListener(type: any, listener: any): any;

                    emit(type: any, args: any): any;

                    eventNames(): any;

                    getMaxListeners(): any;

                    listenerCount(type: any): any;

                    listeners(type: any): any;

                    off(type: any, listener: any): any;

                    on(type: any, listener: any): any;

                    once(type: any, listener: any): any;

                    prependListener(type: any, listener: any): any;

                    prependOnceListener(type: any, listener: any): any;

                    rawListeners(type: any): any;

                    removeAllListeners(type: any, ...args: any[]): any;

                    removeListener(type: any, listener: any): any;

                    setMaxListeners(n: any): any;

                    static EventEmitter: any;

                    static EventEmitterAsyncResource: any;

                    static captureRejectionSymbol: any;

                    static captureRejections: any;

                    static defaultMaxListeners: any;

                    static errorMonitor: any;

                    static getEventListeners: any;

                    static init: any;

                    static kMaxEventTargetListeners: any;

                    static kMaxEventTargetListenersWarned: any;

                    static listenerCount: any;

                    static on: any;

                    static once: any;

                    static setMaxListeners: any;

                    static usingDomains: any;

                }

            }

        }

        namespace autocomplete {
            class EventEmitter {
                constructor(opts: any);

                addListener(type: any, listener: any): any;

                emit(type: any, args: any): any;

                eventNames(): any;

                getMaxListeners(): any;

                listenerCount(type: any): any;

                listeners(type: any): any;

                off(type: any, listener: any): any;

                on(type: any, listener: any): any;

                once(type: any, listener: any): any;

                prependListener(type: any, listener: any): any;

                prependOnceListener(type: any, listener: any): any;

                rawListeners(type: any): any;

                removeAllListeners(type: any, ...args: any[]): any;

                removeListener(type: any, listener: any): any;

                setMaxListeners(n: any): any;

                static EventEmitter: any;

                static captureRejectionSymbol: any;

                static captureRejections: boolean;

                static defaultMaxListeners: number;

                static errorMonitor: any;

                static getEventListeners(emitterOrTarget: any, type: any): any;

                static init(opts: any): void;

                static kMaxEventTargetListeners: any;

                static kMaxEventTargetListenersWarned: any;

                static listenerCount(emitter: any, type: any): any;

                static on(emitter: any, event: any, options: any): any;

                static once(emitter: any, name: any, options: any): any;

                static setMaxListeners(n: any, eventTargets: any): void;

                static usingDomains: boolean;

            }

            class EventEmitterAsyncResource {
                constructor(...args: any[]);

                emit(...args: any[]): void;

                emitDestroy(...args: any[]): void;

                static EventEmitterAsyncResource: any;

                static captureRejectionSymbol: any;

                static captureRejections: boolean;

                static defaultMaxListeners: number;

                static errorMonitor: any;

                static getEventListeners(emitterOrTarget: any, type: any): any;

                static init(opts: any): void;

                static kMaxEventTargetListeners: any;

                static kMaxEventTargetListenersWarned: any;

                static listenerCount(emitter: any, type: any): any;

                static on(emitter: any, event: any, options: any): any;

                static once(emitter: any, name: any, options: any): any;

                static setMaxListeners(n: any, eventTargets: any): void;

                static usingDomains: boolean;

            }

            namespace EventEmitter {
                class EventEmitterAsyncResource {
                    constructor(...args: any[]);

                    emit(...args: any[]): void;

                    emitDestroy(...args: any[]): void;

                    static EventEmitter: any;

                    static EventEmitterAsyncResource: any;

                    static captureRejectionSymbol: any;

                    static captureRejections: any;

                    static defaultMaxListeners: any;

                    static errorMonitor: any;

                    static getEventListeners: any;

                    static init: any;

                    static kMaxEventTargetListeners: any;

                    static kMaxEventTargetListenersWarned: any;

                    static listenerCount: any;

                    static on: any;

                    static once: any;

                    static setMaxListeners: any;

                    static usingDomains: any;

                }

            }

            namespace EventEmitterAsyncResource {
                class EventEmitter {
                    constructor(opts: any);

                    addListener(type: any, listener: any): any;

                    emit(type: any, args: any): any;

                    eventNames(): any;

                    getMaxListeners(): any;

                    listenerCount(type: any): any;

                    listeners(type: any): any;

                    off(type: any, listener: any): any;

                    on(type: any, listener: any): any;

                    once(type: any, listener: any): any;

                    prependListener(type: any, listener: any): any;

                    prependOnceListener(type: any, listener: any): any;

                    rawListeners(type: any): any;

                    removeAllListeners(type: any, ...args: any[]): any;

                    removeListener(type: any, listener: any): any;

                    setMaxListeners(n: any): any;

                    static EventEmitter: any;

                    static EventEmitterAsyncResource: any;

                    static captureRejectionSymbol: any;

                    static captureRejections: any;

                    static defaultMaxListeners: any;

                    static errorMonitor: any;

                    static getEventListeners: any;

                    static init: any;

                    static kMaxEventTargetListeners: any;

                    static kMaxEventTargetListenersWarned: any;

                    static listenerCount: any;

                    static on: any;

                    static once: any;

                    static setMaxListeners: any;

                    static usingDomains: any;

                }

            }

        }

        namespace basicauth {
            class EventEmitter {
                constructor(opts: any);

                addListener(type: any, listener: any): any;

                emit(type: any, args: any): any;

                eventNames(): any;

                getMaxListeners(): any;

                listenerCount(type: any): any;

                listeners(type: any): any;

                off(type: any, listener: any): any;

                on(type: any, listener: any): any;

                once(type: any, listener: any): any;

                prependListener(type: any, listener: any): any;

                prependOnceListener(type: any, listener: any): any;

                rawListeners(type: any): any;

                removeAllListeners(type: any, ...args: any[]): any;

                removeListener(type: any, listener: any): any;

                setMaxListeners(n: any): any;

                static EventEmitter: any;

                static captureRejectionSymbol: any;

                static captureRejections: boolean;

                static defaultMaxListeners: number;

                static errorMonitor: any;

                static getEventListeners(emitterOrTarget: any, type: any): any;

                static init(opts: any): void;

                static kMaxEventTargetListeners: any;

                static kMaxEventTargetListenersWarned: any;

                static listenerCount(emitter: any, type: any): any;

                static on(emitter: any, event: any, options: any): any;

                static once(emitter: any, name: any, options: any): any;

                static setMaxListeners(n: any, eventTargets: any): void;

                static usingDomains: boolean;

            }

            class EventEmitterAsyncResource {
                constructor(...args: any[]);

                emit(...args: any[]): void;

                emitDestroy(...args: any[]): void;

                static EventEmitterAsyncResource: any;

                static captureRejectionSymbol: any;

                static captureRejections: boolean;

                static defaultMaxListeners: number;

                static errorMonitor: any;

                static getEventListeners(emitterOrTarget: any, type: any): any;

                static init(opts: any): void;

                static kMaxEventTargetListeners: any;

                static kMaxEventTargetListenersWarned: any;

                static listenerCount(emitter: any, type: any): any;

                static on(emitter: any, event: any, options: any): any;

                static once(emitter: any, name: any, options: any): any;

                static setMaxListeners(n: any, eventTargets: any): void;

                static usingDomains: boolean;

            }

            const captureRejectionSymbol: any;

            const captureRejections: boolean;

            const defaultMaxListeners: number;

            const errorMonitor: any;

            const kMaxEventTargetListeners: any;

            const kMaxEventTargetListenersWarned: any;

            const usingDomains: boolean;

            function create(...args: any[]): void;

            function getEventListeners(emitterOrTarget: any, type: any): any;

            function init(opts: any): void;

            function listenerCount(emitter: any, type: any): any;

            function on(emitter: any, event: any, options: any): any;

            function once(emitter: any, name: any, options: any): any;

            function prompt(options: any): void;

            function setMaxListeners(n: any, eventTargets: any): void;

            namespace EventEmitter {
                class EventEmitterAsyncResource {
                    constructor(...args: any[]);

                    emit(...args: any[]): void;

                    emitDestroy(...args: any[]): void;

                    static EventEmitter: any;

                    static EventEmitterAsyncResource: any;

                    static captureRejectionSymbol: any;

                    static captureRejections: any;

                    static defaultMaxListeners: any;

                    static errorMonitor: any;

                    static getEventListeners: any;

                    static init: any;

                    static kMaxEventTargetListeners: any;

                    static kMaxEventTargetListenersWarned: any;

                    static listenerCount: any;

                    static on: any;

                    static once: any;

                    static setMaxListeners: any;

                    static usingDomains: any;

                }

            }

            namespace EventEmitterAsyncResource {
                class EventEmitter {
                    constructor(opts: any);

                    addListener(type: any, listener: any): any;

                    emit(type: any, args: any): any;

                    eventNames(): any;

                    getMaxListeners(): any;

                    listenerCount(type: any): any;

                    listeners(type: any): any;

                    off(type: any, listener: any): any;

                    on(type: any, listener: any): any;

                    once(type: any, listener: any): any;

                    prependListener(type: any, listener: any): any;

                    prependOnceListener(type: any, listener: any): any;

                    rawListeners(type: any): any;

                    removeAllListeners(type: any, ...args: any[]): any;

                    removeListener(type: any, listener: any): any;

                    setMaxListeners(n: any): any;

                    static EventEmitter: any;

                    static EventEmitterAsyncResource: any;

                    static captureRejectionSymbol: any;

                    static captureRejections: any;

                    static defaultMaxListeners: any;

                    static errorMonitor: any;

                    static getEventListeners: any;

                    static init: any;

                    static kMaxEventTargetListeners: any;

                    static kMaxEventTargetListenersWarned: any;

                    static listenerCount: any;

                    static on: any;

                    static once: any;

                    static setMaxListeners: any;

                    static usingDomains: any;

                }

            }

        }

        namespace confirm {
            class EventEmitter {
                constructor(opts: any);

                addListener(type: any, listener: any): any;

                emit(type: any, args: any): any;

                eventNames(): any;

                getMaxListeners(): any;

                listenerCount(type: any): any;

                listeners(type: any): any;

                off(type: any, listener: any): any;

                on(type: any, listener: any): any;

                once(type: any, listener: any): any;

                prependListener(type: any, listener: any): any;

                prependOnceListener(type: any, listener: any): any;

                rawListeners(type: any): any;

                removeAllListeners(type: any, ...args: any[]): any;

                removeListener(type: any, listener: any): any;

                setMaxListeners(n: any): any;

                static EventEmitter: any;

                static captureRejectionSymbol: any;

                static captureRejections: boolean;

                static defaultMaxListeners: number;

                static errorMonitor: any;

                static getEventListeners(emitterOrTarget: any, type: any): any;

                static init(opts: any): void;

                static kMaxEventTargetListeners: any;

                static kMaxEventTargetListenersWarned: any;

                static listenerCount(emitter: any, type: any): any;

                static on(emitter: any, event: any, options: any): any;

                static once(emitter: any, name: any, options: any): any;

                static setMaxListeners(n: any, eventTargets: any): void;

                static usingDomains: boolean;

            }

            class EventEmitterAsyncResource {
                constructor(...args: any[]);

                emit(...args: any[]): void;

                emitDestroy(...args: any[]): void;

                static EventEmitterAsyncResource: any;

                static captureRejectionSymbol: any;

                static captureRejections: boolean;

                static defaultMaxListeners: number;

                static errorMonitor: any;

                static getEventListeners(emitterOrTarget: any, type: any): any;

                static init(opts: any): void;

                static kMaxEventTargetListeners: any;

                static kMaxEventTargetListenersWarned: any;

                static listenerCount(emitter: any, type: any): any;

                static on(emitter: any, event: any, options: any): any;

                static once(emitter: any, name: any, options: any): any;

                static setMaxListeners(n: any, eventTargets: any): void;

                static usingDomains: boolean;

            }

            const captureRejectionSymbol: any;

            const captureRejections: boolean;

            const defaultMaxListeners: number;

            const errorMonitor: any;

            const kMaxEventTargetListeners: any;

            const kMaxEventTargetListenersWarned: any;

            const usingDomains: boolean;

            function getEventListeners(emitterOrTarget: any, type: any): any;

            function init(opts: any): void;

            function listenerCount(emitter: any, type: any): any;

            function on(emitter: any, event: any, options: any): any;

            function once(emitter: any, name: any, options: any): any;

            function prompt(options: any): void;

            function setMaxListeners(n: any, eventTargets: any): void;

            namespace EventEmitter {
                class EventEmitterAsyncResource {
                    constructor(...args: any[]);

                    emit(...args: any[]): void;

                    emitDestroy(...args: any[]): void;

                    static EventEmitter: any;

                    static EventEmitterAsyncResource: any;

                    static captureRejectionSymbol: any;

                    static captureRejections: any;

                    static defaultMaxListeners: any;

                    static errorMonitor: any;

                    static getEventListeners: any;

                    static init: any;

                    static kMaxEventTargetListeners: any;

                    static kMaxEventTargetListenersWarned: any;

                    static listenerCount: any;

                    static on: any;

                    static once: any;

                    static setMaxListeners: any;

                    static usingDomains: any;

                }

            }

            namespace EventEmitterAsyncResource {
                class EventEmitter {
                    constructor(opts: any);

                    addListener(type: any, listener: any): any;

                    emit(type: any, args: any): any;

                    eventNames(): any;

                    getMaxListeners(): any;

                    listenerCount(type: any): any;

                    listeners(type: any): any;

                    off(type: any, listener: any): any;

                    on(type: any, listener: any): any;

                    once(type: any, listener: any): any;

                    prependListener(type: any, listener: any): any;

                    prependOnceListener(type: any, listener: any): any;

                    rawListeners(type: any): any;

                    removeAllListeners(type: any, ...args: any[]): any;

                    removeListener(type: any, listener: any): any;

                    setMaxListeners(n: any): any;

                    static EventEmitter: any;

                    static EventEmitterAsyncResource: any;

                    static captureRejectionSymbol: any;

                    static captureRejections: any;

                    static defaultMaxListeners: any;

                    static errorMonitor: any;

                    static getEventListeners: any;

                    static init: any;

                    static kMaxEventTargetListeners: any;

                    static kMaxEventTargetListenersWarned: any;

                    static listenerCount: any;

                    static on: any;

                    static once: any;

                    static setMaxListeners: any;

                    static usingDomains: any;

                }

            }

        }

        namespace editable {
            class EventEmitter {
                constructor(opts: any);

                addListener(type: any, listener: any): any;

                emit(type: any, args: any): any;

                eventNames(): any;

                getMaxListeners(): any;

                listenerCount(type: any): any;

                listeners(type: any): any;

                off(type: any, listener: any): any;

                on(type: any, listener: any): any;

                once(type: any, listener: any): any;

                prependListener(type: any, listener: any): any;

                prependOnceListener(type: any, listener: any): any;

                rawListeners(type: any): any;

                removeAllListeners(type: any, ...args: any[]): any;

                removeListener(type: any, listener: any): any;

                setMaxListeners(n: any): any;

                static EventEmitter: any;

                static captureRejectionSymbol: any;

                static captureRejections: boolean;

                static defaultMaxListeners: number;

                static errorMonitor: any;

                static getEventListeners(emitterOrTarget: any, type: any): any;

                static init(opts: any): void;

                static kMaxEventTargetListeners: any;

                static kMaxEventTargetListenersWarned: any;

                static listenerCount(emitter: any, type: any): any;

                static on(emitter: any, event: any, options: any): any;

                static once(emitter: any, name: any, options: any): any;

                static setMaxListeners(n: any, eventTargets: any): void;

                static usingDomains: boolean;

            }

            class EventEmitterAsyncResource {
                constructor(...args: any[]);

                emit(...args: any[]): void;

                emitDestroy(...args: any[]): void;

                static EventEmitterAsyncResource: any;

                static captureRejectionSymbol: any;

                static captureRejections: boolean;

                static defaultMaxListeners: number;

                static errorMonitor: any;

                static getEventListeners(emitterOrTarget: any, type: any): any;

                static init(opts: any): void;

                static kMaxEventTargetListeners: any;

                static kMaxEventTargetListenersWarned: any;

                static listenerCount(emitter: any, type: any): any;

                static on(emitter: any, event: any, options: any): any;

                static once(emitter: any, name: any, options: any): any;

                static setMaxListeners(n: any, eventTargets: any): void;

                static usingDomains: boolean;

            }

            namespace EventEmitter {
                class EventEmitterAsyncResource {
                    constructor(...args: any[]);

                    emit(...args: any[]): void;

                    emitDestroy(...args: any[]): void;

                    static EventEmitter: any;

                    static EventEmitterAsyncResource: any;

                    static captureRejectionSymbol: any;

                    static captureRejections: any;

                    static defaultMaxListeners: any;

                    static errorMonitor: any;

                    static getEventListeners: any;

                    static init: any;

                    static kMaxEventTargetListeners: any;

                    static kMaxEventTargetListenersWarned: any;

                    static listenerCount: any;

                    static on: any;

                    static once: any;

                    static setMaxListeners: any;

                    static usingDomains: any;

                }

            }

            namespace EventEmitterAsyncResource {
                class EventEmitter {
                    constructor(opts: any);

                    addListener(type: any, listener: any): any;

                    emit(type: any, args: any): any;

                    eventNames(): any;

                    getMaxListeners(): any;

                    listenerCount(type: any): any;

                    listeners(type: any): any;

                    off(type: any, listener: any): any;

                    on(type: any, listener: any): any;

                    once(type: any, listener: any): any;

                    prependListener(type: any, listener: any): any;

                    prependOnceListener(type: any, listener: any): any;

                    rawListeners(type: any): any;

                    removeAllListeners(type: any, ...args: any[]): any;

                    removeListener(type: any, listener: any): any;

                    setMaxListeners(n: any): any;

                    static EventEmitter: any;

                    static EventEmitterAsyncResource: any;

                    static captureRejectionSymbol: any;

                    static captureRejections: any;

                    static defaultMaxListeners: any;

                    static errorMonitor: any;

                    static getEventListeners: any;

                    static init: any;

                    static kMaxEventTargetListeners: any;

                    static kMaxEventTargetListenersWarned: any;

                    static listenerCount: any;

                    static on: any;

                    static once: any;

                    static setMaxListeners: any;

                    static usingDomains: any;

                }

            }

        }

        namespace form {
            class EventEmitter {
                constructor(opts: any);

                addListener(type: any, listener: any): any;

                emit(type: any, args: any): any;

                eventNames(): any;

                getMaxListeners(): any;

                listenerCount(type: any): any;

                listeners(type: any): any;

                off(type: any, listener: any): any;

                on(type: any, listener: any): any;

                once(type: any, listener: any): any;

                prependListener(type: any, listener: any): any;

                prependOnceListener(type: any, listener: any): any;

                rawListeners(type: any): any;

                removeAllListeners(type: any, ...args: any[]): any;

                removeListener(type: any, listener: any): any;

                setMaxListeners(n: any): any;

                static EventEmitter: any;

                static captureRejectionSymbol: any;

                static captureRejections: boolean;

                static defaultMaxListeners: number;

                static errorMonitor: any;

                static getEventListeners(emitterOrTarget: any, type: any): any;

                static init(opts: any): void;

                static kMaxEventTargetListeners: any;

                static kMaxEventTargetListenersWarned: any;

                static listenerCount(emitter: any, type: any): any;

                static on(emitter: any, event: any, options: any): any;

                static once(emitter: any, name: any, options: any): any;

                static setMaxListeners(n: any, eventTargets: any): void;

                static usingDomains: boolean;

            }

            class EventEmitterAsyncResource {
                constructor(...args: any[]);

                emit(...args: any[]): void;

                emitDestroy(...args: any[]): void;

                static EventEmitterAsyncResource: any;

                static captureRejectionSymbol: any;

                static captureRejections: boolean;

                static defaultMaxListeners: number;

                static errorMonitor: any;

                static getEventListeners(emitterOrTarget: any, type: any): any;

                static init(opts: any): void;

                static kMaxEventTargetListeners: any;

                static kMaxEventTargetListenersWarned: any;

                static listenerCount(emitter: any, type: any): any;

                static on(emitter: any, event: any, options: any): any;

                static once(emitter: any, name: any, options: any): any;

                static setMaxListeners(n: any, eventTargets: any): void;

                static usingDomains: boolean;

            }

            namespace EventEmitter {
                class EventEmitterAsyncResource {
                    constructor(...args: any[]);

                    emit(...args: any[]): void;

                    emitDestroy(...args: any[]): void;

                    static EventEmitter: any;

                    static EventEmitterAsyncResource: any;

                    static captureRejectionSymbol: any;

                    static captureRejections: any;

                    static defaultMaxListeners: any;

                    static errorMonitor: any;

                    static getEventListeners: any;

                    static init: any;

                    static kMaxEventTargetListeners: any;

                    static kMaxEventTargetListenersWarned: any;

                    static listenerCount: any;

                    static on: any;

                    static once: any;

                    static setMaxListeners: any;

                    static usingDomains: any;

                }

            }

            namespace EventEmitterAsyncResource {
                class EventEmitter {
                    constructor(opts: any);

                    addListener(type: any, listener: any): any;

                    emit(type: any, args: any): any;

                    eventNames(): any;

                    getMaxListeners(): any;

                    listenerCount(type: any): any;

                    listeners(type: any): any;

                    off(type: any, listener: any): any;

                    on(type: any, listener: any): any;

                    once(type: any, listener: any): any;

                    prependListener(type: any, listener: any): any;

                    prependOnceListener(type: any, listener: any): any;

                    rawListeners(type: any): any;

                    removeAllListeners(type: any, ...args: any[]): any;

                    removeListener(type: any, listener: any): any;

                    setMaxListeners(n: any): any;

                    static EventEmitter: any;

                    static EventEmitterAsyncResource: any;

                    static captureRejectionSymbol: any;

                    static captureRejections: any;

                    static defaultMaxListeners: any;

                    static errorMonitor: any;

                    static getEventListeners: any;

                    static init: any;

                    static kMaxEventTargetListeners: any;

                    static kMaxEventTargetListenersWarned: any;

                    static listenerCount: any;

                    static on: any;

                    static once: any;

                    static setMaxListeners: any;

                    static usingDomains: any;

                }

            }

        }

        namespace input {
            class EventEmitter {
                constructor(opts: any);

                addListener(type: any, listener: any): any;

                emit(type: any, args: any): any;

                eventNames(): any;

                getMaxListeners(): any;

                listenerCount(type: any): any;

                listeners(type: any): any;

                off(type: any, listener: any): any;

                on(type: any, listener: any): any;

                once(type: any, listener: any): any;

                prependListener(type: any, listener: any): any;

                prependOnceListener(type: any, listener: any): any;

                rawListeners(type: any): any;

                removeAllListeners(type: any, ...args: any[]): any;

                removeListener(type: any, listener: any): any;

                setMaxListeners(n: any): any;

                static EventEmitter: any;

                static captureRejectionSymbol: any;

                static captureRejections: boolean;

                static defaultMaxListeners: number;

                static errorMonitor: any;

                static getEventListeners(emitterOrTarget: any, type: any): any;

                static init(opts: any): void;

                static kMaxEventTargetListeners: any;

                static kMaxEventTargetListenersWarned: any;

                static listenerCount(emitter: any, type: any): any;

                static on(emitter: any, event: any, options: any): any;

                static once(emitter: any, name: any, options: any): any;

                static setMaxListeners(n: any, eventTargets: any): void;

                static usingDomains: boolean;

            }

            class EventEmitterAsyncResource {
                constructor(...args: any[]);

                emit(...args: any[]): void;

                emitDestroy(...args: any[]): void;

                static EventEmitterAsyncResource: any;

                static captureRejectionSymbol: any;

                static captureRejections: boolean;

                static defaultMaxListeners: number;

                static errorMonitor: any;

                static getEventListeners(emitterOrTarget: any, type: any): any;

                static init(opts: any): void;

                static kMaxEventTargetListeners: any;

                static kMaxEventTargetListenersWarned: any;

                static listenerCount(emitter: any, type: any): any;

                static on(emitter: any, event: any, options: any): any;

                static once(emitter: any, name: any, options: any): any;

                static setMaxListeners(n: any, eventTargets: any): void;

                static usingDomains: boolean;

            }

            namespace EventEmitter {
                class EventEmitterAsyncResource {
                    constructor(...args: any[]);

                    emit(...args: any[]): void;

                    emitDestroy(...args: any[]): void;

                    static EventEmitter: any;

                    static EventEmitterAsyncResource: any;

                    static captureRejectionSymbol: any;

                    static captureRejections: any;

                    static defaultMaxListeners: any;

                    static errorMonitor: any;

                    static getEventListeners: any;

                    static init: any;

                    static kMaxEventTargetListeners: any;

                    static kMaxEventTargetListenersWarned: any;

                    static listenerCount: any;

                    static on: any;

                    static once: any;

                    static setMaxListeners: any;

                    static usingDomains: any;

                }

            }

            namespace EventEmitterAsyncResource {
                class EventEmitter {
                    constructor(opts: any);

                    addListener(type: any, listener: any): any;

                    emit(type: any, args: any): any;

                    eventNames(): any;

                    getMaxListeners(): any;

                    listenerCount(type: any): any;

                    listeners(type: any): any;

                    off(type: any, listener: any): any;

                    on(type: any, listener: any): any;

                    once(type: any, listener: any): any;

                    prependListener(type: any, listener: any): any;

                    prependOnceListener(type: any, listener: any): any;

                    rawListeners(type: any): any;

                    removeAllListeners(type: any, ...args: any[]): any;

                    removeListener(type: any, listener: any): any;

                    setMaxListeners(n: any): any;

                    static EventEmitter: any;

                    static EventEmitterAsyncResource: any;

                    static captureRejectionSymbol: any;

                    static captureRejections: any;

                    static defaultMaxListeners: any;

                    static errorMonitor: any;

                    static getEventListeners: any;

                    static init: any;

                    static kMaxEventTargetListeners: any;

                    static kMaxEventTargetListenersWarned: any;

                    static listenerCount: any;

                    static on: any;

                    static once: any;

                    static setMaxListeners: any;

                    static usingDomains: any;

                }

            }

        }

        namespace invisible {
            class EventEmitter {
                constructor(opts: any);

                addListener(type: any, listener: any): any;

                emit(type: any, args: any): any;

                eventNames(): any;

                getMaxListeners(): any;

                listenerCount(type: any): any;

                listeners(type: any): any;

                off(type: any, listener: any): any;

                on(type: any, listener: any): any;

                once(type: any, listener: any): any;

                prependListener(type: any, listener: any): any;

                prependOnceListener(type: any, listener: any): any;

                rawListeners(type: any): any;

                removeAllListeners(type: any, ...args: any[]): any;

                removeListener(type: any, listener: any): any;

                setMaxListeners(n: any): any;

                static EventEmitter: any;

                static captureRejectionSymbol: any;

                static captureRejections: boolean;

                static defaultMaxListeners: number;

                static errorMonitor: any;

                static getEventListeners(emitterOrTarget: any, type: any): any;

                static init(opts: any): void;

                static kMaxEventTargetListeners: any;

                static kMaxEventTargetListenersWarned: any;

                static listenerCount(emitter: any, type: any): any;

                static on(emitter: any, event: any, options: any): any;

                static once(emitter: any, name: any, options: any): any;

                static setMaxListeners(n: any, eventTargets: any): void;

                static usingDomains: boolean;

            }

            class EventEmitterAsyncResource {
                constructor(...args: any[]);

                emit(...args: any[]): void;

                emitDestroy(...args: any[]): void;

                static EventEmitterAsyncResource: any;

                static captureRejectionSymbol: any;

                static captureRejections: boolean;

                static defaultMaxListeners: number;

                static errorMonitor: any;

                static getEventListeners(emitterOrTarget: any, type: any): any;

                static init(opts: any): void;

                static kMaxEventTargetListeners: any;

                static kMaxEventTargetListenersWarned: any;

                static listenerCount(emitter: any, type: any): any;

                static on(emitter: any, event: any, options: any): any;

                static once(emitter: any, name: any, options: any): any;

                static setMaxListeners(n: any, eventTargets: any): void;

                static usingDomains: boolean;

            }

            namespace EventEmitter {
                class EventEmitterAsyncResource {
                    constructor(...args: any[]);

                    emit(...args: any[]): void;

                    emitDestroy(...args: any[]): void;

                    static EventEmitter: any;

                    static EventEmitterAsyncResource: any;

                    static captureRejectionSymbol: any;

                    static captureRejections: any;

                    static defaultMaxListeners: any;

                    static errorMonitor: any;

                    static getEventListeners: any;

                    static init: any;

                    static kMaxEventTargetListeners: any;

                    static kMaxEventTargetListenersWarned: any;

                    static listenerCount: any;

                    static on: any;

                    static once: any;

                    static setMaxListeners: any;

                    static usingDomains: any;

                }

            }

            namespace EventEmitterAsyncResource {
                class EventEmitter {
                    constructor(opts: any);

                    addListener(type: any, listener: any): any;

                    emit(type: any, args: any): any;

                    eventNames(): any;

                    getMaxListeners(): any;

                    listenerCount(type: any): any;

                    listeners(type: any): any;

                    off(type: any, listener: any): any;

                    on(type: any, listener: any): any;

                    once(type: any, listener: any): any;

                    prependListener(type: any, listener: any): any;

                    prependOnceListener(type: any, listener: any): any;

                    rawListeners(type: any): any;

                    removeAllListeners(type: any, ...args: any[]): any;

                    removeListener(type: any, listener: any): any;

                    setMaxListeners(n: any): any;

                    static EventEmitter: any;

                    static EventEmitterAsyncResource: any;

                    static captureRejectionSymbol: any;

                    static captureRejections: any;

                    static defaultMaxListeners: any;

                    static errorMonitor: any;

                    static getEventListeners: any;

                    static init: any;

                    static kMaxEventTargetListeners: any;

                    static kMaxEventTargetListenersWarned: any;

                    static listenerCount: any;

                    static on: any;

                    static once: any;

                    static setMaxListeners: any;

                    static usingDomains: any;

                }

            }

        }

        namespace list {
            class EventEmitter {
                constructor(opts: any);

                addListener(type: any, listener: any): any;

                emit(type: any, args: any): any;

                eventNames(): any;

                getMaxListeners(): any;

                listenerCount(type: any): any;

                listeners(type: any): any;

                off(type: any, listener: any): any;

                on(type: any, listener: any): any;

                once(type: any, listener: any): any;

                prependListener(type: any, listener: any): any;

                prependOnceListener(type: any, listener: any): any;

                rawListeners(type: any): any;

                removeAllListeners(type: any, ...args: any[]): any;

                removeListener(type: any, listener: any): any;

                setMaxListeners(n: any): any;

                static EventEmitter: any;

                static captureRejectionSymbol: any;

                static captureRejections: boolean;

                static defaultMaxListeners: number;

                static errorMonitor: any;

                static getEventListeners(emitterOrTarget: any, type: any): any;

                static init(opts: any): void;

                static kMaxEventTargetListeners: any;

                static kMaxEventTargetListenersWarned: any;

                static listenerCount(emitter: any, type: any): any;

                static on(emitter: any, event: any, options: any): any;

                static once(emitter: any, name: any, options: any): any;

                static setMaxListeners(n: any, eventTargets: any): void;

                static usingDomains: boolean;

            }

            class EventEmitterAsyncResource {
                constructor(...args: any[]);

                emit(...args: any[]): void;

                emitDestroy(...args: any[]): void;

                static EventEmitterAsyncResource: any;

                static captureRejectionSymbol: any;

                static captureRejections: boolean;

                static defaultMaxListeners: number;

                static errorMonitor: any;

                static getEventListeners(emitterOrTarget: any, type: any): any;

                static init(opts: any): void;

                static kMaxEventTargetListeners: any;

                static kMaxEventTargetListenersWarned: any;

                static listenerCount(emitter: any, type: any): any;

                static on(emitter: any, event: any, options: any): any;

                static once(emitter: any, name: any, options: any): any;

                static setMaxListeners(n: any, eventTargets: any): void;

                static usingDomains: boolean;

            }

            namespace EventEmitter {
                class EventEmitterAsyncResource {
                    constructor(...args: any[]);

                    emit(...args: any[]): void;

                    emitDestroy(...args: any[]): void;

                    static EventEmitter: any;

                    static EventEmitterAsyncResource: any;

                    static captureRejectionSymbol: any;

                    static captureRejections: any;

                    static defaultMaxListeners: any;

                    static errorMonitor: any;

                    static getEventListeners: any;

                    static init: any;

                    static kMaxEventTargetListeners: any;

                    static kMaxEventTargetListenersWarned: any;

                    static listenerCount: any;

                    static on: any;

                    static once: any;

                    static setMaxListeners: any;

                    static usingDomains: any;

                }

            }

            namespace EventEmitterAsyncResource {
                class EventEmitter {
                    constructor(opts: any);

                    addListener(type: any, listener: any): any;

                    emit(type: any, args: any): any;

                    eventNames(): any;

                    getMaxListeners(): any;

                    listenerCount(type: any): any;

                    listeners(type: any): any;

                    off(type: any, listener: any): any;

                    on(type: any, listener: any): any;

                    once(type: any, listener: any): any;

                    prependListener(type: any, listener: any): any;

                    prependOnceListener(type: any, listener: any): any;

                    rawListeners(type: any): any;

                    removeAllListeners(type: any, ...args: any[]): any;

                    removeListener(type: any, listener: any): any;

                    setMaxListeners(n: any): any;

                    static EventEmitter: any;

                    static EventEmitterAsyncResource: any;

                    static captureRejectionSymbol: any;

                    static captureRejections: any;

                    static defaultMaxListeners: any;

                    static errorMonitor: any;

                    static getEventListeners: any;

                    static init: any;

                    static kMaxEventTargetListeners: any;

                    static kMaxEventTargetListenersWarned: any;

                    static listenerCount: any;

                    static on: any;

                    static once: any;

                    static setMaxListeners: any;

                    static usingDomains: any;

                }

            }

        }

        namespace multiselect {
            class EventEmitter {
                constructor(opts: any);

                addListener(type: any, listener: any): any;

                emit(type: any, args: any): any;

                eventNames(): any;

                getMaxListeners(): any;

                listenerCount(type: any): any;

                listeners(type: any): any;

                off(type: any, listener: any): any;

                on(type: any, listener: any): any;

                once(type: any, listener: any): any;

                prependListener(type: any, listener: any): any;

                prependOnceListener(type: any, listener: any): any;

                rawListeners(type: any): any;

                removeAllListeners(type: any, ...args: any[]): any;

                removeListener(type: any, listener: any): any;

                setMaxListeners(n: any): any;

                static EventEmitter: any;

                static captureRejectionSymbol: any;

                static captureRejections: boolean;

                static defaultMaxListeners: number;

                static errorMonitor: any;

                static getEventListeners(emitterOrTarget: any, type: any): any;

                static init(opts: any): void;

                static kMaxEventTargetListeners: any;

                static kMaxEventTargetListenersWarned: any;

                static listenerCount(emitter: any, type: any): any;

                static on(emitter: any, event: any, options: any): any;

                static once(emitter: any, name: any, options: any): any;

                static setMaxListeners(n: any, eventTargets: any): void;

                static usingDomains: boolean;

            }

            class EventEmitterAsyncResource {
                constructor(...args: any[]);

                emit(...args: any[]): void;

                emitDestroy(...args: any[]): void;

                static EventEmitterAsyncResource: any;

                static captureRejectionSymbol: any;

                static captureRejections: boolean;

                static defaultMaxListeners: number;

                static errorMonitor: any;

                static getEventListeners(emitterOrTarget: any, type: any): any;

                static init(opts: any): void;

                static kMaxEventTargetListeners: any;

                static kMaxEventTargetListenersWarned: any;

                static listenerCount(emitter: any, type: any): any;

                static on(emitter: any, event: any, options: any): any;

                static once(emitter: any, name: any, options: any): any;

                static setMaxListeners(n: any, eventTargets: any): void;

                static usingDomains: boolean;

            }

            const captureRejectionSymbol: any;

            const captureRejections: boolean;

            const defaultMaxListeners: number;

            const errorMonitor: any;

            const kMaxEventTargetListeners: any;

            const kMaxEventTargetListenersWarned: any;

            const usingDomains: boolean;

            function getEventListeners(emitterOrTarget: any, type: any): any;

            function init(opts: any): void;

            function listenerCount(emitter: any, type: any): any;

            function on(emitter: any, event: any, options: any): any;

            function once(emitter: any, name: any, options: any): any;

            function prompt(options: any): void;

            function setMaxListeners(n: any, eventTargets: any): void;

            namespace EventEmitter {
                class EventEmitterAsyncResource {
                    constructor(...args: any[]);

                    emit(...args: any[]): void;

                    emitDestroy(...args: any[]): void;

                    static EventEmitter: any;

                    static EventEmitterAsyncResource: any;

                    static captureRejectionSymbol: any;

                    static captureRejections: any;

                    static defaultMaxListeners: any;

                    static errorMonitor: any;

                    static getEventListeners: any;

                    static init: any;

                    static kMaxEventTargetListeners: any;

                    static kMaxEventTargetListenersWarned: any;

                    static listenerCount: any;

                    static on: any;

                    static once: any;

                    static setMaxListeners: any;

                    static usingDomains: any;

                }

            }

            namespace EventEmitterAsyncResource {
                class EventEmitter {
                    constructor(opts: any);

                    addListener(type: any, listener: any): any;

                    emit(type: any, args: any): any;

                    eventNames(): any;

                    getMaxListeners(): any;

                    listenerCount(type: any): any;

                    listeners(type: any): any;

                    off(type: any, listener: any): any;

                    on(type: any, listener: any): any;

                    once(type: any, listener: any): any;

                    prependListener(type: any, listener: any): any;

                    prependOnceListener(type: any, listener: any): any;

                    rawListeners(type: any): any;

                    removeAllListeners(type: any, ...args: any[]): any;

                    removeListener(type: any, listener: any): any;

                    setMaxListeners(n: any): any;

                    static EventEmitter: any;

                    static EventEmitterAsyncResource: any;

                    static captureRejectionSymbol: any;

                    static captureRejections: any;

                    static defaultMaxListeners: any;

                    static errorMonitor: any;

                    static getEventListeners: any;

                    static init: any;

                    static kMaxEventTargetListeners: any;

                    static kMaxEventTargetListenersWarned: any;

                    static listenerCount: any;

                    static on: any;

                    static once: any;

                    static setMaxListeners: any;

                    static usingDomains: any;

                }

            }

        }

        namespace numeral {
            class EventEmitter {
                constructor(opts: any);

                addListener(type: any, listener: any): any;

                emit(type: any, args: any): any;

                eventNames(): any;

                getMaxListeners(): any;

                listenerCount(type: any): any;

                listeners(type: any): any;

                off(type: any, listener: any): any;

                on(type: any, listener: any): any;

                once(type: any, listener: any): any;

                prependListener(type: any, listener: any): any;

                prependOnceListener(type: any, listener: any): any;

                rawListeners(type: any): any;

                removeAllListeners(type: any, ...args: any[]): any;

                removeListener(type: any, listener: any): any;

                setMaxListeners(n: any): any;

                static EventEmitter: any;

                static captureRejectionSymbol: any;

                static captureRejections: boolean;

                static defaultMaxListeners: number;

                static errorMonitor: any;

                static getEventListeners(emitterOrTarget: any, type: any): any;

                static init(opts: any): void;

                static kMaxEventTargetListeners: any;

                static kMaxEventTargetListenersWarned: any;

                static listenerCount(emitter: any, type: any): any;

                static on(emitter: any, event: any, options: any): any;

                static once(emitter: any, name: any, options: any): any;

                static setMaxListeners(n: any, eventTargets: any): void;

                static usingDomains: boolean;

            }

            class EventEmitterAsyncResource {
                constructor(...args: any[]);

                emit(...args: any[]): void;

                emitDestroy(...args: any[]): void;

                static EventEmitterAsyncResource: any;

                static captureRejectionSymbol: any;

                static captureRejections: boolean;

                static defaultMaxListeners: number;

                static errorMonitor: any;

                static getEventListeners(emitterOrTarget: any, type: any): any;

                static init(opts: any): void;

                static kMaxEventTargetListeners: any;

                static kMaxEventTargetListenersWarned: any;

                static listenerCount(emitter: any, type: any): any;

                static on(emitter: any, event: any, options: any): any;

                static once(emitter: any, name: any, options: any): any;

                static setMaxListeners(n: any, eventTargets: any): void;

                static usingDomains: boolean;

            }

            namespace EventEmitter {
                class EventEmitterAsyncResource {
                    constructor(...args: any[]);

                    emit(...args: any[]): void;

                    emitDestroy(...args: any[]): void;

                    static EventEmitter: any;

                    static EventEmitterAsyncResource: any;

                    static captureRejectionSymbol: any;

                    static captureRejections: any;

                    static defaultMaxListeners: any;

                    static errorMonitor: any;

                    static getEventListeners: any;

                    static init: any;

                    static kMaxEventTargetListeners: any;

                    static kMaxEventTargetListenersWarned: any;

                    static listenerCount: any;

                    static on: any;

                    static once: any;

                    static setMaxListeners: any;

                    static usingDomains: any;

                }

            }

            namespace EventEmitterAsyncResource {
                class EventEmitter {
                    constructor(opts: any);

                    addListener(type: any, listener: any): any;

                    emit(type: any, args: any): any;

                    eventNames(): any;

                    getMaxListeners(): any;

                    listenerCount(type: any): any;

                    listeners(type: any): any;

                    off(type: any, listener: any): any;

                    on(type: any, listener: any): any;

                    once(type: any, listener: any): any;

                    prependListener(type: any, listener: any): any;

                    prependOnceListener(type: any, listener: any): any;

                    rawListeners(type: any): any;

                    removeAllListeners(type: any, ...args: any[]): any;

                    removeListener(type: any, listener: any): any;

                    setMaxListeners(n: any): any;

                    static EventEmitter: any;

                    static EventEmitterAsyncResource: any;

                    static captureRejectionSymbol: any;

                    static captureRejections: any;

                    static defaultMaxListeners: any;

                    static errorMonitor: any;

                    static getEventListeners: any;

                    static init: any;

                    static kMaxEventTargetListeners: any;

                    static kMaxEventTargetListenersWarned: any;

                    static listenerCount: any;

                    static on: any;

                    static once: any;

                    static setMaxListeners: any;

                    static usingDomains: any;

                }

            }

        }

        namespace password {
            class EventEmitter {
                constructor(opts: any);

                addListener(type: any, listener: any): any;

                emit(type: any, args: any): any;

                eventNames(): any;

                getMaxListeners(): any;

                listenerCount(type: any): any;

                listeners(type: any): any;

                off(type: any, listener: any): any;

                on(type: any, listener: any): any;

                once(type: any, listener: any): any;

                prependListener(type: any, listener: any): any;

                prependOnceListener(type: any, listener: any): any;

                rawListeners(type: any): any;

                removeAllListeners(type: any, ...args: any[]): any;

                removeListener(type: any, listener: any): any;

                setMaxListeners(n: any): any;

                static EventEmitter: any;

                static captureRejectionSymbol: any;

                static captureRejections: boolean;

                static defaultMaxListeners: number;

                static errorMonitor: any;

                static getEventListeners(emitterOrTarget: any, type: any): any;

                static init(opts: any): void;

                static kMaxEventTargetListeners: any;

                static kMaxEventTargetListenersWarned: any;

                static listenerCount(emitter: any, type: any): any;

                static on(emitter: any, event: any, options: any): any;

                static once(emitter: any, name: any, options: any): any;

                static setMaxListeners(n: any, eventTargets: any): void;

                static usingDomains: boolean;

            }

            class EventEmitterAsyncResource {
                constructor(...args: any[]);

                emit(...args: any[]): void;

                emitDestroy(...args: any[]): void;

                static EventEmitterAsyncResource: any;

                static captureRejectionSymbol: any;

                static captureRejections: boolean;

                static defaultMaxListeners: number;

                static errorMonitor: any;

                static getEventListeners(emitterOrTarget: any, type: any): any;

                static init(opts: any): void;

                static kMaxEventTargetListeners: any;

                static kMaxEventTargetListenersWarned: any;

                static listenerCount(emitter: any, type: any): any;

                static on(emitter: any, event: any, options: any): any;

                static once(emitter: any, name: any, options: any): any;

                static setMaxListeners(n: any, eventTargets: any): void;

                static usingDomains: boolean;

            }

            namespace EventEmitter {
                class EventEmitterAsyncResource {
                    constructor(...args: any[]);

                    emit(...args: any[]): void;

                    emitDestroy(...args: any[]): void;

                    static EventEmitter: any;

                    static EventEmitterAsyncResource: any;

                    static captureRejectionSymbol: any;

                    static captureRejections: any;

                    static defaultMaxListeners: any;

                    static errorMonitor: any;

                    static getEventListeners: any;

                    static init: any;

                    static kMaxEventTargetListeners: any;

                    static kMaxEventTargetListenersWarned: any;

                    static listenerCount: any;

                    static on: any;

                    static once: any;

                    static setMaxListeners: any;

                    static usingDomains: any;

                }

            }

            namespace EventEmitterAsyncResource {
                class EventEmitter {
                    constructor(opts: any);

                    addListener(type: any, listener: any): any;

                    emit(type: any, args: any): any;

                    eventNames(): any;

                    getMaxListeners(): any;

                    listenerCount(type: any): any;

                    listeners(type: any): any;

                    off(type: any, listener: any): any;

                    on(type: any, listener: any): any;

                    once(type: any, listener: any): any;

                    prependListener(type: any, listener: any): any;

                    prependOnceListener(type: any, listener: any): any;

                    rawListeners(type: any): any;

                    removeAllListeners(type: any, ...args: any[]): any;

                    removeListener(type: any, listener: any): any;

                    setMaxListeners(n: any): any;

                    static EventEmitter: any;

                    static EventEmitterAsyncResource: any;

                    static captureRejectionSymbol: any;

                    static captureRejections: any;

                    static defaultMaxListeners: any;

                    static errorMonitor: any;

                    static getEventListeners: any;

                    static init: any;

                    static kMaxEventTargetListeners: any;

                    static kMaxEventTargetListenersWarned: any;

                    static listenerCount: any;

                    static on: any;

                    static once: any;

                    static setMaxListeners: any;

                    static usingDomains: any;

                }

            }

        }

        namespace quiz {
            class EventEmitter {
                constructor(opts: any);

                addListener(type: any, listener: any): any;

                emit(type: any, args: any): any;

                eventNames(): any;

                getMaxListeners(): any;

                listenerCount(type: any): any;

                listeners(type: any): any;

                off(type: any, listener: any): any;

                on(type: any, listener: any): any;

                once(type: any, listener: any): any;

                prependListener(type: any, listener: any): any;

                prependOnceListener(type: any, listener: any): any;

                rawListeners(type: any): any;

                removeAllListeners(type: any, ...args: any[]): any;

                removeListener(type: any, listener: any): any;

                setMaxListeners(n: any): any;

                static EventEmitter: any;

                static captureRejectionSymbol: any;

                static captureRejections: boolean;

                static defaultMaxListeners: number;

                static errorMonitor: any;

                static getEventListeners(emitterOrTarget: any, type: any): any;

                static init(opts: any): void;

                static kMaxEventTargetListeners: any;

                static kMaxEventTargetListenersWarned: any;

                static listenerCount(emitter: any, type: any): any;

                static on(emitter: any, event: any, options: any): any;

                static once(emitter: any, name: any, options: any): any;

                static setMaxListeners(n: any, eventTargets: any): void;

                static usingDomains: boolean;

            }

            class EventEmitterAsyncResource {
                constructor(...args: any[]);

                emit(...args: any[]): void;

                emitDestroy(...args: any[]): void;

                static EventEmitterAsyncResource: any;

                static captureRejectionSymbol: any;

                static captureRejections: boolean;

                static defaultMaxListeners: number;

                static errorMonitor: any;

                static getEventListeners(emitterOrTarget: any, type: any): any;

                static init(opts: any): void;

                static kMaxEventTargetListeners: any;

                static kMaxEventTargetListenersWarned: any;

                static listenerCount(emitter: any, type: any): any;

                static on(emitter: any, event: any, options: any): any;

                static once(emitter: any, name: any, options: any): any;

                static setMaxListeners(n: any, eventTargets: any): void;

                static usingDomains: boolean;

            }

            namespace EventEmitter {
                class EventEmitterAsyncResource {
                    constructor(...args: any[]);

                    emit(...args: any[]): void;

                    emitDestroy(...args: any[]): void;

                    static EventEmitter: any;

                    static EventEmitterAsyncResource: any;

                    static captureRejectionSymbol: any;

                    static captureRejections: any;

                    static defaultMaxListeners: any;

                    static errorMonitor: any;

                    static getEventListeners: any;

                    static init: any;

                    static kMaxEventTargetListeners: any;

                    static kMaxEventTargetListenersWarned: any;

                    static listenerCount: any;

                    static on: any;

                    static once: any;

                    static setMaxListeners: any;

                    static usingDomains: any;

                }

            }

            namespace EventEmitterAsyncResource {
                class EventEmitter {
                    constructor(opts: any);

                    addListener(type: any, listener: any): any;

                    emit(type: any, args: any): any;

                    eventNames(): any;

                    getMaxListeners(): any;

                    listenerCount(type: any): any;

                    listeners(type: any): any;

                    off(type: any, listener: any): any;

                    on(type: any, listener: any): any;

                    once(type: any, listener: any): any;

                    prependListener(type: any, listener: any): any;

                    prependOnceListener(type: any, listener: any): any;

                    rawListeners(type: any): any;

                    removeAllListeners(type: any, ...args: any[]): any;

                    removeListener(type: any, listener: any): any;

                    setMaxListeners(n: any): any;

                    static EventEmitter: any;

                    static EventEmitterAsyncResource: any;

                    static captureRejectionSymbol: any;

                    static captureRejections: any;

                    static defaultMaxListeners: any;

                    static errorMonitor: any;

                    static getEventListeners: any;

                    static init: any;

                    static kMaxEventTargetListeners: any;

                    static kMaxEventTargetListenersWarned: any;

                    static listenerCount: any;

                    static on: any;

                    static once: any;

                    static setMaxListeners: any;

                    static usingDomains: any;

                }

            }

        }

        namespace scale {
            class EventEmitter {
                constructor(opts: any);

                addListener(type: any, listener: any): any;

                emit(type: any, args: any): any;

                eventNames(): any;

                getMaxListeners(): any;

                listenerCount(type: any): any;

                listeners(type: any): any;

                off(type: any, listener: any): any;

                on(type: any, listener: any): any;

                once(type: any, listener: any): any;

                prependListener(type: any, listener: any): any;

                prependOnceListener(type: any, listener: any): any;

                rawListeners(type: any): any;

                removeAllListeners(type: any, ...args: any[]): any;

                removeListener(type: any, listener: any): any;

                setMaxListeners(n: any): any;

                static EventEmitter: any;

                static captureRejectionSymbol: any;

                static captureRejections: boolean;

                static defaultMaxListeners: number;

                static errorMonitor: any;

                static getEventListeners(emitterOrTarget: any, type: any): any;

                static init(opts: any): void;

                static kMaxEventTargetListeners: any;

                static kMaxEventTargetListenersWarned: any;

                static listenerCount(emitter: any, type: any): any;

                static on(emitter: any, event: any, options: any): any;

                static once(emitter: any, name: any, options: any): any;

                static setMaxListeners(n: any, eventTargets: any): void;

                static usingDomains: boolean;

            }

            class EventEmitterAsyncResource {
                constructor(...args: any[]);

                emit(...args: any[]): void;

                emitDestroy(...args: any[]): void;

                static EventEmitterAsyncResource: any;

                static captureRejectionSymbol: any;

                static captureRejections: boolean;

                static defaultMaxListeners: number;

                static errorMonitor: any;

                static getEventListeners(emitterOrTarget: any, type: any): any;

                static init(opts: any): void;

                static kMaxEventTargetListeners: any;

                static kMaxEventTargetListenersWarned: any;

                static listenerCount(emitter: any, type: any): any;

                static on(emitter: any, event: any, options: any): any;

                static once(emitter: any, name: any, options: any): any;

                static setMaxListeners(n: any, eventTargets: any): void;

                static usingDomains: boolean;

            }

            namespace EventEmitter {
                class EventEmitterAsyncResource {
                    constructor(...args: any[]);

                    emit(...args: any[]): void;

                    emitDestroy(...args: any[]): void;

                    static EventEmitter: any;

                    static EventEmitterAsyncResource: any;

                    static captureRejectionSymbol: any;

                    static captureRejections: any;

                    static defaultMaxListeners: any;

                    static errorMonitor: any;

                    static getEventListeners: any;

                    static init: any;

                    static kMaxEventTargetListeners: any;

                    static kMaxEventTargetListenersWarned: any;

                    static listenerCount: any;

                    static on: any;

                    static once: any;

                    static setMaxListeners: any;

                    static usingDomains: any;

                }

            }

            namespace EventEmitterAsyncResource {
                class EventEmitter {
                    constructor(opts: any);

                    addListener(type: any, listener: any): any;

                    emit(type: any, args: any): any;

                    eventNames(): any;

                    getMaxListeners(): any;

                    listenerCount(type: any): any;

                    listeners(type: any): any;

                    off(type: any, listener: any): any;

                    on(type: any, listener: any): any;

                    once(type: any, listener: any): any;

                    prependListener(type: any, listener: any): any;

                    prependOnceListener(type: any, listener: any): any;

                    rawListeners(type: any): any;

                    removeAllListeners(type: any, ...args: any[]): any;

                    removeListener(type: any, listener: any): any;

                    setMaxListeners(n: any): any;

                    static EventEmitter: any;

                    static EventEmitterAsyncResource: any;

                    static captureRejectionSymbol: any;

                    static captureRejections: any;

                    static defaultMaxListeners: any;

                    static errorMonitor: any;

                    static getEventListeners: any;

                    static init: any;

                    static kMaxEventTargetListeners: any;

                    static kMaxEventTargetListenersWarned: any;

                    static listenerCount: any;

                    static on: any;

                    static once: any;

                    static setMaxListeners: any;

                    static usingDomains: any;

                }

            }

        }

        namespace select {
            class EventEmitter {
                constructor(opts: any);

                addListener(type: any, listener: any): any;

                emit(type: any, args: any): any;

                eventNames(): any;

                getMaxListeners(): any;

                listenerCount(type: any): any;

                listeners(type: any): any;

                off(type: any, listener: any): any;

                on(type: any, listener: any): any;

                once(type: any, listener: any): any;

                prependListener(type: any, listener: any): any;

                prependOnceListener(type: any, listener: any): any;

                rawListeners(type: any): any;

                removeAllListeners(type: any, ...args: any[]): any;

                removeListener(type: any, listener: any): any;

                setMaxListeners(n: any): any;

                static EventEmitter: any;

                static captureRejectionSymbol: any;

                static captureRejections: boolean;

                static defaultMaxListeners: number;

                static errorMonitor: any;

                static getEventListeners(emitterOrTarget: any, type: any): any;

                static init(opts: any): void;

                static kMaxEventTargetListeners: any;

                static kMaxEventTargetListenersWarned: any;

                static listenerCount(emitter: any, type: any): any;

                static on(emitter: any, event: any, options: any): any;

                static once(emitter: any, name: any, options: any): any;

                static setMaxListeners(n: any, eventTargets: any): void;

                static usingDomains: boolean;

            }

            class EventEmitterAsyncResource {
                constructor(...args: any[]);

                emit(...args: any[]): void;

                emitDestroy(...args: any[]): void;

                static EventEmitterAsyncResource: any;

                static captureRejectionSymbol: any;

                static captureRejections: boolean;

                static defaultMaxListeners: number;

                static errorMonitor: any;

                static getEventListeners(emitterOrTarget: any, type: any): any;

                static init(opts: any): void;

                static kMaxEventTargetListeners: any;

                static kMaxEventTargetListenersWarned: any;

                static listenerCount(emitter: any, type: any): any;

                static on(emitter: any, event: any, options: any): any;

                static once(emitter: any, name: any, options: any): any;

                static setMaxListeners(n: any, eventTargets: any): void;

                static usingDomains: boolean;

            }

            namespace EventEmitter {
                class EventEmitterAsyncResource {
                    constructor(...args: any[]);

                    emit(...args: any[]): void;

                    emitDestroy(...args: any[]): void;

                    static EventEmitter: any;

                    static EventEmitterAsyncResource: any;

                    static captureRejectionSymbol: any;

                    static captureRejections: any;

                    static defaultMaxListeners: any;

                    static errorMonitor: any;

                    static getEventListeners: any;

                    static init: any;

                    static kMaxEventTargetListeners: any;

                    static kMaxEventTargetListenersWarned: any;

                    static listenerCount: any;

                    static on: any;

                    static once: any;

                    static setMaxListeners: any;

                    static usingDomains: any;

                }

            }

            namespace EventEmitterAsyncResource {
                class EventEmitter {
                    constructor(opts: any);

                    addListener(type: any, listener: any): any;

                    emit(type: any, args: any): any;

                    eventNames(): any;

                    getMaxListeners(): any;

                    listenerCount(type: any): any;

                    listeners(type: any): any;

                    off(type: any, listener: any): any;

                    on(type: any, listener: any): any;

                    once(type: any, listener: any): any;

                    prependListener(type: any, listener: any): any;

                    prependOnceListener(type: any, listener: any): any;

                    rawListeners(type: any): any;

                    removeAllListeners(type: any, ...args: any[]): any;

                    removeListener(type: any, listener: any): any;

                    setMaxListeners(n: any): any;

                    static EventEmitter: any;

                    static EventEmitterAsyncResource: any;

                    static captureRejectionSymbol: any;

                    static captureRejections: any;

                    static defaultMaxListeners: any;

                    static errorMonitor: any;

                    static getEventListeners: any;

                    static init: any;

                    static kMaxEventTargetListeners: any;

                    static kMaxEventTargetListenersWarned: any;

                    static listenerCount: any;

                    static on: any;

                    static once: any;

                    static setMaxListeners: any;

                    static usingDomains: any;

                }

            }

        }

        namespace snippet {
            class EventEmitter {
                constructor(opts: any);

                addListener(type: any, listener: any): any;

                emit(type: any, args: any): any;

                eventNames(): any;

                getMaxListeners(): any;

                listenerCount(type: any): any;

                listeners(type: any): any;

                off(type: any, listener: any): any;

                on(type: any, listener: any): any;

                once(type: any, listener: any): any;

                prependListener(type: any, listener: any): any;

                prependOnceListener(type: any, listener: any): any;

                rawListeners(type: any): any;

                removeAllListeners(type: any, ...args: any[]): any;

                removeListener(type: any, listener: any): any;

                setMaxListeners(n: any): any;

                static EventEmitter: any;

                static captureRejectionSymbol: any;

                static captureRejections: boolean;

                static defaultMaxListeners: number;

                static errorMonitor: any;

                static getEventListeners(emitterOrTarget: any, type: any): any;

                static init(opts: any): void;

                static kMaxEventTargetListeners: any;

                static kMaxEventTargetListenersWarned: any;

                static listenerCount(emitter: any, type: any): any;

                static on(emitter: any, event: any, options: any): any;

                static once(emitter: any, name: any, options: any): any;

                static setMaxListeners(n: any, eventTargets: any): void;

                static usingDomains: boolean;

            }

            class EventEmitterAsyncResource {
                constructor(...args: any[]);

                emit(...args: any[]): void;

                emitDestroy(...args: any[]): void;

                static EventEmitterAsyncResource: any;

                static captureRejectionSymbol: any;

                static captureRejections: boolean;

                static defaultMaxListeners: number;

                static errorMonitor: any;

                static getEventListeners(emitterOrTarget: any, type: any): any;

                static init(opts: any): void;

                static kMaxEventTargetListeners: any;

                static kMaxEventTargetListenersWarned: any;

                static listenerCount(emitter: any, type: any): any;

                static on(emitter: any, event: any, options: any): any;

                static once(emitter: any, name: any, options: any): any;

                static setMaxListeners(n: any, eventTargets: any): void;

                static usingDomains: boolean;

            }

            namespace EventEmitter {
                class EventEmitterAsyncResource {
                    constructor(...args: any[]);

                    emit(...args: any[]): void;

                    emitDestroy(...args: any[]): void;

                    static EventEmitter: any;

                    static EventEmitterAsyncResource: any;

                    static captureRejectionSymbol: any;

                    static captureRejections: any;

                    static defaultMaxListeners: any;

                    static errorMonitor: any;

                    static getEventListeners: any;

                    static init: any;

                    static kMaxEventTargetListeners: any;

                    static kMaxEventTargetListenersWarned: any;

                    static listenerCount: any;

                    static on: any;

                    static once: any;

                    static setMaxListeners: any;

                    static usingDomains: any;

                }

            }

            namespace EventEmitterAsyncResource {
                class EventEmitter {
                    constructor(opts: any);

                    addListener(type: any, listener: any): any;

                    emit(type: any, args: any): any;

                    eventNames(): any;

                    getMaxListeners(): any;

                    listenerCount(type: any): any;

                    listeners(type: any): any;

                    off(type: any, listener: any): any;

                    on(type: any, listener: any): any;

                    once(type: any, listener: any): any;

                    prependListener(type: any, listener: any): any;

                    prependOnceListener(type: any, listener: any): any;

                    rawListeners(type: any): any;

                    removeAllListeners(type: any, ...args: any[]): any;

                    removeListener(type: any, listener: any): any;

                    setMaxListeners(n: any): any;

                    static EventEmitter: any;

                    static EventEmitterAsyncResource: any;

                    static captureRejectionSymbol: any;

                    static captureRejections: any;

                    static defaultMaxListeners: any;

                    static errorMonitor: any;

                    static getEventListeners: any;

                    static init: any;

                    static kMaxEventTargetListeners: any;

                    static kMaxEventTargetListenersWarned: any;

                    static listenerCount: any;

                    static on: any;

                    static once: any;

                    static setMaxListeners: any;

                    static usingDomains: any;

                }

            }

        }

        namespace sort {
            class EventEmitter {
                constructor(opts: any);

                addListener(type: any, listener: any): any;

                emit(type: any, args: any): any;

                eventNames(): any;

                getMaxListeners(): any;

                listenerCount(type: any): any;

                listeners(type: any): any;

                off(type: any, listener: any): any;

                on(type: any, listener: any): any;

                once(type: any, listener: any): any;

                prependListener(type: any, listener: any): any;

                prependOnceListener(type: any, listener: any): any;

                rawListeners(type: any): any;

                removeAllListeners(type: any, ...args: any[]): any;

                removeListener(type: any, listener: any): any;

                setMaxListeners(n: any): any;

                static EventEmitter: any;

                static captureRejectionSymbol: any;

                static captureRejections: boolean;

                static defaultMaxListeners: number;

                static errorMonitor: any;

                static getEventListeners(emitterOrTarget: any, type: any): any;

                static init(opts: any): void;

                static kMaxEventTargetListeners: any;

                static kMaxEventTargetListenersWarned: any;

                static listenerCount(emitter: any, type: any): any;

                static on(emitter: any, event: any, options: any): any;

                static once(emitter: any, name: any, options: any): any;

                static setMaxListeners(n: any, eventTargets: any): void;

                static usingDomains: boolean;

            }

            class EventEmitterAsyncResource {
                constructor(...args: any[]);

                emit(...args: any[]): void;

                emitDestroy(...args: any[]): void;

                static EventEmitterAsyncResource: any;

                static captureRejectionSymbol: any;

                static captureRejections: boolean;

                static defaultMaxListeners: number;

                static errorMonitor: any;

                static getEventListeners(emitterOrTarget: any, type: any): any;

                static init(opts: any): void;

                static kMaxEventTargetListeners: any;

                static kMaxEventTargetListenersWarned: any;

                static listenerCount(emitter: any, type: any): any;

                static on(emitter: any, event: any, options: any): any;

                static once(emitter: any, name: any, options: any): any;

                static setMaxListeners(n: any, eventTargets: any): void;

                static usingDomains: boolean;

            }

            namespace EventEmitter {
                class EventEmitterAsyncResource {
                    constructor(...args: any[]);

                    emit(...args: any[]): void;

                    emitDestroy(...args: any[]): void;

                    static EventEmitter: any;

                    static EventEmitterAsyncResource: any;

                    static captureRejectionSymbol: any;

                    static captureRejections: any;

                    static defaultMaxListeners: any;

                    static errorMonitor: any;

                    static getEventListeners: any;

                    static init: any;

                    static kMaxEventTargetListeners: any;

                    static kMaxEventTargetListenersWarned: any;

                    static listenerCount: any;

                    static on: any;

                    static once: any;

                    static setMaxListeners: any;

                    static usingDomains: any;

                }

            }

            namespace EventEmitterAsyncResource {
                class EventEmitter {
                    constructor(opts: any);

                    addListener(type: any, listener: any): any;

                    emit(type: any, args: any): any;

                    eventNames(): any;

                    getMaxListeners(): any;

                    listenerCount(type: any): any;

                    listeners(type: any): any;

                    off(type: any, listener: any): any;

                    on(type: any, listener: any): any;

                    once(type: any, listener: any): any;

                    prependListener(type: any, listener: any): any;

                    prependOnceListener(type: any, listener: any): any;

                    rawListeners(type: any): any;

                    removeAllListeners(type: any, ...args: any[]): any;

                    removeListener(type: any, listener: any): any;

                    setMaxListeners(n: any): any;

                    static EventEmitter: any;

                    static EventEmitterAsyncResource: any;

                    static captureRejectionSymbol: any;

                    static captureRejections: any;

                    static defaultMaxListeners: any;

                    static errorMonitor: any;

                    static getEventListeners: any;

                    static init: any;

                    static kMaxEventTargetListeners: any;

                    static kMaxEventTargetListenersWarned: any;

                    static listenerCount: any;

                    static on: any;

                    static once: any;

                    static setMaxListeners: any;

                    static usingDomains: any;

                }

            }

        }

        namespace survey {
            class EventEmitter {
                constructor(opts: any);

                addListener(type: any, listener: any): any;

                emit(type: any, args: any): any;

                eventNames(): any;

                getMaxListeners(): any;

                listenerCount(type: any): any;

                listeners(type: any): any;

                off(type: any, listener: any): any;

                on(type: any, listener: any): any;

                once(type: any, listener: any): any;

                prependListener(type: any, listener: any): any;

                prependOnceListener(type: any, listener: any): any;

                rawListeners(type: any): any;

                removeAllListeners(type: any, ...args: any[]): any;

                removeListener(type: any, listener: any): any;

                setMaxListeners(n: any): any;

                static EventEmitter: any;

                static captureRejectionSymbol: any;

                static captureRejections: boolean;

                static defaultMaxListeners: number;

                static errorMonitor: any;

                static getEventListeners(emitterOrTarget: any, type: any): any;

                static init(opts: any): void;

                static kMaxEventTargetListeners: any;

                static kMaxEventTargetListenersWarned: any;

                static listenerCount(emitter: any, type: any): any;

                static on(emitter: any, event: any, options: any): any;

                static once(emitter: any, name: any, options: any): any;

                static setMaxListeners(n: any, eventTargets: any): void;

                static usingDomains: boolean;

            }

            class EventEmitterAsyncResource {
                constructor(...args: any[]);

                emit(...args: any[]): void;

                emitDestroy(...args: any[]): void;

                static EventEmitterAsyncResource: any;

                static captureRejectionSymbol: any;

                static captureRejections: boolean;

                static defaultMaxListeners: number;

                static errorMonitor: any;

                static getEventListeners(emitterOrTarget: any, type: any): any;

                static init(opts: any): void;

                static kMaxEventTargetListeners: any;

                static kMaxEventTargetListenersWarned: any;

                static listenerCount(emitter: any, type: any): any;

                static on(emitter: any, event: any, options: any): any;

                static once(emitter: any, name: any, options: any): any;

                static setMaxListeners(n: any, eventTargets: any): void;

                static usingDomains: boolean;

            }

            namespace EventEmitter {
                class EventEmitterAsyncResource {
                    constructor(...args: any[]);

                    emit(...args: any[]): void;

                    emitDestroy(...args: any[]): void;

                    static EventEmitter: any;

                    static EventEmitterAsyncResource: any;

                    static captureRejectionSymbol: any;

                    static captureRejections: any;

                    static defaultMaxListeners: any;

                    static errorMonitor: any;

                    static getEventListeners: any;

                    static init: any;

                    static kMaxEventTargetListeners: any;

                    static kMaxEventTargetListenersWarned: any;

                    static listenerCount: any;

                    static on: any;

                    static once: any;

                    static setMaxListeners: any;

                    static usingDomains: any;

                }

            }

            namespace EventEmitterAsyncResource {
                class EventEmitter {
                    constructor(opts: any);

                    addListener(type: any, listener: any): any;

                    emit(type: any, args: any): any;

                    eventNames(): any;

                    getMaxListeners(): any;

                    listenerCount(type: any): any;

                    listeners(type: any): any;

                    off(type: any, listener: any): any;

                    on(type: any, listener: any): any;

                    once(type: any, listener: any): any;

                    prependListener(type: any, listener: any): any;

                    prependOnceListener(type: any, listener: any): any;

                    rawListeners(type: any): any;

                    removeAllListeners(type: any, ...args: any[]): any;

                    removeListener(type: any, listener: any): any;

                    setMaxListeners(n: any): any;

                    static EventEmitter: any;

                    static EventEmitterAsyncResource: any;

                    static captureRejectionSymbol: any;

                    static captureRejections: any;

                    static defaultMaxListeners: any;

                    static errorMonitor: any;

                    static getEventListeners: any;

                    static init: any;

                    static kMaxEventTargetListeners: any;

                    static kMaxEventTargetListenersWarned: any;

                    static listenerCount: any;

                    static on: any;

                    static once: any;

                    static setMaxListeners: any;

                    static usingDomains: any;

                }

            }

        }

        namespace text {
            class EventEmitter {
                constructor(opts: any);

                addListener(type: any, listener: any): any;

                emit(type: any, args: any): any;

                eventNames(): any;

                getMaxListeners(): any;

                listenerCount(type: any): any;

                listeners(type: any): any;

                off(type: any, listener: any): any;

                on(type: any, listener: any): any;

                once(type: any, listener: any): any;

                prependListener(type: any, listener: any): any;

                prependOnceListener(type: any, listener: any): any;

                rawListeners(type: any): any;

                removeAllListeners(type: any, ...args: any[]): any;

                removeListener(type: any, listener: any): any;

                setMaxListeners(n: any): any;

                static EventEmitter: any;

                static captureRejectionSymbol: any;

                static captureRejections: boolean;

                static defaultMaxListeners: number;

                static errorMonitor: any;

                static getEventListeners(emitterOrTarget: any, type: any): any;

                static init(opts: any): void;

                static kMaxEventTargetListeners: any;

                static kMaxEventTargetListenersWarned: any;

                static listenerCount(emitter: any, type: any): any;

                static on(emitter: any, event: any, options: any): any;

                static once(emitter: any, name: any, options: any): any;

                static setMaxListeners(n: any, eventTargets: any): void;

                static usingDomains: boolean;

            }

            class EventEmitterAsyncResource {
                constructor(...args: any[]);

                emit(...args: any[]): void;

                emitDestroy(...args: any[]): void;

                static EventEmitterAsyncResource: any;

                static captureRejectionSymbol: any;

                static captureRejections: boolean;

                static defaultMaxListeners: number;

                static errorMonitor: any;

                static getEventListeners(emitterOrTarget: any, type: any): any;

                static init(opts: any): void;

                static kMaxEventTargetListeners: any;

                static kMaxEventTargetListenersWarned: any;

                static listenerCount(emitter: any, type: any): any;

                static on(emitter: any, event: any, options: any): any;

                static once(emitter: any, name: any, options: any): any;

                static setMaxListeners(n: any, eventTargets: any): void;

                static usingDomains: boolean;

            }

            namespace EventEmitter {
                class EventEmitterAsyncResource {
                    constructor(...args: any[]);

                    emit(...args: any[]): void;

                    emitDestroy(...args: any[]): void;

                    static EventEmitter: any;

                    static EventEmitterAsyncResource: any;

                    static captureRejectionSymbol: any;

                    static captureRejections: any;

                    static defaultMaxListeners: any;

                    static errorMonitor: any;

                    static getEventListeners: any;

                    static init: any;

                    static kMaxEventTargetListeners: any;

                    static kMaxEventTargetListenersWarned: any;

                    static listenerCount: any;

                    static on: any;

                    static once: any;

                    static setMaxListeners: any;

                    static usingDomains: any;

                }

            }

            namespace EventEmitterAsyncResource {
                class EventEmitter {
                    constructor(opts: any);

                    addListener(type: any, listener: any): any;

                    emit(type: any, args: any): any;

                    eventNames(): any;

                    getMaxListeners(): any;

                    listenerCount(type: any): any;

                    listeners(type: any): any;

                    off(type: any, listener: any): any;

                    on(type: any, listener: any): any;

                    once(type: any, listener: any): any;

                    prependListener(type: any, listener: any): any;

                    prependOnceListener(type: any, listener: any): any;

                    rawListeners(type: any): any;

                    removeAllListeners(type: any, ...args: any[]): any;

                    removeListener(type: any, listener: any): any;

                    setMaxListeners(n: any): any;

                    static EventEmitter: any;

                    static EventEmitterAsyncResource: any;

                    static captureRejectionSymbol: any;

                    static captureRejections: any;

                    static defaultMaxListeners: any;

                    static errorMonitor: any;

                    static getEventListeners: any;

                    static init: any;

                    static kMaxEventTargetListeners: any;

                    static kMaxEventTargetListenersWarned: any;

                    static listenerCount: any;

                    static on: any;

                    static once: any;

                    static setMaxListeners: any;

                    static usingDomains: any;

                }

            }

        }

        namespace toggle {
            class EventEmitter {
                constructor(opts: any);

                addListener(type: any, listener: any): any;

                emit(type: any, args: any): any;

                eventNames(): any;

                getMaxListeners(): any;

                listenerCount(type: any): any;

                listeners(type: any): any;

                off(type: any, listener: any): any;

                on(type: any, listener: any): any;

                once(type: any, listener: any): any;

                prependListener(type: any, listener: any): any;

                prependOnceListener(type: any, listener: any): any;

                rawListeners(type: any): any;

                removeAllListeners(type: any, ...args: any[]): any;

                removeListener(type: any, listener: any): any;

                setMaxListeners(n: any): any;

                static EventEmitter: any;

                static captureRejectionSymbol: any;

                static captureRejections: boolean;

                static defaultMaxListeners: number;

                static errorMonitor: any;

                static getEventListeners(emitterOrTarget: any, type: any): any;

                static init(opts: any): void;

                static kMaxEventTargetListeners: any;

                static kMaxEventTargetListenersWarned: any;

                static listenerCount(emitter: any, type: any): any;

                static on(emitter: any, event: any, options: any): any;

                static once(emitter: any, name: any, options: any): any;

                static setMaxListeners(n: any, eventTargets: any): void;

                static usingDomains: boolean;

            }

            class EventEmitterAsyncResource {
                constructor(...args: any[]);

                emit(...args: any[]): void;

                emitDestroy(...args: any[]): void;

                static EventEmitterAsyncResource: any;

                static captureRejectionSymbol: any;

                static captureRejections: boolean;

                static defaultMaxListeners: number;

                static errorMonitor: any;

                static getEventListeners(emitterOrTarget: any, type: any): any;

                static init(opts: any): void;

                static kMaxEventTargetListeners: any;

                static kMaxEventTargetListenersWarned: any;

                static listenerCount(emitter: any, type: any): any;

                static on(emitter: any, event: any, options: any): any;

                static once(emitter: any, name: any, options: any): any;

                static setMaxListeners(n: any, eventTargets: any): void;

                static usingDomains: boolean;

            }

            namespace EventEmitter {
                class EventEmitterAsyncResource {
                    constructor(...args: any[]);

                    emit(...args: any[]): void;

                    emitDestroy(...args: any[]): void;

                    static EventEmitter: any;

                    static EventEmitterAsyncResource: any;

                    static captureRejectionSymbol: any;

                    static captureRejections: any;

                    static defaultMaxListeners: any;

                    static errorMonitor: any;

                    static getEventListeners: any;

                    static init: any;

                    static kMaxEventTargetListeners: any;

                    static kMaxEventTargetListenersWarned: any;

                    static listenerCount: any;

                    static on: any;

                    static once: any;

                    static setMaxListeners: any;

                    static usingDomains: any;

                }

            }

            namespace EventEmitterAsyncResource {
                class EventEmitter {
                    constructor(opts: any);

                    addListener(type: any, listener: any): any;

                    emit(type: any, args: any): any;

                    eventNames(): any;

                    getMaxListeners(): any;

                    listenerCount(type: any): any;

                    listeners(type: any): any;

                    off(type: any, listener: any): any;

                    on(type: any, listener: any): any;

                    once(type: any, listener: any): any;

                    prependListener(type: any, listener: any): any;

                    prependOnceListener(type: any, listener: any): any;

                    rawListeners(type: any): any;

                    removeAllListeners(type: any, ...args: any[]): any;

                    removeListener(type: any, listener: any): any;

                    setMaxListeners(n: any): any;

                    static EventEmitter: any;

                    static EventEmitterAsyncResource: any;

                    static captureRejectionSymbol: any;

                    static captureRejections: any;

                    static defaultMaxListeners: any;

                    static errorMonitor: any;

                    static getEventListeners: any;

                    static init: any;

                    static kMaxEventTargetListeners: any;

                    static kMaxEventTargetListenersWarned: any;

                    static listenerCount: any;

                    static on: any;

                    static once: any;

                    static setMaxListeners: any;

                    static usingDomains: any;

                }

            }

        }

    }

    namespace types {
        class ArrayPrompt {
            constructor(...args: any[]);

            a(...args: any[]): void;

            addChoice(...args: any[]): void;

            disable(...args: any[]): void;

            dispatch(...args: any[]): void;

            down(...args: any[]): void;

            enable(...args: any[]): void;

            end(...args: any[]): void;

            filter(...args: any[]): void;

            find(...args: any[]): void;

            findIndex(...args: any[]): void;

            first(...args: any[]): void;

            focus(...args: any[]): void;

            g(...args: any[]): void;

            home(...args: any[]): void;

            i(...args: any[]): void;

            indent(...args: any[]): void;

            initialize(...args: any[]): void;

            isChoice(...args: any[]): void;

            isDisabled(...args: any[]): void;

            isEnabled(...args: any[]): void;

            isSelected(...args: any[]): void;

            last(...args: any[]): void;

            left(...args: any[]): void;

            map(...args: any[]): void;

            newItem(...args: any[]): void;

            next(...args: any[]): void;

            number(...args: any[]): void;

            onChoice(...args: any[]): void;

            pageDown(...args: any[]): void;

            pageUp(...args: any[]): void;

            prev(...args: any[]): void;

            reset(...args: any[]): void;

            right(...args: any[]): void;

            scrollDown(...args: any[]): void;

            scrollUp(...args: any[]): void;

            shiftDown(...args: any[]): void;

            shiftUp(...args: any[]): void;

            space(...args: any[]): void;

            submit(...args: any[]): void;

            swap(...args: any[]): void;

            toChoice(...args: any[]): void;

            toChoices(...args: any[]): void;

            toggle(...args: any[]): void;

            up(...args: any[]): void;

            static captureRejectionSymbol: any;

            static captureRejections: boolean;

            static defaultMaxListeners: number;

            static errorMonitor: any;

            static getEventListeners(emitterOrTarget: any, type: any): any;

            static init(opts: any): void;

            static kMaxEventTargetListeners: any;

            static kMaxEventTargetListenersWarned: any;

            static listenerCount(emitter: any, type: any): any;

            static on(emitter: any, event: any, options: any): any;

            static once(emitter: any, name: any, options: any): any;

            static prompt(options: any): void;

            static setMaxListeners(n: any, eventTargets: any): void;

            static usingDomains: boolean;

        }

        class AuthPrompt {
            constructor(...args: any[]);

            submit(...args: any[]): void;

            static captureRejectionSymbol: any;

            static captureRejections: boolean;

            static create(...args: any[]): void;

            static defaultMaxListeners: number;

            static errorMonitor: any;

            static getEventListeners(emitterOrTarget: any, type: any): any;

            static init(opts: any): void;

            static kMaxEventTargetListeners: any;

            static kMaxEventTargetListenersWarned: any;

            static listenerCount(emitter: any, type: any): any;

            static on(emitter: any, event: any, options: any): any;

            static once(emitter: any, name: any, options: any): any;

            static prompt(options: any): void;

            static setMaxListeners(n: any, eventTargets: any): void;

            static usingDomains: boolean;

        }

        class BooleanPrompt {
            constructor(...args: any[]);

            cast(...args: any[]): void;

            dispatch(...args: any[]): void;

            format(...args: any[]): void;

            hint(...args: any[]): void;

            initialize(...args: any[]): void;

            isFalse(...args: any[]): void;

            isTrue(...args: any[]): void;

            isValue(...args: any[]): void;

            render(...args: any[]): void;

            static captureRejectionSymbol: any;

            static captureRejections: boolean;

            static defaultMaxListeners: number;

            static errorMonitor: any;

            static getEventListeners(emitterOrTarget: any, type: any): any;

            static init(opts: any): void;

            static kMaxEventTargetListeners: any;

            static kMaxEventTargetListenersWarned: any;

            static listenerCount(emitter: any, type: any): any;

            static on(emitter: any, event: any, options: any): any;

            static once(emitter: any, name: any, options: any): any;

            static prompt(options: any): void;

            static setMaxListeners(n: any, eventTargets: any): void;

            static usingDomains: boolean;

        }

        class NumberPrompt {
            constructor(...args: any[]);

            append(...args: any[]): void;

            down(...args: any[]): void;

            format(...args: any[]): void;

            isValue(...args: any[]): void;

            next(...args: any[]): void;

            number(...args: any[]): void;

            shiftDown(...args: any[]): void;

            shiftUp(...args: any[]): void;

            submit(...args: any[]): void;

            toNumber(...args: any[]): void;

            up(...args: any[]): void;

            static captureRejectionSymbol: any;

            static captureRejections: boolean;

            static defaultMaxListeners: number;

            static errorMonitor: any;

            static getEventListeners(emitterOrTarget: any, type: any): any;

            static init(opts: any): void;

            static kMaxEventTargetListeners: any;

            static kMaxEventTargetListenersWarned: any;

            static listenerCount(emitter: any, type: any): any;

            static on(emitter: any, event: any, options: any): any;

            static once(emitter: any, name: any, options: any): any;

            static prompt(options: any): void;

            static setMaxListeners(n: any, eventTargets: any): void;

            static usingDomains: boolean;

        }

        class StringPrompt {
            constructor(...args: any[]);

            append(...args: any[]): void;

            backward(...args: any[]): void;

            cutForward(...args: any[]): void;

            cutLeft(...args: any[]): void;

            delete(...args: any[]): void;

            deleteForward(...args: any[]): void;

            dispatch(...args: any[]): void;

            first(...args: any[]): void;

            format(...args: any[]): void;

            forward(...args: any[]): void;

            insert(...args: any[]): void;

            isValue(...args: any[]): void;

            keypress(...args: any[]): void;

            last(...args: any[]): void;

            left(...args: any[]): void;

            moveCursor(...args: any[]): void;

            next(...args: any[]): void;

            paste(...args: any[]): void;

            prev(...args: any[]): void;

            render(...args: any[]): void;

            reset(...args: any[]): void;

            right(...args: any[]): void;

            toggleCursor(...args: any[]): void;

            static captureRejectionSymbol: any;

            static captureRejections: boolean;

            static defaultMaxListeners: number;

            static errorMonitor: any;

            static getEventListeners(emitterOrTarget: any, type: any): any;

            static init(opts: any): void;

            static kMaxEventTargetListeners: any;

            static kMaxEventTargetListenersWarned: any;

            static listenerCount(emitter: any, type: any): any;

            static on(emitter: any, event: any, options: any): any;

            static once(emitter: any, name: any, options: any): any;

            static prompt(options: any): void;

            static setMaxListeners(n: any, eventTargets: any): void;

            static usingDomains: boolean;

        }

        namespace ArrayPrompt {
            class EventEmitter {
                constructor(opts: any);

                addListener(type: any, listener: any): any;

                emit(type: any, args: any): any;

                eventNames(): any;

                getMaxListeners(): any;

                listenerCount(type: any): any;

                listeners(type: any): any;

                off(type: any, listener: any): any;

                on(type: any, listener: any): any;

                once(type: any, listener: any): any;

                prependListener(type: any, listener: any): any;

                prependOnceListener(type: any, listener: any): any;

                rawListeners(type: any): any;

                removeAllListeners(type: any, ...args: any[]): any;

                removeListener(type: any, listener: any): any;

                setMaxListeners(n: any): any;

                static EventEmitter: any;

                static captureRejectionSymbol: any;

                static captureRejections: boolean;

                static defaultMaxListeners: number;

                static errorMonitor: any;

                static getEventListeners(emitterOrTarget: any, type: any): any;

                static init(opts: any): void;

                static kMaxEventTargetListeners: any;

                static kMaxEventTargetListenersWarned: any;

                static listenerCount(emitter: any, type: any): any;

                static on(emitter: any, event: any, options: any): any;

                static once(emitter: any, name: any, options: any): any;

                static setMaxListeners(n: any, eventTargets: any): void;

                static usingDomains: boolean;

            }

            class EventEmitterAsyncResource {
                constructor(...args: any[]);

                emit(...args: any[]): void;

                emitDestroy(...args: any[]): void;

                static EventEmitterAsyncResource: any;

                static captureRejectionSymbol: any;

                static captureRejections: boolean;

                static defaultMaxListeners: number;

                static errorMonitor: any;

                static getEventListeners(emitterOrTarget: any, type: any): any;

                static init(opts: any): void;

                static kMaxEventTargetListeners: any;

                static kMaxEventTargetListenersWarned: any;

                static listenerCount(emitter: any, type: any): any;

                static on(emitter: any, event: any, options: any): any;

                static once(emitter: any, name: any, options: any): any;

                static setMaxListeners(n: any, eventTargets: any): void;

                static usingDomains: boolean;

            }

            namespace EventEmitter {
                class EventEmitterAsyncResource {
                    constructor(...args: any[]);

                    emit(...args: any[]): void;

                    emitDestroy(...args: any[]): void;

                    static EventEmitter: any;

                    static EventEmitterAsyncResource: any;

                    static captureRejectionSymbol: any;

                    static captureRejections: any;

                    static defaultMaxListeners: any;

                    static errorMonitor: any;

                    static getEventListeners: any;

                    static init: any;

                    static kMaxEventTargetListeners: any;

                    static kMaxEventTargetListenersWarned: any;

                    static listenerCount: any;

                    static on: any;

                    static once: any;

                    static setMaxListeners: any;

                    static usingDomains: any;

                }

            }

            namespace EventEmitterAsyncResource {
                class EventEmitter {
                    constructor(opts: any);

                    addListener(type: any, listener: any): any;

                    emit(type: any, args: any): any;

                    eventNames(): any;

                    getMaxListeners(): any;

                    listenerCount(type: any): any;

                    listeners(type: any): any;

                    off(type: any, listener: any): any;

                    on(type: any, listener: any): any;

                    once(type: any, listener: any): any;

                    prependListener(type: any, listener: any): any;

                    prependOnceListener(type: any, listener: any): any;

                    rawListeners(type: any): any;

                    removeAllListeners(type: any, ...args: any[]): any;

                    removeListener(type: any, listener: any): any;

                    setMaxListeners(n: any): any;

                    static EventEmitter: any;

                    static EventEmitterAsyncResource: any;

                    static captureRejectionSymbol: any;

                    static captureRejections: any;

                    static defaultMaxListeners: any;

                    static errorMonitor: any;

                    static getEventListeners: any;

                    static init: any;

                    static kMaxEventTargetListeners: any;

                    static kMaxEventTargetListenersWarned: any;

                    static listenerCount: any;

                    static on: any;

                    static once: any;

                    static setMaxListeners: any;

                    static usingDomains: any;

                }

            }

        }

        namespace AuthPrompt {
            class EventEmitter {
                constructor(opts: any);

                addListener(type: any, listener: any): any;

                emit(type: any, args: any): any;

                eventNames(): any;

                getMaxListeners(): any;

                listenerCount(type: any): any;

                listeners(type: any): any;

                off(type: any, listener: any): any;

                on(type: any, listener: any): any;

                once(type: any, listener: any): any;

                prependListener(type: any, listener: any): any;

                prependOnceListener(type: any, listener: any): any;

                rawListeners(type: any): any;

                removeAllListeners(type: any, ...args: any[]): any;

                removeListener(type: any, listener: any): any;

                setMaxListeners(n: any): any;

                static EventEmitter: any;

                static captureRejectionSymbol: any;

                static captureRejections: boolean;

                static defaultMaxListeners: number;

                static errorMonitor: any;

                static getEventListeners(emitterOrTarget: any, type: any): any;

                static init(opts: any): void;

                static kMaxEventTargetListeners: any;

                static kMaxEventTargetListenersWarned: any;

                static listenerCount(emitter: any, type: any): any;

                static on(emitter: any, event: any, options: any): any;

                static once(emitter: any, name: any, options: any): any;

                static setMaxListeners(n: any, eventTargets: any): void;

                static usingDomains: boolean;

            }

            class EventEmitterAsyncResource {
                constructor(...args: any[]);

                emit(...args: any[]): void;

                emitDestroy(...args: any[]): void;

                static EventEmitterAsyncResource: any;

                static captureRejectionSymbol: any;

                static captureRejections: boolean;

                static defaultMaxListeners: number;

                static errorMonitor: any;

                static getEventListeners(emitterOrTarget: any, type: any): any;

                static init(opts: any): void;

                static kMaxEventTargetListeners: any;

                static kMaxEventTargetListenersWarned: any;

                static listenerCount(emitter: any, type: any): any;

                static on(emitter: any, event: any, options: any): any;

                static once(emitter: any, name: any, options: any): any;

                static setMaxListeners(n: any, eventTargets: any): void;

                static usingDomains: boolean;

            }

            namespace EventEmitter {
                class EventEmitterAsyncResource {
                    constructor(...args: any[]);

                    emit(...args: any[]): void;

                    emitDestroy(...args: any[]): void;

                    static EventEmitter: any;

                    static EventEmitterAsyncResource: any;

                    static captureRejectionSymbol: any;

                    static captureRejections: any;

                    static defaultMaxListeners: any;

                    static errorMonitor: any;

                    static getEventListeners: any;

                    static init: any;

                    static kMaxEventTargetListeners: any;

                    static kMaxEventTargetListenersWarned: any;

                    static listenerCount: any;

                    static on: any;

                    static once: any;

                    static setMaxListeners: any;

                    static usingDomains: any;

                }

            }

            namespace EventEmitterAsyncResource {
                class EventEmitter {
                    constructor(opts: any);

                    addListener(type: any, listener: any): any;

                    emit(type: any, args: any): any;

                    eventNames(): any;

                    getMaxListeners(): any;

                    listenerCount(type: any): any;

                    listeners(type: any): any;

                    off(type: any, listener: any): any;

                    on(type: any, listener: any): any;

                    once(type: any, listener: any): any;

                    prependListener(type: any, listener: any): any;

                    prependOnceListener(type: any, listener: any): any;

                    rawListeners(type: any): any;

                    removeAllListeners(type: any, ...args: any[]): any;

                    removeListener(type: any, listener: any): any;

                    setMaxListeners(n: any): any;

                    static EventEmitter: any;

                    static EventEmitterAsyncResource: any;

                    static captureRejectionSymbol: any;

                    static captureRejections: any;

                    static defaultMaxListeners: any;

                    static errorMonitor: any;

                    static getEventListeners: any;

                    static init: any;

                    static kMaxEventTargetListeners: any;

                    static kMaxEventTargetListenersWarned: any;

                    static listenerCount: any;

                    static on: any;

                    static once: any;

                    static setMaxListeners: any;

                    static usingDomains: any;

                }

            }

        }

        namespace BooleanPrompt {
            class EventEmitter {
                constructor(opts: any);

                addListener(type: any, listener: any): any;

                emit(type: any, args: any): any;

                eventNames(): any;

                getMaxListeners(): any;

                listenerCount(type: any): any;

                listeners(type: any): any;

                off(type: any, listener: any): any;

                on(type: any, listener: any): any;

                once(type: any, listener: any): any;

                prependListener(type: any, listener: any): any;

                prependOnceListener(type: any, listener: any): any;

                rawListeners(type: any): any;

                removeAllListeners(type: any, ...args: any[]): any;

                removeListener(type: any, listener: any): any;

                setMaxListeners(n: any): any;

                static EventEmitter: any;

                static captureRejectionSymbol: any;

                static captureRejections: boolean;

                static defaultMaxListeners: number;

                static errorMonitor: any;

                static getEventListeners(emitterOrTarget: any, type: any): any;

                static init(opts: any): void;

                static kMaxEventTargetListeners: any;

                static kMaxEventTargetListenersWarned: any;

                static listenerCount(emitter: any, type: any): any;

                static on(emitter: any, event: any, options: any): any;

                static once(emitter: any, name: any, options: any): any;

                static setMaxListeners(n: any, eventTargets: any): void;

                static usingDomains: boolean;

            }

            class EventEmitterAsyncResource {
                constructor(...args: any[]);

                emit(...args: any[]): void;

                emitDestroy(...args: any[]): void;

                static EventEmitterAsyncResource: any;

                static captureRejectionSymbol: any;

                static captureRejections: boolean;

                static defaultMaxListeners: number;

                static errorMonitor: any;

                static getEventListeners(emitterOrTarget: any, type: any): any;

                static init(opts: any): void;

                static kMaxEventTargetListeners: any;

                static kMaxEventTargetListenersWarned: any;

                static listenerCount(emitter: any, type: any): any;

                static on(emitter: any, event: any, options: any): any;

                static once(emitter: any, name: any, options: any): any;

                static setMaxListeners(n: any, eventTargets: any): void;

                static usingDomains: boolean;

            }

            namespace EventEmitter {
                class EventEmitterAsyncResource {
                    constructor(...args: any[]);

                    emit(...args: any[]): void;

                    emitDestroy(...args: any[]): void;

                    static EventEmitter: any;

                    static EventEmitterAsyncResource: any;

                    static captureRejectionSymbol: any;

                    static captureRejections: any;

                    static defaultMaxListeners: any;

                    static errorMonitor: any;

                    static getEventListeners: any;

                    static init: any;

                    static kMaxEventTargetListeners: any;

                    static kMaxEventTargetListenersWarned: any;

                    static listenerCount: any;

                    static on: any;

                    static once: any;

                    static setMaxListeners: any;

                    static usingDomains: any;

                }

            }

            namespace EventEmitterAsyncResource {
                class EventEmitter {
                    constructor(opts: any);

                    addListener(type: any, listener: any): any;

                    emit(type: any, args: any): any;

                    eventNames(): any;

                    getMaxListeners(): any;

                    listenerCount(type: any): any;

                    listeners(type: any): any;

                    off(type: any, listener: any): any;

                    on(type: any, listener: any): any;

                    once(type: any, listener: any): any;

                    prependListener(type: any, listener: any): any;

                    prependOnceListener(type: any, listener: any): any;

                    rawListeners(type: any): any;

                    removeAllListeners(type: any, ...args: any[]): any;

                    removeListener(type: any, listener: any): any;

                    setMaxListeners(n: any): any;

                    static EventEmitter: any;

                    static EventEmitterAsyncResource: any;

                    static captureRejectionSymbol: any;

                    static captureRejections: any;

                    static defaultMaxListeners: any;

                    static errorMonitor: any;

                    static getEventListeners: any;

                    static init: any;

                    static kMaxEventTargetListeners: any;

                    static kMaxEventTargetListenersWarned: any;

                    static listenerCount: any;

                    static on: any;

                    static once: any;

                    static setMaxListeners: any;

                    static usingDomains: any;

                }

            }

        }

        namespace NumberPrompt {
            class EventEmitter {
                constructor(opts: any);

                addListener(type: any, listener: any): any;

                emit(type: any, args: any): any;

                eventNames(): any;

                getMaxListeners(): any;

                listenerCount(type: any): any;

                listeners(type: any): any;

                off(type: any, listener: any): any;

                on(type: any, listener: any): any;

                once(type: any, listener: any): any;

                prependListener(type: any, listener: any): any;

                prependOnceListener(type: any, listener: any): any;

                rawListeners(type: any): any;

                removeAllListeners(type: any, ...args: any[]): any;

                removeListener(type: any, listener: any): any;

                setMaxListeners(n: any): any;

                static EventEmitter: any;

                static captureRejectionSymbol: any;

                static captureRejections: boolean;

                static defaultMaxListeners: number;

                static errorMonitor: any;

                static getEventListeners(emitterOrTarget: any, type: any): any;

                static init(opts: any): void;

                static kMaxEventTargetListeners: any;

                static kMaxEventTargetListenersWarned: any;

                static listenerCount(emitter: any, type: any): any;

                static on(emitter: any, event: any, options: any): any;

                static once(emitter: any, name: any, options: any): any;

                static setMaxListeners(n: any, eventTargets: any): void;

                static usingDomains: boolean;

            }

            class EventEmitterAsyncResource {
                constructor(...args: any[]);

                emit(...args: any[]): void;

                emitDestroy(...args: any[]): void;

                static EventEmitterAsyncResource: any;

                static captureRejectionSymbol: any;

                static captureRejections: boolean;

                static defaultMaxListeners: number;

                static errorMonitor: any;

                static getEventListeners(emitterOrTarget: any, type: any): any;

                static init(opts: any): void;

                static kMaxEventTargetListeners: any;

                static kMaxEventTargetListenersWarned: any;

                static listenerCount(emitter: any, type: any): any;

                static on(emitter: any, event: any, options: any): any;

                static once(emitter: any, name: any, options: any): any;

                static setMaxListeners(n: any, eventTargets: any): void;

                static usingDomains: boolean;

            }

            namespace EventEmitter {
                class EventEmitterAsyncResource {
                    constructor(...args: any[]);

                    emit(...args: any[]): void;

                    emitDestroy(...args: any[]): void;

                    static EventEmitter: any;

                    static EventEmitterAsyncResource: any;

                    static captureRejectionSymbol: any;

                    static captureRejections: any;

                    static defaultMaxListeners: any;

                    static errorMonitor: any;

                    static getEventListeners: any;

                    static init: any;

                    static kMaxEventTargetListeners: any;

                    static kMaxEventTargetListenersWarned: any;

                    static listenerCount: any;

                    static on: any;

                    static once: any;

                    static setMaxListeners: any;

                    static usingDomains: any;

                }

            }

            namespace EventEmitterAsyncResource {
                class EventEmitter {
                    constructor(opts: any);

                    addListener(type: any, listener: any): any;

                    emit(type: any, args: any): any;

                    eventNames(): any;

                    getMaxListeners(): any;

                    listenerCount(type: any): any;

                    listeners(type: any): any;

                    off(type: any, listener: any): any;

                    on(type: any, listener: any): any;

                    once(type: any, listener: any): any;

                    prependListener(type: any, listener: any): any;

                    prependOnceListener(type: any, listener: any): any;

                    rawListeners(type: any): any;

                    removeAllListeners(type: any, ...args: any[]): any;

                    removeListener(type: any, listener: any): any;

                    setMaxListeners(n: any): any;

                    static EventEmitter: any;

                    static EventEmitterAsyncResource: any;

                    static captureRejectionSymbol: any;

                    static captureRejections: any;

                    static defaultMaxListeners: any;

                    static errorMonitor: any;

                    static getEventListeners: any;

                    static init: any;

                    static kMaxEventTargetListeners: any;

                    static kMaxEventTargetListenersWarned: any;

                    static listenerCount: any;

                    static on: any;

                    static once: any;

                    static setMaxListeners: any;

                    static usingDomains: any;

                }

            }

        }

        namespace StringPrompt {
            class EventEmitter {
                constructor(opts: any);

                addListener(type: any, listener: any): any;

                emit(type: any, args: any): any;

                eventNames(): any;

                getMaxListeners(): any;

                listenerCount(type: any): any;

                listeners(type: any): any;

                off(type: any, listener: any): any;

                on(type: any, listener: any): any;

                once(type: any, listener: any): any;

                prependListener(type: any, listener: any): any;

                prependOnceListener(type: any, listener: any): any;

                rawListeners(type: any): any;

                removeAllListeners(type: any, ...args: any[]): any;

                removeListener(type: any, listener: any): any;

                setMaxListeners(n: any): any;

                static EventEmitter: any;

                static captureRejectionSymbol: any;

                static captureRejections: boolean;

                static defaultMaxListeners: number;

                static errorMonitor: any;

                static getEventListeners(emitterOrTarget: any, type: any): any;

                static init(opts: any): void;

                static kMaxEventTargetListeners: any;

                static kMaxEventTargetListenersWarned: any;

                static listenerCount(emitter: any, type: any): any;

                static on(emitter: any, event: any, options: any): any;

                static once(emitter: any, name: any, options: any): any;

                static setMaxListeners(n: any, eventTargets: any): void;

                static usingDomains: boolean;

            }

            class EventEmitterAsyncResource {
                constructor(...args: any[]);

                emit(...args: any[]): void;

                emitDestroy(...args: any[]): void;

                static EventEmitterAsyncResource: any;

                static captureRejectionSymbol: any;

                static captureRejections: boolean;

                static defaultMaxListeners: number;

                static errorMonitor: any;

                static getEventListeners(emitterOrTarget: any, type: any): any;

                static init(opts: any): void;

                static kMaxEventTargetListeners: any;

                static kMaxEventTargetListenersWarned: any;

                static listenerCount(emitter: any, type: any): any;

                static on(emitter: any, event: any, options: any): any;

                static once(emitter: any, name: any, options: any): any;

                static setMaxListeners(n: any, eventTargets: any): void;

                static usingDomains: boolean;

            }

            namespace EventEmitter {
                class EventEmitterAsyncResource {
                    constructor(...args: any[]);

                    emit(...args: any[]): void;

                    emitDestroy(...args: any[]): void;

                    static EventEmitter: any;

                    static EventEmitterAsyncResource: any;

                    static captureRejectionSymbol: any;

                    static captureRejections: any;

                    static defaultMaxListeners: any;

                    static errorMonitor: any;

                    static getEventListeners: any;

                    static init: any;

                    static kMaxEventTargetListeners: any;

                    static kMaxEventTargetListenersWarned: any;

                    static listenerCount: any;

                    static on: any;

                    static once: any;

                    static setMaxListeners: any;

                    static usingDomains: any;

                }

            }

            namespace EventEmitterAsyncResource {
                class EventEmitter {
                    constructor(opts: any);

                    addListener(type: any, listener: any): any;

                    emit(type: any, args: any): any;

                    eventNames(): any;

                    getMaxListeners(): any;

                    listenerCount(type: any): any;

                    listeners(type: any): any;

                    off(type: any, listener: any): any;

                    on(type: any, listener: any): any;

                    once(type: any, listener: any): any;

                    prependListener(type: any, listener: any): any;

                    prependOnceListener(type: any, listener: any): any;

                    rawListeners(type: any): any;

                    removeAllListeners(type: any, ...args: any[]): any;

                    removeListener(type: any, listener: any): any;

                    setMaxListeners(n: any): any;

                    static EventEmitter: any;

                    static EventEmitterAsyncResource: any;

                    static captureRejectionSymbol: any;

                    static captureRejections: any;

                    static defaultMaxListeners: any;

                    static errorMonitor: any;

                    static getEventListeners: any;

                    static init: any;

                    static kMaxEventTargetListeners: any;

                    static kMaxEventTargetListenersWarned: any;

                    static listenerCount: any;

                    static on: any;

                    static once: any;

                    static setMaxListeners: any;

                    static usingDomains: any;

                }

            }

        }

    }

}

